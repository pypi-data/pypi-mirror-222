# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .environment import CohereEnvironment
from .errors.bad_request_error import BadRequestError
from .errors.internal_server_error import InternalServerError
from .types.classify_request_examples_item import ClassifyRequestExamplesItem
from .types.classify_request_truncate import ClassifyRequestTruncate
from .types.classify_response import ClassifyResponse
from .types.detect_language_response import DetectLanguageResponse
from .types.detokenize_response import DetokenizeResponse
from .types.embed_request_truncate import EmbedRequestTruncate
from .types.embed_response import EmbedResponse
from .types.generate_request_return_likelihoods import GenerateRequestReturnLikelihoods
from .types.generate_request_truncate import GenerateRequestTruncate
from .types.generation import Generation
from .types.rerank_request_documents_item import RerankRequestDocumentsItem
from .types.rerank_response import RerankResponse
from .types.summarize_request_extractiveness import SummarizeRequestExtractiveness
from .types.summarize_request_format import SummarizeRequestFormat
from .types.summarize_request_length import SummarizeRequestLength
from .types.summarize_request_model import SummarizeRequestModel
from .types.summarize_response import SummarizeResponse
from .types.tokenize_response import TokenizeResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Cohere:
    def __init__(
        self,
        *,
        environment: CohereEnvironment = CohereEnvironment.PRODUCTION,
        api_key: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
    ):
        self._environment = environment
        self._client_wrapper = SyncClientWrapper(api_key=api_key, httpx_client=httpx.Client(timeout=timeout))

    def generate(
        self,
        *,
        prompt: str,
        model: typing.Optional[str] = OMIT,
        num_generations: typing.Optional[int] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        preset: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        k: typing.Optional[int] = OMIT,
        p: typing.Optional[float] = OMIT,
        frequency_penalty: typing.Optional[float] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        end_sequences: typing.Optional[typing.List[str]] = OMIT,
        stop_sequences: typing.Optional[typing.List[str]] = OMIT,
        return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods] = OMIT,
        logit_bias: typing.Optional[typing.Dict[str, float]] = OMIT,
        truncate: typing.Optional[GenerateRequestTruncate] = OMIT,
        stream: typing.Optional[bool] = OMIT,
    ) -> Generation:
        """
        This endpoint generates realistic text conditioned on a given input.

        Parameters:
            - prompt: str. Represents the prompt or text to be completed. Trailing whitespaces will be trimmed. If your use case requires trailing whitespaces, please contact ivan@cohere.ai.

            - model: typing.Optional[str]. The name of the model to generate with. Currently available models are `command` (default), `command-nightly` (experimental), `command-light`, and `command-light-nightly` (experimental). Smaller, "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

            - num_generations: typing.Optional[int]. Defaults to `1`, min value of `1`, max value of `5`. Denotes the maximum number of generations that will be returned.

            - max_tokens: typing.Optional[int]. Denotes the number of tokens to predict per generation, defaults to 20. See [BPE Tokens](/bpe-tokens-wiki) for more details.

                                                Can only be set to `0` if `return_likelihoods` is set to `ALL` to get the likelihood of the prompt.
            - preset: typing.Optional[str]. The ID of a custom playground preset. You can create presets in the [playground](https://dashboard.cohere.ai/playground/generate?model=xlarge). If you use a preset, the `prompt` parameter becomes optional, and any included parameters will override the preset's parameters.

            - temperature: typing.Optional[float]. Defaults to `0.75`, min value of `0.0`, max value of `5.0`. A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations. See [Temperature](/temperature-wiki) for more details.

            - k: typing.Optional[int]. Defaults to `0`(disabled), which is the minimum. Maximum value is `500`. Ensures only the top `k` most likely tokens are considered for generation at each step.

            - p: typing.Optional[float]. Defaults to `0.75`. Set to `1.0` or `0` to disable. If set to a probability `0.0 < p < 1.0`, it ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.

            - frequency_penalty: typing.Optional[float]. Defaults to `0.0`, min value of `0.0`, max value of `1.0`. Can be used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.

            - presence_penalty: typing.Optional[float]. Defaults to `0.0`, min value of `0.0`, max value of `1.0`. Can be used to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.

            - end_sequences: typing.Optional[typing.List[str]]. The generated text will be cut at the beginning of the earliest occurence of an end sequence. The sequence will be excluded from the text.

            - stop_sequences: typing.Optional[typing.List[str]]. The generated text will be cut at the end of the earliest occurence of a stop sequence. The sequence will be included the text.

            - return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods]. One of `GENERATION|ALL|NONE` to specify how and if the token likelihoods are returned with the response. Defaults to `NONE`.

                                                                                     If `GENERATION` is selected, the token likelihoods will only be provided for generated text.

                                                                                     If `ALL` is selected, the token likelihoods will be provided both for the prompt and the generated text.
            - logit_bias: typing.Optional[typing.Dict[str, float]]. Used to prevent the model from generating unwanted tokens or to incentivize it to include desired tokens. The format is `{token_id: bias}` where bias is a float between -10 and 10. Tokens can be obtained from text using [Tokenize](/reference/tokenize).

                                                                    For example, if the value `{'11': -10}` is provided, the model will be very unlikely to include the token 11 (`"\n"`, the newline character) anywhere in the generated text. In contrast `{'11': 10}` will result in generations that nearly only contain that token. Values between -10 and 10 will proportionally affect the likelihood of the token appearing in the generated text.

                                                                    Note: logit bias may not be supported for all custom models.
            - truncate: typing.Optional[GenerateRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                                  Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                                  If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
            - stream: typing.Optional[bool]. When `true` the response will be streamed using JSON streaming. Default is `false`.
        """
        _request: typing.Dict[str, typing.Any] = {"prompt": prompt}
        if model is not OMIT:
            _request["model"] = model
        if num_generations is not OMIT:
            _request["num_generations"] = num_generations
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if preset is not OMIT:
            _request["preset"] = preset
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if k is not OMIT:
            _request["k"] = k
        if p is not OMIT:
            _request["p"] = p
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if end_sequences is not OMIT:
            _request["end_sequences"] = end_sequences
        if stop_sequences is not OMIT:
            _request["stop_sequences"] = stop_sequences
        if return_likelihoods is not OMIT:
            _request["return_likelihoods"] = return_likelihoods
        if logit_bias is not OMIT:
            _request["logit_bias"] = logit_bias
        if truncate is not OMIT:
            _request["truncate"] = truncate
        if stream is not OMIT:
            _request["stream"] = stream
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/generate"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Generation, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def embed(
        self,
        *,
        texts: typing.List[str],
        model: typing.Optional[str] = OMIT,
        truncate: typing.Optional[EmbedRequestTruncate] = OMIT,
    ) -> EmbedResponse:
        """
        This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.

        Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.

        If you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](/docs/semantic-search).

        Parameters:
            - texts: typing.List[str]. An array of strings for the model to embed. Maximum number of texts per call is `96`. We recommend reducing the length of each text to be under `512` tokens for optimal quality.

            - model: typing.Optional[str]. The name of the model. Currently available models are `embed-english-light-v2.0`, `embed-multilingual-v2.0` and `embed-english-v2.0` (default). Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

                                           Models Embedding Names:
                                           * `embed-english-light-v2.0` 1024
                                           * `embed-english-v2.0` 4096
                                           * `embed-multilingual-v2.0` 768
            - truncate: typing.Optional[EmbedRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                               Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                               If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
        """
        _request: typing.Dict[str, typing.Any] = {"texts": texts}
        if model is not OMIT:
            _request["model"] = model
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/embed"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmbedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def classify(
        self,
        *,
        inputs: typing.List[str],
        examples: typing.List[ClassifyRequestExamplesItem],
        model: typing.Optional[str] = OMIT,
        preset: typing.Optional[str] = OMIT,
        truncate: typing.Optional[ClassifyRequestTruncate] = OMIT,
    ) -> ClassifyResponse:
        """
        This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided `examples` of text + label pairs as a reference.

        Note: [Custom Models](/training-representation-models) trained on classification examples don't require the `examples` parameter to be passed in explicitly.

        Parameters:
            - inputs: typing.List[str]. Represents a list of queries to be classified, each entry must not be empty. The maximum is 96 inputs.

            - examples: typing.List[ClassifyRequestExamplesItem]. An array of examples to provide context to the model. Each example is a text string and its associated label/class. Each unique label requires at least 2 examples associated with it; the maximum number of examples is 2500, and each example has a maximum length of 512 tokens. The values should be structured as `{text: "...",label: "..."}`.

                                                                  Note: [Custom Models](/training-representation-models) trained on classification examples don't require the `examples` parameter to be passed in explicitly.
            - model: typing.Optional[str]. The name of the model. Currently available models are `embed-multilingual-v2.0`, `embed-english-light-v2.0`, and `embed-english-v2.0` (default). Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

            - preset: typing.Optional[str]. The ID of a custom playground preset. You can create presets in the [playground](https://dashboard.cohere.ai/playground/classify?model=large). If you use a preset, all other parameters become optional, and any included parameters will override the preset's parameters.

            - truncate: typing.Optional[ClassifyRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                                  Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                                  If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
        """
        _request: typing.Dict[str, typing.Any] = {"inputs": inputs, "examples": examples}
        if model is not OMIT:
            _request["model"] = model
        if preset is not OMIT:
            _request["preset"] = preset
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/classify"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassifyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def tokenize(self, *, text: str, model: typing.Optional[str] = OMIT) -> TokenizeResponse:
        """
        This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.

        Parameters:
            - text: str. The string to be tokenized, the minimum text length is 1 character, and the maximum text length is 65536 characters. <span style="white-space: nowrap">`non-empty`</span> <span style="white-space: nowrap">`<= 65536 characters`</span>

            - model: typing.Optional[str]. An optional parameter to provide the model name. This will ensure that the tokenization uses the tokenizer used by that model.
        """
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if model is not OMIT:
            _request["model"] = model
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/tokenize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenizeResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def detokenize(self, *, tokens: typing.List[int], model: typing.Optional[str] = OMIT) -> DetokenizeResponse:
        """
        This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.

        Parameters:
            - tokens: typing.List[int]. The list of tokens to be detokenized.

            - model: typing.Optional[str]. An optional parameter to provide the model name. This will ensure that the detokenization is done by the tokenizer used by that model.
        """
        _request: typing.Dict[str, typing.Any] = {"tokens": tokens}
        if model is not OMIT:
            _request["model"] = model
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/detokenize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetokenizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def detect_language(self, *, texts: typing.List[str]) -> DetectLanguageResponse:
        """
        This endpoint identifies which language each of the provided texts is written in.

        Parameters:
            - texts: typing.List[str]. List of strings to run the detection on.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/detect-language"),
            json=jsonable_encoder({"texts": texts}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetectLanguageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def summarize(
        self,
        *,
        text: str,
        length: typing.Optional[SummarizeRequestLength] = OMIT,
        format: typing.Optional[SummarizeRequestFormat] = OMIT,
        model: typing.Optional[SummarizeRequestModel] = OMIT,
        extractiveness: typing.Optional[SummarizeRequestExtractiveness] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        additional_command: typing.Optional[str] = OMIT,
    ) -> SummarizeResponse:
        """
        This endpoint generates a summary in English for a given text.

        Parameters:
            - text: str. The text to generate a summary for. Can be up to 100,000 characters long. Currently the only supported language is English. <span style="white-space: nowrap">`<= 50000 characters`</span>

            - length: typing.Optional[SummarizeRequestLength]. One of `short`, `medium`, `long`, or `auto` defaults to `auto`. Indicates the approximate length of the summary. If `auto` is selected, the best option will be picked based on the input text.

            - format: typing.Optional[SummarizeRequestFormat]. One of `paragraph`, `bullets`, or `auto`, defaults to `auto`. Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If `auto` is selected, the best option will be picked based on the input text.

            - model: typing.Optional[SummarizeRequestModel]. The ID of the model to generate the summary with. Currently available models are `summarize-medium` and `summarize-xlarge` (default). Smaller models are faster, while larger models will perform better

            - extractiveness: typing.Optional[SummarizeRequestExtractiveness]. One of `low`, `medium`, `high`, or `auto`, defaults to `auto`. Controls how close to the original text the summary is. `high` extractiveness summaries will lean towards reusing sentences verbatim, while `low` extractiveness summaries will tend to paraphrase more. If `auto` is selected, the best option will be picked based on the input text.

            - temperature: typing.Optional[float]. Ranges from 0 to 5. Controls the randomness of the output. Lower values tend to generate more “predictable” output, while higher values tend to generate more “creative” output. The sweet spot is typically between 0 and 1.

            - additional_command: typing.Optional[str]. A free-form instruction for modifying how the summaries get generated. Should complete the sentence "Generate a summary _". Eg. "focusing on the next steps" or "written by Yoda"
        """
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if length is not OMIT:
            _request["length"] = length
        if format is not OMIT:
            _request["format"] = format
        if model is not OMIT:
            _request["model"] = model
        if extractiveness is not OMIT:
            _request["extractiveness"] = extractiveness
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if additional_command is not OMIT:
            _request["additional_command"] = additional_command
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/summarize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SummarizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def rerank(
        self,
        *,
        model: typing.Optional[str] = OMIT,
        query: str,
        documents: typing.List[RerankRequestDocumentsItem],
        top_n: typing.Optional[int] = OMIT,
        return_documents: typing.Optional[bool] = OMIT,
        max_chunks_per_doc: typing.Optional[int] = OMIT,
    ) -> RerankResponse:
        """
        This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.

        Parameters:
            - model: typing.Optional[str]. The name of the model to use, one of : `rerank-english-v2.0`, `rerank-multilingual-v2.0`

            - query: str. The search query

            - documents: typing.List[RerankRequestDocumentsItem]. A list of document objects or strings to rerank.
                                                                  If a document is provided the text fields is required and all other fields will be preserved in the response.
                                                                  The total max chunks (length of documents * max_chunks_per_doc) must be less than 10000.
            - top_n: typing.Optional[int]. The number of most relevant documents or indices to return, defaults to the length of the documents

            - return_documents: typing.Optional[bool]. - If false, returns results without the doc text - the api will return a list of {index, relevance score} where index is inferred from the list passed into the request.
                                                       - If true, returns results with the doc text passed in - the api will return an ordered list of {index, text, relevance score} where index + text refers to the list passed into the request.
            - max_chunks_per_doc: typing.Optional[int]. The maximum number of chunks to produce internally from a document
        """
        _request: typing.Dict[str, typing.Any] = {"query": query, "documents": documents}
        if model is not OMIT:
            _request["model"] = model
        if top_n is not OMIT:
            _request["top_n"] = top_n
        if return_documents is not OMIT:
            _request["return_documents"] = return_documents
        if max_chunks_per_doc is not OMIT:
            _request["max_chunks_per_doc"] = max_chunks_per_doc
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/rerank"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCohere:
    def __init__(
        self,
        *,
        environment: CohereEnvironment = CohereEnvironment.PRODUCTION,
        api_key: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = 60,
    ):
        self._environment = environment
        self._client_wrapper = AsyncClientWrapper(api_key=api_key, httpx_client=httpx.AsyncClient(timeout=timeout))

    async def generate(
        self,
        *,
        prompt: str,
        model: typing.Optional[str] = OMIT,
        num_generations: typing.Optional[int] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        preset: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        k: typing.Optional[int] = OMIT,
        p: typing.Optional[float] = OMIT,
        frequency_penalty: typing.Optional[float] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        end_sequences: typing.Optional[typing.List[str]] = OMIT,
        stop_sequences: typing.Optional[typing.List[str]] = OMIT,
        return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods] = OMIT,
        logit_bias: typing.Optional[typing.Dict[str, float]] = OMIT,
        truncate: typing.Optional[GenerateRequestTruncate] = OMIT,
        stream: typing.Optional[bool] = OMIT,
    ) -> Generation:
        """
        This endpoint generates realistic text conditioned on a given input.

        Parameters:
            - prompt: str. Represents the prompt or text to be completed. Trailing whitespaces will be trimmed. If your use case requires trailing whitespaces, please contact ivan@cohere.ai.

            - model: typing.Optional[str]. The name of the model to generate with. Currently available models are `command` (default), `command-nightly` (experimental), `command-light`, and `command-light-nightly` (experimental). Smaller, "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

            - num_generations: typing.Optional[int]. Defaults to `1`, min value of `1`, max value of `5`. Denotes the maximum number of generations that will be returned.

            - max_tokens: typing.Optional[int]. Denotes the number of tokens to predict per generation, defaults to 20. See [BPE Tokens](/bpe-tokens-wiki) for more details.

                                                Can only be set to `0` if `return_likelihoods` is set to `ALL` to get the likelihood of the prompt.
            - preset: typing.Optional[str]. The ID of a custom playground preset. You can create presets in the [playground](https://dashboard.cohere.ai/playground/generate?model=xlarge). If you use a preset, the `prompt` parameter becomes optional, and any included parameters will override the preset's parameters.

            - temperature: typing.Optional[float]. Defaults to `0.75`, min value of `0.0`, max value of `5.0`. A non-negative float that tunes the degree of randomness in generation. Lower temperatures mean less random generations. See [Temperature](/temperature-wiki) for more details.

            - k: typing.Optional[int]. Defaults to `0`(disabled), which is the minimum. Maximum value is `500`. Ensures only the top `k` most likely tokens are considered for generation at each step.

            - p: typing.Optional[float]. Defaults to `0.75`. Set to `1.0` or `0` to disable. If set to a probability `0.0 < p < 1.0`, it ensures that only the most likely tokens, with total probability mass of `p`, are considered for generation at each step. If both `k` and `p` are enabled, `p` acts after `k`.

            - frequency_penalty: typing.Optional[float]. Defaults to `0.0`, min value of `0.0`, max value of `1.0`. Can be used to reduce repetitiveness of generated tokens. The higher the value, the stronger a penalty is applied to previously present tokens, proportional to how many times they have already appeared in the prompt or prior generation.

            - presence_penalty: typing.Optional[float]. Defaults to `0.0`, min value of `0.0`, max value of `1.0`. Can be used to reduce repetitiveness of generated tokens. Similar to `frequency_penalty`, except that this penalty is applied equally to all tokens that have already appeared, regardless of their exact frequencies.

            - end_sequences: typing.Optional[typing.List[str]]. The generated text will be cut at the beginning of the earliest occurence of an end sequence. The sequence will be excluded from the text.

            - stop_sequences: typing.Optional[typing.List[str]]. The generated text will be cut at the end of the earliest occurence of a stop sequence. The sequence will be included the text.

            - return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods]. One of `GENERATION|ALL|NONE` to specify how and if the token likelihoods are returned with the response. Defaults to `NONE`.

                                                                                     If `GENERATION` is selected, the token likelihoods will only be provided for generated text.

                                                                                     If `ALL` is selected, the token likelihoods will be provided both for the prompt and the generated text.
            - logit_bias: typing.Optional[typing.Dict[str, float]]. Used to prevent the model from generating unwanted tokens or to incentivize it to include desired tokens. The format is `{token_id: bias}` where bias is a float between -10 and 10. Tokens can be obtained from text using [Tokenize](/reference/tokenize).

                                                                    For example, if the value `{'11': -10}` is provided, the model will be very unlikely to include the token 11 (`"\n"`, the newline character) anywhere in the generated text. In contrast `{'11': 10}` will result in generations that nearly only contain that token. Values between -10 and 10 will proportionally affect the likelihood of the token appearing in the generated text.

                                                                    Note: logit bias may not be supported for all custom models.
            - truncate: typing.Optional[GenerateRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                                  Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                                  If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
            - stream: typing.Optional[bool]. When `true` the response will be streamed using JSON streaming. Default is `false`.
        """
        _request: typing.Dict[str, typing.Any] = {"prompt": prompt}
        if model is not OMIT:
            _request["model"] = model
        if num_generations is not OMIT:
            _request["num_generations"] = num_generations
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if preset is not OMIT:
            _request["preset"] = preset
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if k is not OMIT:
            _request["k"] = k
        if p is not OMIT:
            _request["p"] = p
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if end_sequences is not OMIT:
            _request["end_sequences"] = end_sequences
        if stop_sequences is not OMIT:
            _request["stop_sequences"] = stop_sequences
        if return_likelihoods is not OMIT:
            _request["return_likelihoods"] = return_likelihoods
        if logit_bias is not OMIT:
            _request["logit_bias"] = logit_bias
        if truncate is not OMIT:
            _request["truncate"] = truncate
        if stream is not OMIT:
            _request["stream"] = stream
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/generate"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Generation, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def embed(
        self,
        *,
        texts: typing.List[str],
        model: typing.Optional[str] = OMIT,
        truncate: typing.Optional[EmbedRequestTruncate] = OMIT,
    ) -> EmbedResponse:
        """
        This endpoint returns text embeddings. An embedding is a list of floating point numbers that captures semantic information about the text that it represents.

        Embeddings can be used to create text classifiers as well as empower semantic search. To learn more about embeddings, see the embedding page.

        If you want to learn more how to use the embedding model, have a look at the [Semantic Search Guide](/docs/semantic-search).

        Parameters:
            - texts: typing.List[str]. An array of strings for the model to embed. Maximum number of texts per call is `96`. We recommend reducing the length of each text to be under `512` tokens for optimal quality.

            - model: typing.Optional[str]. The name of the model. Currently available models are `embed-english-light-v2.0`, `embed-multilingual-v2.0` and `embed-english-v2.0` (default). Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

                                           Models Embedding Names:
                                           * `embed-english-light-v2.0` 1024
                                           * `embed-english-v2.0` 4096
                                           * `embed-multilingual-v2.0` 768
            - truncate: typing.Optional[EmbedRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                               Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                               If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
        """
        _request: typing.Dict[str, typing.Any] = {"texts": texts}
        if model is not OMIT:
            _request["model"] = model
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/embed"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmbedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def classify(
        self,
        *,
        inputs: typing.List[str],
        examples: typing.List[ClassifyRequestExamplesItem],
        model: typing.Optional[str] = OMIT,
        preset: typing.Optional[str] = OMIT,
        truncate: typing.Optional[ClassifyRequestTruncate] = OMIT,
    ) -> ClassifyResponse:
        """
        This endpoint makes a prediction about which label fits the specified text inputs best. To make a prediction, Classify uses the provided `examples` of text + label pairs as a reference.

        Note: [Custom Models](/training-representation-models) trained on classification examples don't require the `examples` parameter to be passed in explicitly.

        Parameters:
            - inputs: typing.List[str]. Represents a list of queries to be classified, each entry must not be empty. The maximum is 96 inputs.

            - examples: typing.List[ClassifyRequestExamplesItem]. An array of examples to provide context to the model. Each example is a text string and its associated label/class. Each unique label requires at least 2 examples associated with it; the maximum number of examples is 2500, and each example has a maximum length of 512 tokens. The values should be structured as `{text: "...",label: "..."}`.

                                                                  Note: [Custom Models](/training-representation-models) trained on classification examples don't require the `examples` parameter to be passed in explicitly.
            - model: typing.Optional[str]. The name of the model. Currently available models are `embed-multilingual-v2.0`, `embed-english-light-v2.0`, and `embed-english-v2.0` (default). Smaller "light" models are faster, while larger models will perform better. [Custom models](/docs/training-custom-models) can also be supplied with their full ID.

            - preset: typing.Optional[str]. The ID of a custom playground preset. You can create presets in the [playground](https://dashboard.cohere.ai/playground/classify?model=large). If you use a preset, all other parameters become optional, and any included parameters will override the preset's parameters.

            - truncate: typing.Optional[ClassifyRequestTruncate]. One of `NONE|START|END` to specify how the API will handle inputs longer than the maximum token length.

                                                                  Passing `START` will discard the start of the input. `END` will discard the end of the input. In both cases, input is discarded until the remaining input is exactly the maximum input token length for the model.

                                                                  If `NONE` is selected, when the input exceeds the maximum input token length an error will be returned.
        """
        _request: typing.Dict[str, typing.Any] = {"inputs": inputs, "examples": examples}
        if model is not OMIT:
            _request["model"] = model
        if preset is not OMIT:
            _request["preset"] = preset
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/classify"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassifyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def tokenize(self, *, text: str, model: typing.Optional[str] = OMIT) -> TokenizeResponse:
        """
        This endpoint splits input text into smaller units called tokens using byte-pair encoding (BPE). To learn more about tokenization and byte pair encoding, see the tokens page.

        Parameters:
            - text: str. The string to be tokenized, the minimum text length is 1 character, and the maximum text length is 65536 characters. <span style="white-space: nowrap">`non-empty`</span> <span style="white-space: nowrap">`<= 65536 characters`</span>

            - model: typing.Optional[str]. An optional parameter to provide the model name. This will ensure that the tokenization uses the tokenizer used by that model.
        """
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if model is not OMIT:
            _request["model"] = model
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/tokenize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenizeResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def detokenize(self, *, tokens: typing.List[int], model: typing.Optional[str] = OMIT) -> DetokenizeResponse:
        """
        This endpoint takes tokens using byte-pair encoding and returns their text representation. To learn more about tokenization and byte pair encoding, see the tokens page.

        Parameters:
            - tokens: typing.List[int]. The list of tokens to be detokenized.

            - model: typing.Optional[str]. An optional parameter to provide the model name. This will ensure that the detokenization is done by the tokenizer used by that model.
        """
        _request: typing.Dict[str, typing.Any] = {"tokens": tokens}
        if model is not OMIT:
            _request["model"] = model
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/detokenize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetokenizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def detect_language(self, *, texts: typing.List[str]) -> DetectLanguageResponse:
        """
        This endpoint identifies which language each of the provided texts is written in.

        Parameters:
            - texts: typing.List[str]. List of strings to run the detection on.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/detect-language"),
            json=jsonable_encoder({"texts": texts}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetectLanguageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def summarize(
        self,
        *,
        text: str,
        length: typing.Optional[SummarizeRequestLength] = OMIT,
        format: typing.Optional[SummarizeRequestFormat] = OMIT,
        model: typing.Optional[SummarizeRequestModel] = OMIT,
        extractiveness: typing.Optional[SummarizeRequestExtractiveness] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        additional_command: typing.Optional[str] = OMIT,
    ) -> SummarizeResponse:
        """
        This endpoint generates a summary in English for a given text.

        Parameters:
            - text: str. The text to generate a summary for. Can be up to 100,000 characters long. Currently the only supported language is English. <span style="white-space: nowrap">`<= 50000 characters`</span>

            - length: typing.Optional[SummarizeRequestLength]. One of `short`, `medium`, `long`, or `auto` defaults to `auto`. Indicates the approximate length of the summary. If `auto` is selected, the best option will be picked based on the input text.

            - format: typing.Optional[SummarizeRequestFormat]. One of `paragraph`, `bullets`, or `auto`, defaults to `auto`. Indicates the style in which the summary will be delivered - in a free form paragraph or in bullet points. If `auto` is selected, the best option will be picked based on the input text.

            - model: typing.Optional[SummarizeRequestModel]. The ID of the model to generate the summary with. Currently available models are `summarize-medium` and `summarize-xlarge` (default). Smaller models are faster, while larger models will perform better

            - extractiveness: typing.Optional[SummarizeRequestExtractiveness]. One of `low`, `medium`, `high`, or `auto`, defaults to `auto`. Controls how close to the original text the summary is. `high` extractiveness summaries will lean towards reusing sentences verbatim, while `low` extractiveness summaries will tend to paraphrase more. If `auto` is selected, the best option will be picked based on the input text.

            - temperature: typing.Optional[float]. Ranges from 0 to 5. Controls the randomness of the output. Lower values tend to generate more “predictable” output, while higher values tend to generate more “creative” output. The sweet spot is typically between 0 and 1.

            - additional_command: typing.Optional[str]. A free-form instruction for modifying how the summaries get generated. Should complete the sentence "Generate a summary _". Eg. "focusing on the next steps" or "written by Yoda"
        """
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if length is not OMIT:
            _request["length"] = length
        if format is not OMIT:
            _request["format"] = format
        if model is not OMIT:
            _request["model"] = model
        if extractiveness is not OMIT:
            _request["extractiveness"] = extractiveness
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if additional_command is not OMIT:
            _request["additional_command"] = additional_command
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/summarize"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SummarizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def rerank(
        self,
        *,
        model: typing.Optional[str] = OMIT,
        query: str,
        documents: typing.List[RerankRequestDocumentsItem],
        top_n: typing.Optional[int] = OMIT,
        return_documents: typing.Optional[bool] = OMIT,
        max_chunks_per_doc: typing.Optional[int] = OMIT,
    ) -> RerankResponse:
        """
        This endpoint takes in a query and a list of texts and produces an ordered array with each text assigned a relevance score.

        Parameters:
            - model: typing.Optional[str]. The name of the model to use, one of : `rerank-english-v2.0`, `rerank-multilingual-v2.0`

            - query: str. The search query

            - documents: typing.List[RerankRequestDocumentsItem]. A list of document objects or strings to rerank.
                                                                  If a document is provided the text fields is required and all other fields will be preserved in the response.
                                                                  The total max chunks (length of documents * max_chunks_per_doc) must be less than 10000.
            - top_n: typing.Optional[int]. The number of most relevant documents or indices to return, defaults to the length of the documents

            - return_documents: typing.Optional[bool]. - If false, returns results without the doc text - the api will return a list of {index, relevance score} where index is inferred from the list passed into the request.
                                                       - If true, returns results with the doc text passed in - the api will return an ordered list of {index, text, relevance score} where index + text refers to the list passed into the request.
            - max_chunks_per_doc: typing.Optional[int]. The maximum number of chunks to produce internally from a document
        """
        _request: typing.Dict[str, typing.Any] = {"query": query, "documents": documents}
        if model is not OMIT:
            _request["model"] = model
        if top_n is not OMIT:
            _request["top_n"] = top_n
        if return_documents is not OMIT:
            _request["return_documents"] = return_documents
        if max_chunks_per_doc is not OMIT:
            _request["max_chunks_per_doc"] = max_chunks_per_doc
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "v1/rerank"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
