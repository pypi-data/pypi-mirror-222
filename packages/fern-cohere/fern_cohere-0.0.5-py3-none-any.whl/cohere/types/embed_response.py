# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .embed_response_meta_item import EmbedResponseMetaItem


class EmbedResponse(pydantic.BaseModel):
    id: str
    embeddings: typing.List[typing.List[float]] = pydantic.Field(
        description="An array of embeddings, where each embedding is an array of floats. The length of the `embeddings` array will be the same as the length of the original `texts` array. The `small` embeddings have length `1024` and the large embeddings have length `4096`."
    )
    texts: typing.List[str] = pydantic.Field(description="The text entries for which embeddings were returned.")
    meta: typing.Optional[typing.List[EmbedResponseMetaItem]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
