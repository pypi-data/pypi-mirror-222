# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .core.remove_none_from_headers import remove_none_from_headers
from .environment import CohereEnvironment
from .errors.bad_request_error import BadRequestError
from .errors.internal_server_error import InternalServerError
from .types.classify_request_examples_item import ClassifyRequestExamplesItem
from .types.classify_request_truncate import ClassifyRequestTruncate
from .types.classify_response import ClassifyResponse
from .types.detect_language_response import DetectLanguageResponse
from .types.detokenize_response import DetokenizeResponse
from .types.embed_request_truncate import EmbedRequestTruncate
from .types.embed_response import EmbedResponse
from .types.generate_request_return_likelihoods import GenerateRequestReturnLikelihoods
from .types.generate_request_truncate import GenerateRequestTruncate
from .types.generation import Generation
from .types.rerank_request_documents_item import RerankRequestDocumentsItem
from .types.rerank_response import RerankResponse
from .types.summarize_request_extractiveness import SummarizeRequestExtractiveness
from .types.summarize_request_format import SummarizeRequestFormat
from .types.summarize_request_length import SummarizeRequestLength
from .types.summarize_request_model import SummarizeRequestModel
from .types.summarize_response import SummarizeResponse
from .types.tokenize_response import TokenizeResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Cohere:
    def __init__(self, *, environment: CohereEnvironment = CohereEnvironment.DEFAULT, token: str):
        self._environment = environment
        self._token = token

    def generate(
        self,
        *,
        prompt: str,
        model: typing.Optional[str] = OMIT,
        num_generations: typing.Optional[int] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        preset: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        k: typing.Optional[int] = OMIT,
        p: typing.Optional[float] = OMIT,
        frequency_penalty: typing.Optional[float] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        end_sequences: typing.Optional[typing.List[str]] = OMIT,
        stop_sequences: typing.Optional[typing.List[str]] = OMIT,
        return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods] = OMIT,
        logit_bias: typing.Optional[typing.Dict[str, float]] = OMIT,
        truncate: typing.Optional[GenerateRequestTruncate] = OMIT,
        stream: typing.Optional[bool] = OMIT,
    ) -> Generation:
        _request: typing.Dict[str, typing.Any] = {"prompt": prompt}
        if model is not OMIT:
            _request["model"] = model
        if num_generations is not OMIT:
            _request["num_generations"] = num_generations
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if preset is not OMIT:
            _request["preset"] = preset
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if k is not OMIT:
            _request["k"] = k
        if p is not OMIT:
            _request["p"] = p
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if end_sequences is not OMIT:
            _request["end_sequences"] = end_sequences
        if stop_sequences is not OMIT:
            _request["stop_sequences"] = stop_sequences
        if return_likelihoods is not OMIT:
            _request["return_likelihoods"] = return_likelihoods
        if logit_bias is not OMIT:
            _request["logit_bias"] = logit_bias
        if truncate is not OMIT:
            _request["truncate"] = truncate
        if stream is not OMIT:
            _request["stream"] = stream
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "generate"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Generation, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def embed(
        self,
        *,
        texts: typing.List[str],
        model: typing.Optional[str] = OMIT,
        truncate: typing.Optional[EmbedRequestTruncate] = OMIT,
    ) -> EmbedResponse:
        _request: typing.Dict[str, typing.Any] = {"texts": texts}
        if model is not OMIT:
            _request["model"] = model
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "embed"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmbedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def classify(
        self,
        *,
        inputs: typing.List[str],
        examples: typing.List[ClassifyRequestExamplesItem],
        model: typing.Optional[str] = OMIT,
        preset: typing.Optional[str] = OMIT,
        truncate: typing.Optional[ClassifyRequestTruncate] = OMIT,
    ) -> ClassifyResponse:
        _request: typing.Dict[str, typing.Any] = {"inputs": inputs, "examples": examples}
        if model is not OMIT:
            _request["model"] = model
        if preset is not OMIT:
            _request["preset"] = preset
        if truncate is not OMIT:
            _request["truncate"] = truncate
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "classify"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassifyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def tokenize(self, *, text: str, model: typing.Optional[str] = OMIT) -> TokenizeResponse:
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if model is not OMIT:
            _request["model"] = model
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "tokenize"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenizeResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def detokenize(self, *, tokens: typing.List[int], model: typing.Optional[str] = OMIT) -> DetokenizeResponse:
        _request: typing.Dict[str, typing.Any] = {"tokens": tokens}
        if model is not OMIT:
            _request["model"] = model
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "detokenize"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetokenizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def detect_language(self, *, texts: typing.List[str]) -> DetectLanguageResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "detect-language"),
            json=jsonable_encoder({"texts": texts}),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetectLanguageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def summarize(
        self,
        *,
        text: str,
        length: typing.Optional[SummarizeRequestLength] = OMIT,
        format: typing.Optional[SummarizeRequestFormat] = OMIT,
        model: typing.Optional[SummarizeRequestModel] = OMIT,
        extractiveness: typing.Optional[SummarizeRequestExtractiveness] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        additional_command: typing.Optional[str] = OMIT,
    ) -> SummarizeResponse:
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if length is not OMIT:
            _request["length"] = length
        if format is not OMIT:
            _request["format"] = format
        if model is not OMIT:
            _request["model"] = model
        if extractiveness is not OMIT:
            _request["extractiveness"] = extractiveness
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if additional_command is not OMIT:
            _request["additional_command"] = additional_command
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "summarize"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SummarizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def rerank(
        self,
        *,
        model: typing.Optional[str] = OMIT,
        query: str,
        documents: typing.List[RerankRequestDocumentsItem],
        top_n: typing.Optional[int] = OMIT,
        return_documents: typing.Optional[bool] = OMIT,
        max_chunks_per_doc: typing.Optional[int] = OMIT,
    ) -> RerankResponse:
        _request: typing.Dict[str, typing.Any] = {"query": query, "documents": documents}
        if model is not OMIT:
            _request["model"] = model
        if top_n is not OMIT:
            _request["top_n"] = top_n
        if return_documents is not OMIT:
            _request["return_documents"] = return_documents
        if max_chunks_per_doc is not OMIT:
            _request["max_chunks_per_doc"] = max_chunks_per_doc
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "rerank"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncCohere:
    def __init__(self, *, environment: CohereEnvironment = CohereEnvironment.DEFAULT, token: str):
        self._environment = environment
        self._token = token

    async def generate(
        self,
        *,
        prompt: str,
        model: typing.Optional[str] = OMIT,
        num_generations: typing.Optional[int] = OMIT,
        max_tokens: typing.Optional[int] = OMIT,
        preset: typing.Optional[str] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        k: typing.Optional[int] = OMIT,
        p: typing.Optional[float] = OMIT,
        frequency_penalty: typing.Optional[float] = OMIT,
        presence_penalty: typing.Optional[float] = OMIT,
        end_sequences: typing.Optional[typing.List[str]] = OMIT,
        stop_sequences: typing.Optional[typing.List[str]] = OMIT,
        return_likelihoods: typing.Optional[GenerateRequestReturnLikelihoods] = OMIT,
        logit_bias: typing.Optional[typing.Dict[str, float]] = OMIT,
        truncate: typing.Optional[GenerateRequestTruncate] = OMIT,
        stream: typing.Optional[bool] = OMIT,
    ) -> Generation:
        _request: typing.Dict[str, typing.Any] = {"prompt": prompt}
        if model is not OMIT:
            _request["model"] = model
        if num_generations is not OMIT:
            _request["num_generations"] = num_generations
        if max_tokens is not OMIT:
            _request["max_tokens"] = max_tokens
        if preset is not OMIT:
            _request["preset"] = preset
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if k is not OMIT:
            _request["k"] = k
        if p is not OMIT:
            _request["p"] = p
        if frequency_penalty is not OMIT:
            _request["frequency_penalty"] = frequency_penalty
        if presence_penalty is not OMIT:
            _request["presence_penalty"] = presence_penalty
        if end_sequences is not OMIT:
            _request["end_sequences"] = end_sequences
        if stop_sequences is not OMIT:
            _request["stop_sequences"] = stop_sequences
        if return_likelihoods is not OMIT:
            _request["return_likelihoods"] = return_likelihoods
        if logit_bias is not OMIT:
            _request["logit_bias"] = logit_bias
        if truncate is not OMIT:
            _request["truncate"] = truncate
        if stream is not OMIT:
            _request["stream"] = stream
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "generate"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Generation, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def embed(
        self,
        *,
        texts: typing.List[str],
        model: typing.Optional[str] = OMIT,
        truncate: typing.Optional[EmbedRequestTruncate] = OMIT,
    ) -> EmbedResponse:
        _request: typing.Dict[str, typing.Any] = {"texts": texts}
        if model is not OMIT:
            _request["model"] = model
        if truncate is not OMIT:
            _request["truncate"] = truncate
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "embed"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmbedResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def classify(
        self,
        *,
        inputs: typing.List[str],
        examples: typing.List[ClassifyRequestExamplesItem],
        model: typing.Optional[str] = OMIT,
        preset: typing.Optional[str] = OMIT,
        truncate: typing.Optional[ClassifyRequestTruncate] = OMIT,
    ) -> ClassifyResponse:
        _request: typing.Dict[str, typing.Any] = {"inputs": inputs, "examples": examples}
        if model is not OMIT:
            _request["model"] = model
        if preset is not OMIT:
            _request["preset"] = preset
        if truncate is not OMIT:
            _request["truncate"] = truncate
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "classify"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassifyResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def tokenize(self, *, text: str, model: typing.Optional[str] = OMIT) -> TokenizeResponse:
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if model is not OMIT:
            _request["model"] = model
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "tokenize"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokenizeResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def detokenize(self, *, tokens: typing.List[int], model: typing.Optional[str] = OMIT) -> DetokenizeResponse:
        _request: typing.Dict[str, typing.Any] = {"tokens": tokens}
        if model is not OMIT:
            _request["model"] = model
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "detokenize"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetokenizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def detect_language(self, *, texts: typing.List[str]) -> DetectLanguageResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "detect-language"),
                json=jsonable_encoder({"texts": texts}),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DetectLanguageResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def summarize(
        self,
        *,
        text: str,
        length: typing.Optional[SummarizeRequestLength] = OMIT,
        format: typing.Optional[SummarizeRequestFormat] = OMIT,
        model: typing.Optional[SummarizeRequestModel] = OMIT,
        extractiveness: typing.Optional[SummarizeRequestExtractiveness] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        additional_command: typing.Optional[str] = OMIT,
    ) -> SummarizeResponse:
        _request: typing.Dict[str, typing.Any] = {"text": text}
        if length is not OMIT:
            _request["length"] = length
        if format is not OMIT:
            _request["format"] = format
        if model is not OMIT:
            _request["model"] = model
        if extractiveness is not OMIT:
            _request["extractiveness"] = extractiveness
        if temperature is not OMIT:
            _request["temperature"] = temperature
        if additional_command is not OMIT:
            _request["additional_command"] = additional_command
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "summarize"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SummarizeResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def rerank(
        self,
        *,
        model: typing.Optional[str] = OMIT,
        query: str,
        documents: typing.List[RerankRequestDocumentsItem],
        top_n: typing.Optional[int] = OMIT,
        return_documents: typing.Optional[bool] = OMIT,
        max_chunks_per_doc: typing.Optional[int] = OMIT,
    ) -> RerankResponse:
        _request: typing.Dict[str, typing.Any] = {"query": query, "documents": documents}
        if model is not OMIT:
            _request["model"] = model
        if top_n is not OMIT:
            _request["top_n"] = top_n
        if return_documents is not OMIT:
            _request["return_documents"] = return_documents
        if max_chunks_per_doc is not OMIT:
            _request["max_chunks_per_doc"] = max_chunks_per_doc
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "rerank"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RerankResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
