# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .classify_response_classifications_item_labels_value import ClassifyResponseClassificationsItemLabelsValue


class ClassifyResponseClassificationsItem(pydantic.BaseModel):
    id: str
    input: typing.Optional[str] = pydantic.Field(description=("The input text that was classified\n"))
    prediction: str = pydantic.Field(description=("The predicted label for the associated query\n"))
    confidence: float = pydantic.Field(description=("The confidence score for the top predicted class\n"))
    labels: typing.Dict[str, ClassifyResponseClassificationsItemLabelsValue] = pydantic.Field(
        description=(
            "A map containing each label and its confidence score according to the classifier. All the confidence scores add up to 1.\n"
        )
    )
    confidences: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = pydantic.Field(
        description=("An array containing each label and its confidence score according to the classifier\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
