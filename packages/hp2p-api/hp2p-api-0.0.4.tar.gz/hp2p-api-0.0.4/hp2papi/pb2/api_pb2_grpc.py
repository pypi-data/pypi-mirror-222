# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2


class Hp2pApiProtoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ready = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Ready',
                request_serializer=api__pb2.ReadyRequest.SerializeToString,
                response_deserializer=api__pb2.ReadyResponse.FromString,
                )
        self.Creation = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Creation',
                request_serializer=api__pb2.CreationRequest.SerializeToString,
                response_deserializer=api__pb2.CreationResponse.FromString,
                )


class Hp2pApiProtoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ready(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Creation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Hp2pApiProtoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ready': grpc.unary_unary_rpc_method_handler(
                    servicer.Ready,
                    request_deserializer=api__pb2.ReadyRequest.FromString,
                    response_serializer=api__pb2.ReadyResponse.SerializeToString,
            ),
            'Creation': grpc.unary_unary_rpc_method_handler(
                    servicer.Creation,
                    request_deserializer=api__pb2.CreationRequest.FromString,
                    response_serializer=api__pb2.CreationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hp2pApiProto.Hp2pApiProto', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Hp2pApiProto(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ready(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Ready',
            api__pb2.ReadyRequest.SerializeToString,
            api__pb2.ReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Creation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Creation',
            api__pb2.CreationRequest.SerializeToString,
            api__pb2.CreationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
