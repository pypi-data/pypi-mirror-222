# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from frequenz.api.dispatch import dispatch_pb2 as frequenz_dot_api_dot_dispatch_dot_dispatch__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class DispatchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListDispatches = channel.unary_unary(
                '/frequenz.api.dispatch.DispatchService/ListDispatches',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchListRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchList.FromString,
                )
        self.CreateDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.DispatchService/CreateDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchCreateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.DispatchService/UpdateDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchUpdateRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.GetDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.DispatchService/GetDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchGetRequest.SerializeToString,
                response_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.Dispatch.FromString,
                )
        self.DeleteDispatch = channel.unary_unary(
                '/frequenz.api.dispatch.DispatchService/DeleteDispatch',
                request_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchDeleteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class DispatchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListDispatches(self, request, context):
        """Returns a list of all dispatches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDispatch(self, request, context):
        """Create a new dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDispatch(self, request, context):
        """Update a dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDispatch(self, request, context):
        """Get a single dispatch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDispatch(self, request, context):
        """Delete a given dispatch
        Performs a "soft-delete" by marking the given dispatch as deleted in the database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DispatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListDispatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDispatches,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchListRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchList.SerializeToString,
            ),
            'CreateDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchCreateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchUpdateRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchGetRequest.FromString,
                    response_serializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.Dispatch.SerializeToString,
            ),
            'DeleteDispatch': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDispatch,
                    request_deserializer=frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchDeleteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'frequenz.api.dispatch.DispatchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DispatchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListDispatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.DispatchService/ListDispatches',
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchListRequest.SerializeToString,
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.DispatchService/CreateDispatch',
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchCreateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.DispatchService/UpdateDispatch',
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchUpdateRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.DispatchService/GetDispatch',
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchGetRequest.SerializeToString,
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.Dispatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDispatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/frequenz.api.dispatch.DispatchService/DeleteDispatch',
            frequenz_dot_api_dot_dispatch_dot_dispatch__pb2.DispatchDeleteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
