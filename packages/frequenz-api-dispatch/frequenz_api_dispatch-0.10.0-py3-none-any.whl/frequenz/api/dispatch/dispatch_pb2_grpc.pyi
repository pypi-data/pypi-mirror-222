"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
protolint:disable MAX_LINE_LENGTH"""
import abc
import collections.abc
import frequenz.api.dispatch.dispatch_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class DispatchServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ListDispatches: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchListRequest,
        frequenz.api.dispatch.dispatch_pb2.DispatchList,
    ]
    """Returns a list of all dispatches"""
    CreateDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchCreateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Create a new dispatch"""
    UpdateDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchUpdateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Update a dispatch"""
    GetDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchGetRequest,
        frequenz.api.dispatch.dispatch_pb2.Dispatch,
    ]
    """Get a single dispatch"""
    DeleteDispatch: grpc.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchDeleteRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete a given dispatch
    Performs a "soft-delete" by marking the given dispatch as deleted in the database.
    """

class DispatchServiceAsyncStub:
    ListDispatches: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchListRequest,
        frequenz.api.dispatch.dispatch_pb2.DispatchList,
    ]
    """Returns a list of all dispatches"""
    CreateDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchCreateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Create a new dispatch"""
    UpdateDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchUpdateRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Update a dispatch"""
    GetDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchGetRequest,
        frequenz.api.dispatch.dispatch_pb2.Dispatch,
    ]
    """Get a single dispatch"""
    DeleteDispatch: grpc.aio.UnaryUnaryMultiCallable[
        frequenz.api.dispatch.dispatch_pb2.DispatchDeleteRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Delete a given dispatch
    Performs a "soft-delete" by marking the given dispatch as deleted in the database.
    """

class DispatchServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ListDispatches(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchListRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.dispatch_pb2.DispatchList, collections.abc.Awaitable[frequenz.api.dispatch.dispatch_pb2.DispatchList]]:
        """Returns a list of all dispatches"""
    @abc.abstractmethod
    def CreateDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchCreateRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Create a new dispatch"""
    @abc.abstractmethod
    def UpdateDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchUpdateRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Update a dispatch"""
    @abc.abstractmethod
    def GetDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchGetRequest,
        context: _ServicerContext,
    ) -> typing.Union[frequenz.api.dispatch.dispatch_pb2.Dispatch, collections.abc.Awaitable[frequenz.api.dispatch.dispatch_pb2.Dispatch]]:
        """Get a single dispatch"""
    @abc.abstractmethod
    def DeleteDispatch(
        self,
        request: frequenz.api.dispatch.dispatch_pb2.DispatchDeleteRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Delete a given dispatch
        Performs a "soft-delete" by marking the given dispatch as deleted in the database.
        """

def add_DispatchServiceServicer_to_server(servicer: DispatchServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
