# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetReleaseChannelResult',
    'AwaitableGetReleaseChannelResult',
    'get_release_channel',
    'get_release_channel_output',
]

@pulumi.output_type
class GetReleaseChannelResult:
    """
    A collection of values returned by getReleaseChannel.
    """
    def __init__(__self__, application=None, id=None, name=None, policy=None, runtimes=None, version=None):
        if application and not isinstance(application, str):
            raise TypeError("Expected argument 'application' to be a str")
        pulumi.set(__self__, "application", application)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)
        if runtimes and not isinstance(runtimes, list):
            raise TypeError("Expected argument 'runtimes' to be a list")
        pulumi.set(__self__, "runtimes", runtimes)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def application(self) -> str:
        """
        Name of the Application this Release Channel belongs to
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Release channel identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Release Channel name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> 'outputs.GetReleaseChannelPolicyResult':
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def runtimes(self) -> Sequence['outputs.GetReleaseChannelRuntimeResult']:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "runtimes")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Current application version
        """
        return pulumi.get(self, "version")


class AwaitableGetReleaseChannelResult(GetReleaseChannelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReleaseChannelResult(
            application=self.application,
            id=self.id,
            name=self.name,
            policy=self.policy,
            runtimes=self.runtimes,
            version=self.version)


def get_release_channel(application: Optional[str] = None,
                        name: Optional[str] = None,
                        policy: Optional[pulumi.InputType['GetReleaseChannelPolicyArgs']] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReleaseChannelResult:
    """
    Prodvana Release Channel

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prodvana as prodvana

    example = prodvana.get_release_channel(application="my-app",
        name="my-rc")
    ```


    :param str application: Name of the Application this Release Channel belongs to
    :param str name: Release Channel name
    :param pulumi.InputType['GetReleaseChannelPolicyArgs'] policy: Release Channel policy applied to all services
    """
    __args__ = dict()
    __args__['application'] = application
    __args__['name'] = name
    __args__['policy'] = policy
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('prodvana:index/getReleaseChannel:getReleaseChannel', __args__, opts=opts, typ=GetReleaseChannelResult).value

    return AwaitableGetReleaseChannelResult(
        application=pulumi.get(__ret__, 'application'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy=pulumi.get(__ret__, 'policy'),
        runtimes=pulumi.get(__ret__, 'runtimes'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_release_channel)
def get_release_channel_output(application: Optional[pulumi.Input[str]] = None,
                               name: Optional[pulumi.Input[str]] = None,
                               policy: Optional[pulumi.Input[Optional[pulumi.InputType['GetReleaseChannelPolicyArgs']]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReleaseChannelResult]:
    """
    Prodvana Release Channel

    ## Example Usage

    ```python
    import pulumi
    import pulumi_prodvana as prodvana

    example = prodvana.get_release_channel(application="my-app",
        name="my-rc")
    ```


    :param str application: Name of the Application this Release Channel belongs to
    :param str name: Release Channel name
    :param pulumi.InputType['GetReleaseChannelPolicyArgs'] policy: Release Channel policy applied to all services
    """
    ...
