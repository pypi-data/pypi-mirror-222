# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ManagedK8sRuntimeExecArgs',
    'ReleaseChannelPolicyArgs',
    'ReleaseChannelPolicyDefaultEnvArgs',
    'ReleaseChannelPolicyDefaultEnvSecretArgs',
    'ReleaseChannelRuntimeArgs',
    'GetReleaseChannelPolicyArgs',
    'GetReleaseChannelPolicyDefaultEnvArgs',
    'GetReleaseChannelPolicyDefaultEnvSecretArgs',
]

@pulumi.input_type
class ManagedK8sRuntimeExecArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 command: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] api_version: API version of the exec credential plugin
        :param pulumi.Input[str] command: Command to execute
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Arguments to pass when executing the command
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: Environment variables to set when executing the command
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "command", command)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if env is not None:
            pulumi.set(__self__, "env", env)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        API version of the exec credential plugin
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[str]:
        """
        Command to execute
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arguments to pass when executing the command
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables to set when executing the command
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)


@pulumi.input_type
class ReleaseChannelPolicyArgs:
    def __init__(__self__, *,
                 default_env: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReleaseChannelPolicyDefaultEnvArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input['ReleaseChannelPolicyDefaultEnvArgs']]] default_env: default environment variables for services in this Release Channel
        """
        if default_env is not None:
            pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ReleaseChannelPolicyDefaultEnvArgs']]]]:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")

    @default_env.setter
    def default_env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ReleaseChannelPolicyDefaultEnvArgs']]]]):
        pulumi.set(self, "default_env", value)


@pulumi.input_type
class ReleaseChannelPolicyDefaultEnvArgs:
    def __init__(__self__, *,
                 secret: Optional[pulumi.Input['ReleaseChannelPolicyDefaultEnvSecretArgs']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input['ReleaseChannelPolicyDefaultEnvSecretArgs']]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input['ReleaseChannelPolicyDefaultEnvSecretArgs']]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ReleaseChannelPolicyDefaultEnvSecretArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: Current application version
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Current application version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ReleaseChannelRuntimeArgs:
    def __init__(__self__, *,
                 ecs_prefix: Optional[pulumi.Input[str]] = None,
                 k8s_namespace: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 runtime: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ecs_prefix: Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        :param pulumi.Input[str] k8s_namespace: Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        :param pulumi.Input[str] name: optional identifier for this runtime connection within this release channel
        :param pulumi.Input[str] runtime: name of the a runtime
        :param pulumi.Input[str] type: type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        """
        if ecs_prefix is not None:
            pulumi.set(__self__, "ecs_prefix", ecs_prefix)
        if k8s_namespace is not None:
            pulumi.set(__self__, "k8s_namespace", k8s_namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ecsPrefix")
    def ecs_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        """
        return pulumi.get(self, "ecs_prefix")

    @ecs_prefix.setter
    def ecs_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecs_prefix", value)

    @property
    @pulumi.getter(name="k8sNamespace")
    def k8s_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        """
        return pulumi.get(self, "k8s_namespace")

    @k8s_namespace.setter
    def k8s_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_namespace", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        optional identifier for this runtime connection within this release channel
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def runtime(self) -> Optional[pulumi.Input[str]]:
        """
        name of the a runtime
        """
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class GetReleaseChannelPolicyArgs:
    def __init__(__self__, *,
                 default_env: Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs']):
        """
        :param Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs'] default_env: default environment variables for services in this Release Channel
        """
        pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs']:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")

    @default_env.setter
    def default_env(self, value: Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs']):
        pulumi.set(self, "default_env", value)


@pulumi.input_type
class GetReleaseChannelPolicyDefaultEnvArgs:
    def __init__(__self__, *,
                 secret: Optional['GetReleaseChannelPolicyDefaultEnvSecretArgs'] = None,
                 value: Optional[str] = None):
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional['GetReleaseChannelPolicyDefaultEnvSecretArgs']:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional['GetReleaseChannelPolicyDefaultEnvSecretArgs']):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetReleaseChannelPolicyDefaultEnvSecretArgs:
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str version: Current application version
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Current application version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[str]):
        pulumi.set(self, "version", value)


