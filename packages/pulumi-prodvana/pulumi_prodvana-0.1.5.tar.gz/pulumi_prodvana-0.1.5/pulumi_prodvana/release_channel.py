# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReleaseChannelArgs', 'ReleaseChannel']

@pulumi.input_type
class ReleaseChannelArgs:
    def __init__(__self__, *,
                 application: pulumi.Input[str],
                 runtimes: pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]],
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input['ReleaseChannelPolicyArgs']] = None):
        """
        The set of arguments for constructing a ReleaseChannel resource.
        :param pulumi.Input[str] application: Name of the Application this Release Channel belongs to
        :param pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]] runtimes: Release Channel policy applied to all services
        :param pulumi.Input[str] name: Release Channel name
        :param pulumi.Input['ReleaseChannelPolicyArgs'] policy: Release Channel policy applied to all services
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "runtimes", runtimes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Input[str]:
        """
        Name of the Application this Release Channel belongs to
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: pulumi.Input[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def runtimes(self) -> pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "runtimes")

    @runtimes.setter
    def runtimes(self, value: pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]]):
        pulumi.set(self, "runtimes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Release Channel name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['ReleaseChannelPolicyArgs']]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['ReleaseChannelPolicyArgs']]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class _ReleaseChannelState:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input['ReleaseChannelPolicyArgs']] = None,
                 runtimes: Optional[pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReleaseChannel resources.
        :param pulumi.Input[str] application: Name of the Application this Release Channel belongs to
        :param pulumi.Input[str] name: Release Channel name
        :param pulumi.Input['ReleaseChannelPolicyArgs'] policy: Release Channel policy applied to all services
        :param pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]] runtimes: Release Channel policy applied to all services
        :param pulumi.Input[str] version: Current application version
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if runtimes is not None:
            pulumi.set(__self__, "runtimes", runtimes)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Application this Release Channel belongs to
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Release Channel name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['ReleaseChannelPolicyArgs']]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['ReleaseChannelPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def runtimes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]]]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "runtimes")

    @runtimes.setter
    def runtimes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReleaseChannelRuntimeArgs']]]]):
        pulumi.set(self, "runtimes", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Current application version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class ReleaseChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[pulumi.InputType['ReleaseChannelPolicyArgs']]] = None,
                 runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReleaseChannelRuntimeArgs']]]]] = None,
                 __props__=None):
        """
        This resource allows you to manage a Prodvana [Release Channel](https://docs.prodvana.io/docs/prodvana-concepts#release-channel).

        ## Import

        ```sh
         $ pulumi import prodvana:index/releaseChannel:ReleaseChannel example <application name>/<release channel name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application: Name of the Application this Release Channel belongs to
        :param pulumi.Input[str] name: Release Channel name
        :param pulumi.Input[pulumi.InputType['ReleaseChannelPolicyArgs']] policy: Release Channel policy applied to all services
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReleaseChannelRuntimeArgs']]]] runtimes: Release Channel policy applied to all services
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to manage a Prodvana [Release Channel](https://docs.prodvana.io/docs/prodvana-concepts#release-channel).

        ## Import

        ```sh
         $ pulumi import prodvana:index/releaseChannel:ReleaseChannel example <application name>/<release channel name>
        ```

        :param str resource_name: The name of the resource.
        :param ReleaseChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[pulumi.InputType['ReleaseChannelPolicyArgs']]] = None,
                 runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReleaseChannelRuntimeArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseChannelArgs.__new__(ReleaseChannelArgs)

            if application is None and not opts.urn:
                raise TypeError("Missing required property 'application'")
            __props__.__dict__["application"] = application
            __props__.__dict__["name"] = name
            __props__.__dict__["policy"] = policy
            if runtimes is None and not opts.urn:
                raise TypeError("Missing required property 'runtimes'")
            __props__.__dict__["runtimes"] = runtimes
            __props__.__dict__["version"] = None
        super(ReleaseChannel, __self__).__init__(
            'prodvana:index/releaseChannel:ReleaseChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy: Optional[pulumi.Input[pulumi.InputType['ReleaseChannelPolicyArgs']]] = None,
            runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReleaseChannelRuntimeArgs']]]]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'ReleaseChannel':
        """
        Get an existing ReleaseChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application: Name of the Application this Release Channel belongs to
        :param pulumi.Input[str] name: Release Channel name
        :param pulumi.Input[pulumi.InputType['ReleaseChannelPolicyArgs']] policy: Release Channel policy applied to all services
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReleaseChannelRuntimeArgs']]]] runtimes: Release Channel policy applied to all services
        :param pulumi.Input[str] version: Current application version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseChannelState.__new__(_ReleaseChannelState)

        __props__.__dict__["application"] = application
        __props__.__dict__["name"] = name
        __props__.__dict__["policy"] = policy
        __props__.__dict__["runtimes"] = runtimes
        __props__.__dict__["version"] = version
        return ReleaseChannel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Output[str]:
        """
        Name of the Application this Release Channel belongs to
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Release Channel name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional['outputs.ReleaseChannelPolicy']]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def runtimes(self) -> pulumi.Output[Sequence['outputs.ReleaseChannelRuntime']]:
        """
        Release Channel policy applied to all services
        """
        return pulumi.get(self, "runtimes")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Current application version
        """
        return pulumi.get(self, "version")

