# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ManagedK8sRuntimeExec',
    'ReleaseChannelPolicy',
    'ReleaseChannelPolicyDefaultEnv',
    'ReleaseChannelPolicyDefaultEnvSecret',
    'ReleaseChannelRuntime',
    'GetReleaseChannelPolicyResult',
    'GetReleaseChannelPolicyDefaultEnvResult',
    'GetReleaseChannelPolicyDefaultEnvSecretResult',
    'GetReleaseChannelRuntimeResult',
]

@pulumi.output_type
class ManagedK8sRuntimeExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedK8sRuntimeExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedK8sRuntimeExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedK8sRuntimeExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: str,
                 command: str,
                 args: Optional[Sequence[str]] = None,
                 env: Optional[Mapping[str, str]] = None):
        """
        :param str api_version: API version of the exec credential plugin
        :param str command: Command to execute
        :param Sequence[str] args: Arguments to pass when executing the command
        :param Mapping[str, str] env: Environment variables to set when executing the command
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "command", command)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if env is not None:
            pulumi.set(__self__, "env", env)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        API version of the exec credential plugin
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        Command to execute
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to pass when executing the command
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables to set when executing the command
        """
        return pulumi.get(self, "env")


@pulumi.output_type
class ReleaseChannelPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultEnv":
            suggest = "default_env"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_env: Optional[Mapping[str, 'outputs.ReleaseChannelPolicyDefaultEnv']] = None):
        """
        :param Mapping[str, 'ReleaseChannelPolicyDefaultEnvArgs'] default_env: default environment variables for services in this Release Channel
        """
        if default_env is not None:
            pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Optional[Mapping[str, 'outputs.ReleaseChannelPolicyDefaultEnv']]:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")


@pulumi.output_type
class ReleaseChannelPolicyDefaultEnv(dict):
    def __init__(__self__, *,
                 secret: Optional['outputs.ReleaseChannelPolicyDefaultEnvSecret'] = None,
                 value: Optional[str] = None):
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ReleaseChannelPolicyDefaultEnvSecret']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReleaseChannelPolicyDefaultEnvSecret(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str version: Current application version
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Current application version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ReleaseChannelRuntime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ecsPrefix":
            suggest = "ecs_prefix"
        elif key == "k8sNamespace":
            suggest = "k8s_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelRuntime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelRuntime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelRuntime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ecs_prefix: Optional[str] = None,
                 k8s_namespace: Optional[str] = None,
                 name: Optional[str] = None,
                 runtime: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ecs_prefix: Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        :param str k8s_namespace: Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        :param str name: optional identifier for this runtime connection within this release channel
        :param str runtime: name of the a runtime
        :param str type: type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        """
        if ecs_prefix is not None:
            pulumi.set(__self__, "ecs_prefix", ecs_prefix)
        if k8s_namespace is not None:
            pulumi.set(__self__, "k8s_namespace", k8s_namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ecsPrefix")
    def ecs_prefix(self) -> Optional[str]:
        """
        Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        """
        return pulumi.get(self, "ecs_prefix")

    @property
    @pulumi.getter(name="k8sNamespace")
    def k8s_namespace(self) -> Optional[str]:
        """
        Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        """
        return pulumi.get(self, "k8s_namespace")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        optional identifier for this runtime connection within this release channel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def runtime(self) -> Optional[str]:
        """
        name of the a runtime
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetReleaseChannelPolicyResult(dict):
    def __init__(__self__, *,
                 default_env: Mapping[str, 'outputs.GetReleaseChannelPolicyDefaultEnvResult']):
        """
        :param Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs'] default_env: default environment variables for services in this Release Channel
        """
        pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Mapping[str, 'outputs.GetReleaseChannelPolicyDefaultEnvResult']:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")


@pulumi.output_type
class GetReleaseChannelPolicyDefaultEnvResult(dict):
    def __init__(__self__, *,
                 secret: Optional['outputs.GetReleaseChannelPolicyDefaultEnvSecretResult'] = None,
                 value: Optional[str] = None):
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.GetReleaseChannelPolicyDefaultEnvSecretResult']:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReleaseChannelPolicyDefaultEnvSecretResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str version: Current application version
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Current application version
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetReleaseChannelRuntimeResult(dict):
    def __init__(__self__, *,
                 ecs_prefix: str,
                 k8s_namespace: str,
                 name: str,
                 type: str,
                 runtime: Optional[str] = None):
        """
        :param str ecs_prefix: ECS prefix
        :param str k8s_namespace: Kubernetes namespace
        :param str name: optional identifier for this runtime connection within this release channel
        :param str type: type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        :param str runtime: name of the a runtime
        """
        pulumi.set(__self__, "ecs_prefix", ecs_prefix)
        pulumi.set(__self__, "k8s_namespace", k8s_namespace)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="ecsPrefix")
    def ecs_prefix(self) -> str:
        """
        ECS prefix
        """
        return pulumi.get(self, "ecs_prefix")

    @property
    @pulumi.getter(name="k8sNamespace")
    def k8s_namespace(self) -> str:
        """
        Kubernetes namespace
        """
        return pulumi.get(self, "k8s_namespace")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        optional identifier for this runtime connection within this release channel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of the runtime connection, one of (EXTENSION, LONG*LIVED*COMPUTE, UNKNOWN_CONNECTION)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def runtime(self) -> Optional[str]:
        """
        name of the a runtime
        """
        return pulumi.get(self, "runtime")


