Metadata-Version: 2.1
Name: promptmeteo
Version: 0.0.0
Summary: Label, clean and enrich text datasets with LLMs
Author-email: Angel Delgado <adelgado@paradigmadigital.com>
License: MIT License
        
        Copyright (c) 2023 Paradigma Digital S.L.
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: all
License-File: LICENSE

# PromptMeteo

**Promptmeteo** is a Python library build over LangChain to build prompts and LLMs by configuration parameters. The goal of this project is to be used as a template to industrialize LLM projects.

<div align="center">
<h1>ðŸ”¥ðŸ§”</h1>
<i>Dammed to chains for bringing humans the light</i>

</div>


## Installation

```sh
~/promptmeteo$ make setup
```

## Quick start

```python
from promptmeteo import Promptmeteo

model = Promptmeteo(
        task_type           = 'classification',
        model_provider_name = 'hf_pipeline',
        model_name          = 'google/flan-t5-small',
        selector_algorithm  = 'semantic_similarity',
        selector_k          = 3
    )

model = model.train(
    examples = ['estoy feliz', 'me da igual', 'no me gusta'],
    annotations = ['positivo', 'neutral', 'negativo'],
)

model.predict(['que guay!!'])
```
```
>>> [[positive]]
```


## Build project

Build image and run container

```sh
$ docker build -t promptmeteo .
$ docker run -it promptmeteo bash
```

Run example

```sh
$ python examples/getting_started.py --data_path data/classification_data.csv --prompt_path prompts/classification.yml
```

Run test

```sh
$ python -m pytest tests
```

## Project Structure

```
promptmeteo
â”œâ”€â”€ data
â”‚Â Â  â””â”€â”€ classification_data.csv
â”œâ”€â”€ Dockerfile
â”œâ”€â”€ examples
â”‚Â Â  â””â”€â”€ getting_started.py
â”œâ”€â”€ LICENSE
â”œâ”€â”€ Makefile
â”œâ”€â”€ prompts
â”‚Â Â  â”œâ”€â”€ classification.yml
â”‚Â Â  â””â”€â”€ ner_prompt.yml
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ src
â”‚Â Â  â””â”€â”€ promptmeteo
â”‚Â Â      â”œâ”€â”€ __init__.py
â”‚Â Â      â”œâ”€â”€ main.py
â”‚Â Â      â”œâ”€â”€ models
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ base.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ fake_llm.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ hf_hub_api.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ hf_pipeline.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ __init__.py
â”‚Â Â      â”‚Â Â  â””â”€â”€ openai.py
â”‚Â Â      â”œâ”€â”€ parsers
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ classification_parser.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ dummy_parser.py
â”‚Â Â      â”‚Â Â  â””â”€â”€ __init__.py
â”‚Â Â      â”œâ”€â”€ prompts
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ base.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ classification_prompt.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ __init__.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ ner_prompt.py
â”‚Â Â      â”‚Â Â  â””â”€â”€ templates
â”‚Â Â      â”‚Â Â      â”œâ”€â”€ en
â”‚Â Â      â”‚Â Â      â”œâ”€â”€ __init__.py
â”‚Â Â      â”‚Â Â      â””â”€â”€ sp
â”‚Â Â      â”‚Â Â          â”œâ”€â”€ classification_prompt.yml
â”‚Â Â      â”‚Â Â          â”œâ”€â”€ __init__.py
â”‚Â Â      â”‚Â Â          â””â”€â”€ ner_prompt.yml
â”‚Â Â      â”œâ”€â”€ selector
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ __init__.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ length_selector.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ marginal_relevance_selector.py
â”‚Â Â      â”‚Â Â  â”œâ”€â”€ n_gram_selector.py
â”‚Â Â      â”‚Â Â  â””â”€â”€ semantic_similarity_selector.py
â”‚Â Â      â””â”€â”€ tasks
â”‚Â Â          â”œâ”€â”€ base.py
â”‚Â Â          â”œâ”€â”€ classification_task.py
â”‚Â Â          â”œâ”€â”€ __init__.py
â”‚Â Â          â””â”€â”€ ner_task.py
â””â”€â”€ tests
    â”œâ”€â”€ test_main.py
    â”œâ”€â”€ test_models.py
    â”œâ”€â”€ test_parsers.py
    â”œâ”€â”€ test_prompts.py
    â”œâ”€â”€ test_selectors.py
    â””â”€â”€ test_task.py
```

## Objects

```mermaid
classDiagram

Promptmeteo        ..|> TaskBuilder        : Composition
TaskBuilder        ..|> Task               : Build
ClassificationTask --|> Task               : Inheritance
Task               ..|> PromptFactory      : Composition
Task               ..|> ParserFactory      : Composition
Task               ..|> SelectorFactory    : Composition
Task               ..|> ModelFactory       : Composition
Prompt             ..|> PromptFactory      : Instanciate
Parser             ..|> ParserFactory      : Instanciate
Selector           ..|> SelectorFactory    : Instanciate
Model              ..|> ModelFactory       : Instanciate

class Promptmeteo{
  + builder : TaskBuilder
  + train(examples : List[str], annotations : List[str])
  + predict(examples : List[str])
}
class TaskBuilder{
  + task : Task
  - _build_model()
  - _build_pormpt()
  - _build_parser()
  - _build_selector()
}
class Task{
  + model : Model
  + prompt : Prompt
  + parser : Parser
  + selector : Selector
  + run(prompt: str)
}
class ClassificationTask{
  + model : Model
  + prompt : Prompt
  + parser : Parser
  + selector : Selector
  + run(prompt: str)
}
class PromptFactory{
  + factory_method() -> Prompt
}
class ParserFactory{
  + factory_method() -> Parser
}
class ModelFactory{
  + factory_method() -> Model
}
class SelectorFactory{
  + factory_method() -> Selector
}
class Prompt{
  + PROMPT_EXAMPLE
  + run()
}
class Parser{
  + run()
}
class Model{
  + llm
  + run(prompt: str)
}
class Selector{
  + example_selector
  + run(prompt: str)
}
```
