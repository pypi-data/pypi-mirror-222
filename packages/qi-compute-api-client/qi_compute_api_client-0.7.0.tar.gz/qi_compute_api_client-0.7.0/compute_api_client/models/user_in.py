# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from compute_api_client.configuration import Configuration


class UserIn(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'full_name': 'str',
        'email': 'str',
        'is_superuser': 'bool',
        'is_staff': 'bool',
        'is_active': 'bool',
        'is_confirmed': 'bool'
    }

    attribute_map = {
        'full_name': 'full_name',
        'email': 'email',
        'is_superuser': 'is_superuser',
        'is_staff': 'is_staff',
        'is_active': 'is_active',
        'is_confirmed': 'is_confirmed'
    }

    def __init__(self, full_name=None, email=None, is_superuser=False, is_staff=False, is_active=False, is_confirmed=False, local_vars_configuration=None):  # noqa: E501
        """UserIn - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._full_name = None
        self._email = None
        self._is_superuser = None
        self._is_staff = None
        self._is_active = None
        self._is_confirmed = None
        self.discriminator = None

        self.full_name = full_name
        self.email = email
        if is_superuser is not None:
            self.is_superuser = is_superuser
        if is_staff is not None:
            self.is_staff = is_staff
        if is_active is not None:
            self.is_active = is_active
        if is_confirmed is not None:
            self.is_confirmed = is_confirmed

    @property
    def full_name(self):
        """Gets the full_name of this UserIn.  # noqa: E501


        :return: The full_name of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserIn.


        :param full_name: The full_name of this UserIn.  # noqa: E501
        :type full_name: str
        """
        if self.local_vars_configuration.client_side_validation and full_name is None:  # noqa: E501
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                full_name is not None and len(full_name) > 64):
            raise ValueError("Invalid value for `full_name`, length must be less than or equal to `64`")  # noqa: E501

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this UserIn.  # noqa: E501


        :return: The email of this UserIn.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserIn.


        :param email: The email of this UserIn.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 256):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `256`")  # noqa: E501

        self._email = email

    @property
    def is_superuser(self):
        """Gets the is_superuser of this UserIn.  # noqa: E501


        :return: The is_superuser of this UserIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_superuser

    @is_superuser.setter
    def is_superuser(self, is_superuser):
        """Sets the is_superuser of this UserIn.


        :param is_superuser: The is_superuser of this UserIn.  # noqa: E501
        :type is_superuser: bool
        """

        self._is_superuser = is_superuser

    @property
    def is_staff(self):
        """Gets the is_staff of this UserIn.  # noqa: E501


        :return: The is_staff of this UserIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff

    @is_staff.setter
    def is_staff(self, is_staff):
        """Sets the is_staff of this UserIn.


        :param is_staff: The is_staff of this UserIn.  # noqa: E501
        :type is_staff: bool
        """

        self._is_staff = is_staff

    @property
    def is_active(self):
        """Gets the is_active of this UserIn.  # noqa: E501


        :return: The is_active of this UserIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserIn.


        :param is_active: The is_active of this UserIn.  # noqa: E501
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_confirmed(self):
        """Gets the is_confirmed of this UserIn.  # noqa: E501


        :return: The is_confirmed of this UserIn.  # noqa: E501
        :rtype: bool
        """
        return self._is_confirmed

    @is_confirmed.setter
    def is_confirmed(self, is_confirmed):
        """Sets the is_confirmed of this UserIn.


        :param is_confirmed: The is_confirmed of this UserIn.  # noqa: E501
        :type is_confirmed: bool
        """

        self._is_confirmed = is_confirmed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIn):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserIn):
            return True

        return self.to_dict() != other.to_dict()
