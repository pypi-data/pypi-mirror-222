# coding: utf-8

"""
    Quantum Inspire 2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from compute_api_client.configuration import Configuration


class RuntimeWithAuthentication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'location': 'str',
        'status': 'RuntimeStatus',
        'last_heartbeat': 'datetime',
        'authentication_hash': 'str',
        'runtime_type_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'location': 'location',
        'status': 'status',
        'last_heartbeat': 'last_heartbeat',
        'authentication_hash': 'authentication_hash',
        'runtime_type_id': 'runtime_type_id'
    }

    def __init__(self, id=None, name=None, location=None, status=None, last_heartbeat=None, authentication_hash=None, runtime_type_id=None, local_vars_configuration=None):  # noqa: E501
        """RuntimeWithAuthentication - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._location = None
        self._status = None
        self._last_heartbeat = None
        self._authentication_hash = None
        self._runtime_type_id = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.location = location
        self.status = status
        self.last_heartbeat = last_heartbeat
        self.authentication_hash = authentication_hash
        self.runtime_type_id = runtime_type_id

    @property
    def id(self):
        """Gets the id of this RuntimeWithAuthentication.  # noqa: E501


        :return: The id of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuntimeWithAuthentication.


        :param id: The id of this RuntimeWithAuthentication.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RuntimeWithAuthentication.  # noqa: E501


        :return: The name of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuntimeWithAuthentication.


        :param name: The name of this RuntimeWithAuthentication.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 32):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this RuntimeWithAuthentication.  # noqa: E501


        :return: The location of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RuntimeWithAuthentication.


        :param location: The location of this RuntimeWithAuthentication.  # noqa: E501
        :type location: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                location is not None and len(location) > 32):
            raise ValueError("Invalid value for `location`, length must be less than or equal to `32`")  # noqa: E501

        self._location = location

    @property
    def status(self):
        """Gets the status of this RuntimeWithAuthentication.  # noqa: E501

        OFFLINE: offline<br/>IDLE: idle<br/>EXECUTING: executing<br/>CALIBRATING: calibrating  # noqa: E501

        :return: The status of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: RuntimeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuntimeWithAuthentication.

        OFFLINE: offline<br/>IDLE: idle<br/>EXECUTING: executing<br/>CALIBRATING: calibrating  # noqa: E501

        :param status: The status of this RuntimeWithAuthentication.  # noqa: E501
        :type status: RuntimeStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                status is not None and len(status) > 11):
            raise ValueError("Invalid value for `status`, length must be less than or equal to `11`")  # noqa: E501

        self._status = status

    @property
    def last_heartbeat(self):
        """Gets the last_heartbeat of this RuntimeWithAuthentication.  # noqa: E501


        :return: The last_heartbeat of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat):
        """Sets the last_heartbeat of this RuntimeWithAuthentication.


        :param last_heartbeat: The last_heartbeat of this RuntimeWithAuthentication.  # noqa: E501
        :type last_heartbeat: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_heartbeat is None:  # noqa: E501
            raise ValueError("Invalid value for `last_heartbeat`, must not be `None`")  # noqa: E501

        self._last_heartbeat = last_heartbeat

    @property
    def authentication_hash(self):
        """Gets the authentication_hash of this RuntimeWithAuthentication.  # noqa: E501


        :return: The authentication_hash of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._authentication_hash

    @authentication_hash.setter
    def authentication_hash(self, authentication_hash):
        """Sets the authentication_hash of this RuntimeWithAuthentication.


        :param authentication_hash: The authentication_hash of this RuntimeWithAuthentication.  # noqa: E501
        :type authentication_hash: str
        """
        if self.local_vars_configuration.client_side_validation and authentication_hash is None:  # noqa: E501
            raise ValueError("Invalid value for `authentication_hash`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                authentication_hash is not None and len(authentication_hash) > 32):
            raise ValueError("Invalid value for `authentication_hash`, length must be less than or equal to `32`")  # noqa: E501

        self._authentication_hash = authentication_hash

    @property
    def runtime_type_id(self):
        """Gets the runtime_type_id of this RuntimeWithAuthentication.  # noqa: E501


        :return: The runtime_type_id of this RuntimeWithAuthentication.  # noqa: E501
        :rtype: int
        """
        return self._runtime_type_id

    @runtime_type_id.setter
    def runtime_type_id(self, runtime_type_id):
        """Sets the runtime_type_id of this RuntimeWithAuthentication.


        :param runtime_type_id: The runtime_type_id of this RuntimeWithAuthentication.  # noqa: E501
        :type runtime_type_id: int
        """
        if self.local_vars_configuration.client_side_validation and runtime_type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `runtime_type_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runtime_type_id is not None and runtime_type_id > 2147483647):  # noqa: E501
            raise ValueError("Invalid value for `runtime_type_id`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                runtime_type_id is not None and runtime_type_id < 1):  # noqa: E501
            raise ValueError("Invalid value for `runtime_type_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._runtime_type_id = runtime_type_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuntimeWithAuthentication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RuntimeWithAuthentication):
            return True

        return self.to_dict() != other.to_dict()
