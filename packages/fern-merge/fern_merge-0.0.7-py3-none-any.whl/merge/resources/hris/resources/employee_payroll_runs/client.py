# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.remove_none_from_dict import remove_none_from_dict
from .....environment import MergeEnvironment
from ...types.employee_payroll_run import EmployeePayrollRun
from ...types.employee_payroll_runs_list_request_expand import EmployeePayrollRunsListRequestExpand
from ...types.employee_payroll_runs_retrieve_request_expand import EmployeePayrollRunsRetrieveRequestExpand
from ...types.paginated_employee_payroll_run_list import PaginatedEmployeePayrollRunList


class EmployeePayrollRunsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        ended_after: typing.Optional[str] = None,
        ended_before: typing.Optional[str] = None,
        expand: typing.Optional[EmployeePayrollRunsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        modified_after: typing.Optional[str] = None,
        modified_before: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        payroll_run_id: typing.Optional[str] = None,
        remote_id: typing.Optional[str] = None,
        started_after: typing.Optional[str] = None,
        started_before: typing.Optional[str] = None,
    ) -> PaginatedEmployeePayrollRunList:
        """
        Returns a list of `EmployeePayrollRun` objects.

        Parameters:
            - created_after: typing.Optional[str]. If provided, will only return objects created after this datetime.

            - created_before: typing.Optional[str]. If provided, will only return objects created before this datetime.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - employee_id: typing.Optional[str]. If provided, will only return employee payroll runs for this employee.

            - ended_after: typing.Optional[str]. If provided, will only return employee payroll runs ended after this datetime.

            - ended_before: typing.Optional[str]. If provided, will only return employee payroll runs ended before this datetime.

            - expand: typing.Optional[EmployeePayrollRunsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - modified_after: typing.Optional[str]. If provided, only objects synced by Merge after this date time will be returned.

            - modified_before: typing.Optional[str]. If provided, only objects synced by Merge before this date time will be returned.

            - page_size: typing.Optional[int]. Number of results to return per page.

            - payroll_run_id: typing.Optional[str]. If provided, will only return employee payroll runs for this employee.

            - remote_id: typing.Optional[str]. The API provider's ID for the given object.

            - started_after: typing.Optional[str]. If provided, will only return employee payroll runs started after this datetime.

            - started_before: typing.Optional[str]. If provided, will only return employee payroll runs started before this datetime.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/hris/v1/employee-payroll-runs"),
            params=remove_none_from_dict(
                {
                    "created_after": created_after,
                    "created_before": created_before,
                    "cursor": cursor,
                    "employee_id": employee_id,
                    "ended_after": ended_after,
                    "ended_before": ended_before,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "modified_after": modified_after,
                    "modified_before": modified_before,
                    "page_size": page_size,
                    "payroll_run_id": payroll_run_id,
                    "remote_id": remote_id,
                    "started_after": started_after,
                    "started_before": started_before,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedEmployeePayrollRunList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[EmployeePayrollRunsRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
    ) -> EmployeePayrollRun:
        """
        Returns an `EmployeePayrollRun` object with the given `id`.

        Parameters:
            - id: str.

            - expand: typing.Optional[EmployeePayrollRunsRetrieveRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/hris/v1/employee-payroll-runs/{id}"),
            params=remove_none_from_dict({"expand": expand, "include_remote_data": include_remote_data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmployeePayrollRun, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEmployeePayrollRunsClient:
    def __init__(
        self, *, environment: MergeEnvironment = MergeEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        created_after: typing.Optional[str] = None,
        created_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        employee_id: typing.Optional[str] = None,
        ended_after: typing.Optional[str] = None,
        ended_before: typing.Optional[str] = None,
        expand: typing.Optional[EmployeePayrollRunsListRequestExpand] = None,
        include_deleted_data: typing.Optional[bool] = None,
        include_remote_data: typing.Optional[bool] = None,
        modified_after: typing.Optional[str] = None,
        modified_before: typing.Optional[str] = None,
        page_size: typing.Optional[int] = None,
        payroll_run_id: typing.Optional[str] = None,
        remote_id: typing.Optional[str] = None,
        started_after: typing.Optional[str] = None,
        started_before: typing.Optional[str] = None,
    ) -> PaginatedEmployeePayrollRunList:
        """
        Returns a list of `EmployeePayrollRun` objects.

        Parameters:
            - created_after: typing.Optional[str]. If provided, will only return objects created after this datetime.

            - created_before: typing.Optional[str]. If provided, will only return objects created before this datetime.

            - cursor: typing.Optional[str]. The pagination cursor value.

            - employee_id: typing.Optional[str]. If provided, will only return employee payroll runs for this employee.

            - ended_after: typing.Optional[str]. If provided, will only return employee payroll runs ended after this datetime.

            - ended_before: typing.Optional[str]. If provided, will only return employee payroll runs ended before this datetime.

            - expand: typing.Optional[EmployeePayrollRunsListRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_deleted_data: typing.Optional[bool]. Whether to include data that was marked as deleted by third party webhooks.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.

            - modified_after: typing.Optional[str]. If provided, only objects synced by Merge after this date time will be returned.

            - modified_before: typing.Optional[str]. If provided, only objects synced by Merge before this date time will be returned.

            - page_size: typing.Optional[int]. Number of results to return per page.

            - payroll_run_id: typing.Optional[str]. If provided, will only return employee payroll runs for this employee.

            - remote_id: typing.Optional[str]. The API provider's ID for the given object.

            - started_after: typing.Optional[str]. If provided, will only return employee payroll runs started after this datetime.

            - started_before: typing.Optional[str]. If provided, will only return employee payroll runs started before this datetime.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/hris/v1/employee-payroll-runs"),
            params=remove_none_from_dict(
                {
                    "created_after": created_after,
                    "created_before": created_before,
                    "cursor": cursor,
                    "employee_id": employee_id,
                    "ended_after": ended_after,
                    "ended_before": ended_before,
                    "expand": expand,
                    "include_deleted_data": include_deleted_data,
                    "include_remote_data": include_remote_data,
                    "modified_after": modified_after,
                    "modified_before": modified_before,
                    "page_size": page_size,
                    "payroll_run_id": payroll_run_id,
                    "remote_id": remote_id,
                    "started_after": started_after,
                    "started_before": started_before,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedEmployeePayrollRunList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(
        self,
        id: str,
        *,
        expand: typing.Optional[EmployeePayrollRunsRetrieveRequestExpand] = None,
        include_remote_data: typing.Optional[bool] = None,
    ) -> EmployeePayrollRun:
        """
        Returns an `EmployeePayrollRun` object with the given `id`.

        Parameters:
            - id: str.

            - expand: typing.Optional[EmployeePayrollRunsRetrieveRequestExpand]. Which relations should be returned in expanded form. Multiple relation names should be comma separated without spaces.

            - include_remote_data: typing.Optional[bool]. Whether to include the original data Merge fetched from the third-party to produce these models.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/hris/v1/employee-payroll-runs/{id}"),
            params=remove_none_from_dict({"expand": expand, "include_remote_data": include_remote_data}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(EmployeePayrollRun, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
