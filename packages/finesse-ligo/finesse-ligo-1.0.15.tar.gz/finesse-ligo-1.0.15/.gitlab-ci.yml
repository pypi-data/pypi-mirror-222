variables:
  PROJECT_PREFIX: "finesse"

workflow:
  rules:
    - if: $CI_SERVER_HOST == "gitlab.com"
      variables:
        PROJECT_PREFIX: "ifosim/finesse"
    - when: always

stages:
    - pre-commit-hooks
    - test
    - publish

pre-merge-checks:
  stage: pre-commit-hooks
  image: python:3.10
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
      #- .venv
    key: "$CI_JOB_NAME"
  script:
    - |
      if [ ! -e .venv ] ; then
        python -m venv .venv
      fi
    - . .venv/bin/activate
    - echo $CI_COMMIT_BRANCH
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_TAG
    - echo $CI_PROJECT_PATH
    - pip3 install pre-commit -U
    - pre-commit run --all-files

test/finesse-develop:
    stage: test
    image: python:3.10
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"
    script:
        - python -V
        - ls wheelhouse
        - echo $CI_COMMIT_BRANCH
        - echo $CI_PIPELINE_SOURCE
        - echo $CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_TAG
        - echo $CI_PROJECT_PATH
        - python -m pip install wheelhouse/*manylinux*.whl
        - python -m pip install pytest
        - python -m pip install .
        - pytest tests
    needs:
        # Always test the latest branch against the develop
        # version of Finesse 3.0
        - project: ${PROJECT_PREFIX}/finesse3
          job: build/manylinux/x86_64/py310
          ref: develop
          artifacts: true

test/finesse/multipipeline:
    stage: test
    image: python:3.10
    rules:
        - if: $CI_PIPELINE_SOURCE == "pipeline"
    script:
        - python -V
        - ls wheelhouse
        - echo $CI_COMMIT_BRANCH
        - echo $CI_PIPELINE_SOURCE
        - echo $CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_TAG
        - echo $CI_PROJECT_PATH
        - echo $INCOMING_REF
        - python -m pip install wheelhouse/*manylinux*.whl
        - python -m pip install pytest
        - python -m pip install .
        - pytest tests
    needs:
        - project: ${PROJECT_PREFIX}/finesse3
          job: build/manylinux/x86_64/py310
          ref: $INCOMING_REF
          artifacts: true

publish:
    stage: publish
    rules:
        # Only run on main finesse project, not forks, the main branch, and when a tag is commited
        - if: $CI_SERVER_HOST == "gitlab.com" && $CI_COMMIT_TAG
    image: python:3.10
    needs: [test/finesse-develop] # needs to be changed to master when releases are availabe
    script:
        - echo $CI_COMMIT_TAG
        - echo $CI_COMMIT_BRANCH
        - echo $CI_PROJECT_PATH
        - python -V
        - python -m pip install twine build
        - python -m build
        - ls dist
        - python -m twine upload -u=$TWINE_USERNAME -p=$TWINE_PASSWORD dist/*
