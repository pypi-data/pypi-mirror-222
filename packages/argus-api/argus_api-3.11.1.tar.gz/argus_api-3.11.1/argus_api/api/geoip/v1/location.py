"""Autogenerated API"""
from argus_api.session import _legacy_session as session
import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module
log = logging.getLogger(__name__)


@register_command(
    extending=("geoip", "v1", "location"),
    module=argus_cli_module
)
def add_location(
    id: int = None,
    extID: int = None,
    countryCode: str = None,
    cityName: str = None,
    lastModified: int = None,
    flags: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Add new location (DEV)
    
    :param int id: 
    :param int extID: The external ID of the location \(0 if not set\)
    :param str countryCode: The two\-letter code of the country where this location is in
    :param str cityName: The name of the the location \(it isn\'t always a city\)
    :param int lastModified: The timestamp when this location was last modified
    :param list flags: Flags assigned to the object.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location".format()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, don't send null values
    if id is not None:
        body.update({"id": id})
    # Only send extID if the argument was provided, don't send null values
    if extID is not None:
        body.update({"extID": extID})
    # Only send countryCode if the argument was provided, don't send null values
    if countryCode is not None:
        body.update({"countryCode": countryCode})
    # Only send cityName if the argument was provided, don't send null values
    if cityName is not None:
        body.update({"cityName": cityName})
    # Only send lastModified if the argument was provided, don't send null values
    if lastModified is not None:
        body.update({"lastModified": lastModified})
    # Only send flags if the argument was provided, don't send null values
    if flags is not None:
        body.update({"flags": flags})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("geoip", "v1", "location"),
    module=argus_cli_module
)
def get_location(
    id: int,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Lookup location (DEV)
    
    :param int id: Location ID
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location/{id}".format(id=id)
    headers = {}

    body = body or {}

    query_parameters = {}
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("geoip", "v1", "location"),
    module=argus_cli_module
)
def list_locations(
    sortBy: str = None,
    limit: int = 25,
    offset: int = None,
    fromID: int = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """List GeoIP locations (DEV)
    
    :param list sortBy: Fields to sort results by \(without a sign is ascending\, with \'\-\' sign is descending\)
    :param int limit: Max number of items to return
    :param int offset: The amount of items to skip from the beginning
    :param int fromID: Only return locations with numeric ID greater than or equal to this value
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location".format(limit=limit,
        offset=offset,
        sortBy=sortBy,
        fromID=fromID)
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        query_parameters.update({"sortBy": sortBy})
    
    # Only send fromID if the argument was provided, don't send null values
    if fromID is not None:
        query_parameters.update({"fromID": fromID})
    
    log.debug("GET %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

@register_command(
    extending=("geoip", "v1", "location"),
    module=argus_cli_module
)
def search_locations(
    countTimeout: int = None,
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    countryID: int = None,
    country: str = None,
    extID: int = None,
    fromID: int = None,
    excludeWithoutExtID: bool = None,
    sortBy: str = None,
    startTimestamp: int = None,
    endTimestamp: int = None,
    includeFlags: str = None,
    excludeFlags: str = None,
    json: bool = True,
    verify: bool = None,
    proxies: dict = None,
    apiKey: str = None,
    authentication: dict = {},
    server_url: str = None,
    body: dict = None,
) -> dict:
    """Find GeoIP locations (DEV)
    
    :param int countTimeout: Max wait in seconds for the count query to run. Set the value to \-1 to skip counting \(count will be returned \-1\). Set the value to 0 to execute the count query as long as the service allows\, max allowed timeout value is 30 \(seconds\)\, default value is \-1.
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Also include deleted objects \(where implemented\)
    :param list countryID: Deprecated\, use country instead
    :param list country: Only return ranges from these countries \(by country ID or two\-letter code\)
    :param list extID: Only return locations bound to these external locationIDs
    :param int fromID: Only return locations with ID greater or equal to this ID
    :param bool excludeWithoutExtID: If true\, only return locations which are bound to an external locationID. By default\, non\-bound locations are also returned \(typically\, these are marked disabled\)
    :param list sortBy: Order results by these properties \(prefix with \- to sort descending\)
    :param int startTimestamp: Search objects from this timestamp
    :param int endTimestamp: Search objects until this timestamp
    :param list includeFlags: Only include objects which have includeFlags set.
    :param list excludeFlags: Exclude objects which have excludeFlags set.
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationFailedException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/geoip/v1/location/search".format()
    headers = {}

    body = body or {}
    # Only send countTimeout if the argument was provided, don't send null values
    if countTimeout is not None:
        body.update({"countTimeout": countTimeout})
    # Only send limit if the argument was provided, don't send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, don't send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, don't send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send countryID if the argument was provided, don't send null values
    if countryID is not None:
        body.update({"countryID": countryID})
    # Only send country if the argument was provided, don't send null values
    if country is not None:
        body.update({"country": country})
    # Only send extID if the argument was provided, don't send null values
    if extID is not None:
        body.update({"extID": extID})
    # Only send fromID if the argument was provided, don't send null values
    if fromID is not None:
        body.update({"fromID": fromID})
    # Only send excludeWithoutExtID if the argument was provided, don't send null values
    if excludeWithoutExtID is not None:
        body.update({"excludeWithoutExtID": excludeWithoutExtID})
    # Only send sortBy if the argument was provided, don't send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})
    # Only send startTimestamp if the argument was provided, don't send null values
    if startTimestamp is not None:
        body.update({"startTimestamp": startTimestamp})
    # Only send endTimestamp if the argument was provided, don't send null values
    if endTimestamp is not None:
        body.update({"endTimestamp": endTimestamp})
    # Only send includeFlags if the argument was provided, don't send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, don't send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})

    query_parameters = {}
    log.debug("POST %s (headers: %s, body: %s)" % (route, str(headers), str(body) or ""))

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response
