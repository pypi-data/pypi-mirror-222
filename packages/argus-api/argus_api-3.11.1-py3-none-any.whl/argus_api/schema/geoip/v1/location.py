"""Autogenerated API schema"""
from argus_api import session


add_location = {'tags': ['development'], 'summary': 'Add new location (DEV)', 'description': '', 'operationId': 'addLocation', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'object', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'position': 0, 'description': 'The external ID of the location (0 if not set)'}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this location is in'}, 'cityName': {'type': 'str', 'position': 0, 'description': "The name of the the location (it isn't always a city)"}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'The timestamp when this location was last modified'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.'}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'position': 0, 'description': 'The external ID of the location (0 if not set)'}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this location is in'}, 'cityName': {'type': 'str', 'position': 0, 'description': "The name of the the location (it isn't always a city)"}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'The timestamp when this location was last modified'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
get_location = {'tags': ['development'], 'summary': 'Lookup location (DEV)', 'description': '', 'operationId': 'getLocation', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'Location ID', 'required': True, 'type': 'int'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'position': 0, 'description': 'The external ID of the location (0 if not set)'}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this location is in'}, 'cityName': {'type': 'str', 'position': 0, 'description': "The name of the the location (it isn't always a city)"}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'The timestamp when this location was last modified'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.'}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
list_locations = {'tags': ['development'], 'summary': 'List GeoIP locations (DEV)', 'description': '', 'operationId': 'listLocations', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Max number of items to return', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'The amount of items to skip from the beginning', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "Fields to sort results by (without a sign is ascending, with '-' sign is descending)", 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'fromID', 'in': 'query', 'description': 'Only return locations with numeric ID greater than or equal to this value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'position': 0, 'description': 'The external ID of the location (0 if not set)'}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this location is in'}, 'cityName': {'type': 'str', 'position': 0, 'description': "The name of the the location (it isn't always a city)"}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'The timestamp when this location was last modified'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
search_locations = {'tags': ['development'], 'summary': 'Find GeoIP locations (DEV)', 'description': '', 'operationId': 'searchLocations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'countTimeout': {'type': 'int', 'example': -1, 'description': 'Max wait in seconds for the count query to run. Set the value to -1 to skip counting (count will be returned -1). Set the value to 0 to execute the count query as long as the service allows, max allowed timeout value is 30 (seconds), default value is -1.', 'minimum': -1, 'maximum': 30}, 'limit': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'xml': {'attribute': True}, 'position': 0, 'description': 'Also include deleted objects (where implemented)'}, 'countryID': {'type': 'list', 'position': 0, 'description': 'Deprecated, use country instead', 'uniqueItems': True, 'items': {'type': 'int'}}, 'country': {'type': 'list', 'position': 0, 'description': 'Only return ranges from these countries (by country ID or two-letter code)', 'uniqueItems': True, 'items': {'type': 'string'}}, 'extID': {'type': 'list', 'position': 0, 'description': 'Only return locations bound to these external locationIDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'fromID': {'type': 'int', 'position': 0, 'description': 'Only return locations with ID greater or equal to this ID'}, 'excludeWithoutExtID': {'type': 'bool', 'position': 0, 'description': 'If true, only return locations which are bound to an external locationID. By default, non-bound locations are also returned (typically, these are marked disabled)'}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Order results by these properties (prefix with - to sort descending)', 'items': {'type': 'string'}}, 'startTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects from this timestamp'}, 'endTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects until this timestamp'}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Only include objects which have includeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Search criteria to search for location'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'extID': {'type': 'int', 'position': 0, 'description': 'The external ID of the location (0 if not set)'}, 'countryCode': {'type': 'str', 'position': 0, 'description': 'The two-letter code of the country where this location is in'}, 'cityName': {'type': 'str', 'position': 0, 'description': "The name of the the location (it isn't always a city)"}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'The timestamp when this location was last modified'}, 'flags': {'type': 'list', 'position': 0, 'description': 'Flags assigned to the object.', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'disabled']}}}, 'description': 'Location is a subunit of a region. It contains data about the location and also the region and country it belongs to.'}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}