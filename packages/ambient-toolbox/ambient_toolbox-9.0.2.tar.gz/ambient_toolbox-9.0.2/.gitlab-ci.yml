include:
  - template: Security/Container-Scanning.gitlab-ci.yml

image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20.10.16

stages:
  - lint
  - build
  - security
  - security_results
  - test

# When using dind, it's wise to use the overlays driver for
# improved performance.
variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

services:
  # alias is necessary for gitlab to recognise the service correctly because of the prefix:
  - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:20.10.16-dind
    alias: docker

lint:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.11-slim
  stage: lint
  tags:
    - low-load
  script:
    - apt-get update && apt-get install --no-install-recommends -y git
    - pip install pre-commit
    - pre-commit install -t pre-push -t pre-commit --install-hooks
    - pre-commit run --all-files --hook-stage push

check python version coding style:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.11-slim
  stage: lint
  tags:
    - low-load
  script:
    - apt-get update && apt-get install --no-install-recommends -y git
    - pip install pre-commit
    - pre-commit install -t pre-push -t pre-commit --install-hooks
    - pre-commit run --all-files --hook-stage push pyupgrade

check django version coding style:
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.11-slim
  stage: lint
  tags:
    - low-load
  script:
    - apt-get update && apt-get install --no-install-recommends -y git
    - pip install pre-commit
    - pre-commit install -t pre-push -t pre-commit --install-hooks
    - pre-commit run --all-files --hook-stage push django-upgrade

build:
  stage: build
  tags:
    - normal-load
  before_script:
    # generating certs is too slow: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384
    - until docker info; do sleep 1; done
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-docker-caching
    - docker pull $CI_REGISTRY_IMAGE:master || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:master -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

container_scanning:
  stage: security
  tags:
    - low-load
  variables:
    GIT_STRATEGY: fetch
    DOCKER_IMAGE: $IMAGE_TAG
    CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY_IMAGE:develop
    CS_SEVERITY_THRESHOLD: HIGH
    CS_IGNORE_UNFIXED: "true"
    # https://docs.gitlab.com/ee/user/application_security/container_scanning/#report-language-specific-findings
    CS_DISABLE_LANGUAGE_VULNERABILITY_SCAN: "false"
    DOCKER_FILE: Dockerfile

check security scan results:
  stage: security_results
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine:latest
  dependencies:
    - container_scanning
  tags:
    - low-load
  before_script:
    - apk update && apk add jq
  script:
    - jq -e "( .vulnerabilities | length ) == 0" ./gl-container-scanning-report.json
  allow_failure: true

tests:
  stage: test
  needs: [build]
  tags:
    - normal-load
  variables:
    GIT_STRATEGY: none
  before_script:
    # generating certs is too slow: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384
    - until docker info; do sleep 1; done
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $IMAGE_TAG
    - docker run -v `pwd`:/reports $IMAGE_TAG pytest --ds settings tests --cov=ambient_toolbox/ --cov-report xml:/reports/cov.xml --junitxml=/reports/junit.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: ./junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ./cov.xml
