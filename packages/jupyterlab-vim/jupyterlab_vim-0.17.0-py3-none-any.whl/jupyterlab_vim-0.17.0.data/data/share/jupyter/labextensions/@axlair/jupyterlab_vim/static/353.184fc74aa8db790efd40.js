"use strict";(self.webpackChunk_axlair_jupyterlab_vim=self.webpackChunk_axlair_jupyterlab_vim||[]).push([[353],{353:(e,t,o)=>{o.r(t),o.d(t,{default:()=>v});var n=o(861),l=o(408),i=o(663),a=o(829),c=o(211),d=o(204);class s{constructor({commands:e,enabled:t,userKeybindings:o}){this._commands=e,this.enabled=t,this.lastActiveCell=null,this.userKeybindings=null!=o?o:[]}onActiveCellChanged(e,t){this.modifyCell(t).catch(console.error)}async modifyCell(e){if(!e)return;this.lastActiveCell=e,await e.ready;const t=e.editor;if(e.isDisposed)return void console.warn("Cell was already disposed, cannot setup vim mode");if(!t)throw Error("Cell editor not available");const o=t.editor;if(this.enabled){if(!t.getOption("vim")){t.setOption("vim",!0);const e=(0,a.getCM)(o);t.hasFocus=()=>!(!e.state.dialog||!e.state.dialog.contains(document.activeElement))||o.hasFocus}const n=(0,a.getCM)(o),l=a.Vim;["normal","visual","insert"].forEach((e=>l.mapclear(e))),this.userKeybindings.forEach((({command:e,keys:t,context:o,mapfn:n,enabled:i})=>{i&&("map"===n?l.map(e,t,o):l.noremap(e,t,o))})),a.Vim.handleKey(n,"<Esc>");const i=(t,n,l,c)=>{const d=n;let s=d.ch;const r=e;switch(null==c?void 0:c.lastMotion){case t.moveByLines:case t.moveByDisplayLines:case t.moveByScroll:case t.moveToColumn:case t.moveToEol:case i:s=c.lastHPos;break;default:c.lastHPos=s}const m=l.repeat+(l.repeatOffset||0);let u=l.forward?d.line+m:d.line-m;const C=t.firstLine(),v=t.lastLine(),b=t.findPosV(d,l.forward?m:-m,"line",c.lastHSPos);if((l.forward?b.line>u:b.line<u)&&(u=b.line,s=b.ch),!(u<C||u>v))return l.toFirstChar&&(s=function(e){if(!e)return 0;const t=e.search(/\S/);return-1===t?e.length:t}(t.getLine(u)),c.lastHPos=s),c.lastHSPos=t.charCoords(new a.CodeMirror.Pos(u,s),"div").left,new a.CodeMirror.Pos(u,s);if(null!==r&&"markdown"===r.model.type&&(l.handleArrow||(r.rendered=!0)),l.forward)if(l.handleArrow){const e=t.getCursor(),n=o.state.doc.line(v+1).length;e.line===v&&e.ch===n||(t.setCursor(v,n),this._commands.execute("notebook:move-cursor-down"))}else this._commands.execute("notebook:move-cursor-down");else if(l.handleArrow){const e=t.getCursor();0===e.line&&0===e.ch||(t.setCursor(0,0),this._commands.execute("notebook:move-cursor-up"))}else this._commands.execute("notebook:move-cursor-up")};l.defineMotion("moveByLinesOrCell",i),l.mapCommand("<Up>","motion","moveByLinesOrCell",{forward:!1,linewise:!0,handleArrow:!0},{context:"normal"}),l.mapCommand("<Down>","motion","moveByLinesOrCell",{forward:!0,linewise:!0,handleArrow:!0},{context:"normal"}),l.mapCommand("k","motion","moveByLinesOrCell",{forward:!1,linewise:!0},{context:"normal"}),l.mapCommand("j","motion","moveByLinesOrCell",{forward:!0,linewise:!0},{context:"normal"}),l.defineAction("moveCellDown",((e,t)=>{this._commands.execute("notebook:move-cell-down")})),l.defineAction("moveCellUp",((e,t)=>{this._commands.execute("notebook:move-cell-up")})),l.mapCommand("<C-e>","action","moveCellDown",{},{extra:"normal"}),l.mapCommand("<C-y>","action","moveCellUp",{},{extra:"normal"}),l.defineAction("splitCell",((e,t)=>{this._commands.execute("notebook:split-cell-at-cursor")})),l.mapCommand("-","action","splitCell",{},{extra:"normal"})}else t.getOption("vim")&&t.setOption("vim",!1)}}var r=o(593);const m="@axlair/jupyterlab_vim",u="jupyterlab-vim:toggle";let C=!1;const v={id:m,autoStart:!0,activate:async function(e,t,o,i){const v=d.Prec.highest(c.EditorView.theme({".cm-fat-cursor":{position:"absolute",background:"var(--jp-vim-cursor-color)",border:"none",whiteSpace:"pre"},"&:not(.cm-focused) .cm-fat-cursor":{background:"none",outline:"solid 1px var(--jp-vim-cursor-color)",color:"transparent !important"}}));o.addExtension({name:"vim",factory:e=>l.EditorExtensionRegistry.createConditionalExtension([v,(0,a.vim)({status:!1})])}),e.commands.addCommand(u,{label:"Enable Notebook Vim mode",execute:()=>{i&&i.set(`${m}:plugin`,"enabled",!C)},isToggled:()=>C});const b=(await i.get(`${m}:plugin`,"extraKeybindings")).composite;let f=null,p=null,w=!1;async function x(o){const n=(await i.get(`${m}:plugin`,"extraKeybindings")).composite;C=!0===o.get("enabled").composite,e.commands.notifyCommandChanged(u),f&&(f.enabled=C,f.userKeybindings=n),C?(null==p||p.dispose(),w||(w=!0,await e.restored)):p=e.commands.addKeyBinding({command:"notebook:enter-command-mode",keys:["Escape"],selector:".jp-Notebook.jp-mod-editMode"}),t.forEach((e=>{e.node.dataset.jpVimMode=`${C}`})),null==f||f.modifyCell(f.lastActiveCell),t.widgetAdded.connect(((e,t)=>{t.node.dataset.jpVimMode=`${C}`}))}return a.Vim.defineEx("write","w",(()=>{e.commands.execute("docmanager:save")})),a.Vim.defineEx("quit","q",(()=>{setTimeout((()=>{e.commands.execute("notebook:enter-command-mode")}))})),f=new s({commands:e.commands,enabled:C,userKeybindings:b}),t.activeCellChanged.connect(f.onActiveCellChanged,f),function(e,t){const{commands:o,shell:l}=e;function i(e){const o=t.currentWidget;return!1!==e.activate&&o&&l.currentWidget!==o&&l.activateById(o.id),o}function c(){return null!==t.currentWidget&&t.currentWidget===e.shell.currentWidget}o.addCommand("vim:run-select-next-edit",{label:"Run Cell and Edit Next Cell",execute:e=>{const t=i(e);if(t){const{context:e,content:o}=t;n.NotebookActions.runAndAdvance(o,e.sessionContext),t.content.mode="edit"}},isEnabled:c}),o.addCommand("vim:run-cell-and-edit",{label:"Run Cell and Edit Cell",execute:e=>{const t=i(e);if(t){const{context:e,content:o}=t;n.NotebookActions.run(o,e.sessionContext),t.content.mode="edit"}},isEnabled:c}),o.addCommand("vim:cut-cell-and-edit",{label:"Cut Cell(s) and Edit Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;n.NotebookActions.cut(e),e.mode="edit"}},isEnabled:c}),o.addCommand("vim:copy-cell-and-edit",{label:"Copy Cell(s) and Edit Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;n.NotebookActions.copy(e),e.mode="edit"}},isEnabled:c}),o.addCommand("vim:paste-cell-and-edit",{label:"Paste Cell(s) and Edit Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;n.NotebookActions.paste(e,"below"),e.mode="edit"}},isEnabled:c}),o.addCommand("vim:merge-and-edit",{label:"Merge and Edit Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;n.NotebookActions.mergeCells(e),t.content.mode="edit"}},isEnabled:c}),o.addCommand("vim:enter-insert-mode",{label:"Enter Insert Mode",execute:e=>{const t=i(e);if(t){const{content:e}=t;if(null!==e.activeCell){const o=e.activeCell.editor;t.content.mode="edit";const n=(0,a.getCM)(o.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(n,"i")}}},isEnabled:c}),o.addCommand("vim:leave-insert-mode",{label:"Leave Insert Mode",execute:e=>{const t=i(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,o=(0,a.getCM)(t.editor);if(!o)return void console.error("CodeMirror vim wrapper not found");a.Vim.handleKey(o,"<Esc>")}}},isEnabled:c}),o.addCommand("vim:leave-current-mode",{label:'Move Insert to Normal to Jupyter Command Mode"',execute:e=>{const t=i(e);if(t){const{content:e}=t;if(null!==e.activeCell){const t=e.activeCell.editor,n=(0,a.getCM)(t.editor);if(!n)return void console.error("CodeMirror vim wrapper not found");const l=n.state.vim;l.insertMode||l.visualMode?a.Vim.handleKey(n,"<Esc>"):o.execute("notebook:enter-command-mode")}}},isEnabled:c}),o.addCommand("vim:select-below-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=i(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectBelow(t.content)}},isEnabled:c}),o.addCommand("vim:select-above-execute-markdown",{label:"Execute Markdown and Select Cell Below",execute:e=>{const t=i(e);if(t){const{content:e}=t;return null!==e.activeCell&&"markdown"===e.activeCell.model.type&&(t.content.activeCell.rendered=!0),n.NotebookActions.selectAbove(t.content)}},isEnabled:c}),o.addCommand("vim:select-first-cell",{label:"Select First Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;e.activeCellIndex=0,e.deselectAll(),null!==e.activeCell&&r.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:c}),o.addCommand("vim:select-last-cell",{label:"Select Last Cell",execute:e=>{const t=i(e);if(t){const{content:e}=t;e.activeCellIndex=t.content.widgets.length-1,e.deselectAll(),null!==e.activeCell&&r.ElementExt.scrollIntoViewIfNeeded(e.node,e.activeCell.node)}},isEnabled:c}),o.addCommand("vim:center-cell",{label:"Center Cell",execute:e=>{const t=i(e);t&&null!==t.content.activeCell&&t.content.scrollToCell(t.content.activeCell,"center")},isEnabled:c})}(e,t),i.load(`${m}:plugin`).then((e=>{x(e),e.changed.connect(x)}),(e=>{console.error(`Could not load settings, so did not active ${m}: ${e}`)})),Promise.resolve()},requires:[n.INotebookTracker,l.IEditorExtensionRegistry,i.ISettingRegistry]}}}]);