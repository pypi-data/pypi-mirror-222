import{isEmpty,waitFor,deepClone}from"../../base/helpers.mjs";import{ElementBuilder}from"../../base/builder.mjs";import{Controller}from"../base.mjs";import{FormView}from"../../view/forms/base.mjs";import{TableView}from"../../view/table.mjs";import{View}from"../../view/base.mjs";import{StringInputView,ListMultiInputView}from"../../view/forms/input.mjs";const E=new ElementBuilder;class LogLevelSelectInputView extends ListMultiInputView{static defaultOptions=["DEBUG","INFO","WARN","ERROR","CRITICAL"]}class LogGlanceView extends View{static tagName="enfugue-log-glance-view";static maximumLogs=5;constructor(t){super(t),this.start=(new Date).getTime(),this.hide()}async showMore(){isEmpty(this.onShowMore)||await this.onShowMore()}async setData(t){if(void 0!==this.node){let e=t.filter((t=>new Date(t.timestamp).getTime()>this.start));if(e.length>0){(new Date).getTime();let t=e.slice(0,this.constructor.maximumLogs).map((t=>t.content)).join("\n");this.show(),this.node.find(".logs").content(t)}}}async build(){let t=await super.build();return t.append(E.div().class("log-header").content(E.h2().content("Most Recent Logs"),E.a().href("#").content("Show More").on("click",(t=>{t.preventDefault(),t.stopPropagation(),this.showMore()}))),E.div().class("logs")),t}}class LogTableView extends TableView{static className="log-table-view";static canSort=!1;static applyDefaultSort=!1;static columns={timestamp:"Timestamp",logger:"Logger",level:"Level",content:"Content"};static columnFormatters={timestamp:t=>t.replace("T"," ").split(".")[0]}}class LogFilterFormView extends FormView{static autoSubmit=!0;static fieldSets={Filters:{level:{label:"Log Levels",class:LogLevelSelectInputView,config:{value:deepClone(LogLevelSelectInputView.defaultOptions)}},search:{label:"Search",class:StringInputView}}}}class LogsController extends Controller{static logsWindowWidth=600;static logsWindowHeight=700;static maximumDetailLogs=100;static maximumGlanceLogs=5;static logTailInterval=5e3;async getLogs(){let t={};if(!isEmpty(this.lastLog)){let e=`${this.lastLog.getFullYear()}-${(this.lastLog.getMonth()+1).toString().padStart(2,"0")}-${this.lastLog.getDate().toString().padStart(2,"0")} ${this.lastLog.getHours().toString().padStart(2,"0")}:${this.lastLog.getMinutes().toString().padStart(2,"0")}:${this.lastLog.getSeconds().toString().padStart(2,"0")}`;t.since=e}isEmpty(this.levels)||(t.level=this.levels),isEmpty(this.search)||(t.search=this.search);let e=await this.model.get("/logs",null,t);return this.lastLog=new Date,isEmpty(this.logs)?this.logs=e:this.logs=e.concat(this.logs),this.logs=this.logs.slice(0,this.constructor.maximumDetailLogs),this.logs}async getLogsTable(){return isEmpty(this.logsTable)&&(await waitFor((()=>null!==this.logs&&void 0!==this.logs)),this.logsTable=new LogTableView(this.config,this.logs)),this.logsTable}async startLogTailer(){this.timer=setInterval((async()=>{let t=await this.getLogs();isEmpty(this.logsTable)||this.logsTable.setData(t,!1),isEmpty(this.glanceView)||this.glanceView.setData(t)}),this.constructor.logTailInterval)}async showLogDetails(){isEmpty(this.logDetails)?(this.logWindow=await this.spawnWindow("Engine Logs",await this.getLogsTable(),this.constructor.logsWindowWidth,this.constructor.logsWindowHeight),this.logWindow.onClose((()=>{this.logWindow=null}))):this.logWindow.focus()}async initialize(){this.glanceView=new LogGlanceView(this.config),this.glanceView.onShowMore=()=>this.showLogDetails(),this.application.container.appendChild(await this.glanceView.render()),this.startLogTailer()}}export{LogsController};
