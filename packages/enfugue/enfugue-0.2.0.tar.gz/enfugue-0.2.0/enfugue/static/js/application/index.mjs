import{isEmpty,getQueryParameters,getDataParameters,waitFor,createEvent}from"../base/helpers.mjs";import{Session}from"../base/session.mjs";import{Publisher}from"../base/publisher.mjs";import{TooltipHelper}from"../common/tooltip.mjs";import{MenuView,SidebarView,ToolbarView}from"../view/menu.mjs";import{StatusView}from"../view/status.mjs";import{NotificationCenterView}from"../view/notifications.mjs";import{WindowsView}from"../view/nodes/windows.mjs";import{ImageEditorView,ImageEditorNodeView,ImageEditorImageNodeView}from"../view/nodes/image-editor.mjs";import{ImageView}from"../view/image.mjs";import{Model}from"../model/enfugue.mjs";import{ConfirmFormView,YesNoFormView}from"../view/forms/confirm.mjs";import{View}from"../view/base.mjs";import{FormView}from"../view/forms/base.mjs";import{StringInputView}from"../view/forms/input.mjs";import{InvocationController}from"../controller/common/invocation.mjs";import{ModelPickerController}from"../controller/common/model-picker.mjs";import{ModelManagerController}from"../controller/common/model-manager.mjs";import{DownloadsController}from"../controller/common/downloads.mjs";import{AnimationsController}from"../controller/common/animations.mjs";import{LogsController}from"../controller/common/logs.mjs";import{AnnouncementsController}from"../controller/common/announcements.mjs";import{HistoryDatabase}from"../common/history.mjs";import{SimpleNotification}from"../common/notify.mjs";class FileNameFormView extends FormView{static fieldSets={"File Name":{filename:{class:StringInputView,config:{required:!0,placeholder:"Please enter a filename."}}}}}class LogoutButtonView extends View{static tagName="i";static className="fa-solid fa-right-from-bracket logout";async logout(){window.location="/logout"}async build(){let t=await super.build();return t.on("click",(()=>this.logout())),t.data("tooltip","Logout"),t}}class Application{static menuCategories={file:"File"};static adminMenuCategories={models:"Models",system:"System"};static filenameFormInputWidth=400;static filenameFormInputHeight=250;static logoShadowRGB=[0,0,0];static logoShadowOpacity=.5;static logoShadowSteps=10;static logoShadowOffset=2;static logoShadowSpread=0;static confirmViewWidth=500;static confirmViewHeight=200;constructor(t){this.config=t,this.publisher=new Publisher}async initialize(){this.tooltips=new TooltipHelper,this.container=document.querySelector(this.config.view.applicationContainer),isEmpty(this.container)?console.error(`Couldn't find application configuration using selector ${this.config.view.applicationContainer}, abandoning initialization.`):(this.session=Session.getScope("enfugue"),this.model=new Model(this.config),this.menu=new MenuView(this.config),this.sidebar=new SidebarView(this.config),this.toolbar=new ToolbarView(this.config),this.windows=new WindowsView(this.config),this.notifications=new NotificationCenterView(this.config),this.history=new HistoryDatabase(this.config.history.size,this.config.debug),this.images=new ImageEditorView(this),this.container.appendChild(await this.menu.render()),this.container.appendChild(await this.sidebar.render()),this.container.appendChild(await this.toolbar.render()),this.container.appendChild(await this.images.render()),this.container.appendChild(await this.windows.render()),this.container.appendChild(await this.notifications.render()),await this.startAnimations(),await this.registerDownloadsControllers(),await this.registerAnimationsControllers(),await this.registerModelControllers(),await this.registerInvocationControllers(),await this.registerMenuControllers(),await this.registerSidebarControllers(),await this.registerToolbarControllers(),await this.startAutosave(),await this.startAnnouncements(),await this.startLogs(),await this.registerLogout(),await this.startKeepalive(),window.onpopstate=t=>this.popState(t),document.addEventListener("paste",(t=>this.onPaste(t))),document.addEventListener("keypress",(t=>this.onKeyPress(t))))}async startLogs(){this.logs=new LogsController(this),await this.logs.initialize()}async startAnnouncements(){this.announcements=new AnnouncementsController(this),await this.announcements.initialize()}async startAnimations(){let t=document.querySelector("header h1");isEmpty(t)?console.warn("Can't find header logo, not binding animations."):(this.animations=!0,window.addEventListener("mousemove",(e=>{if(!1===this.animations)return;let[i,o]=[e.clientX/window.innerWidth,e.clientY/window.innerHeight],s=[];for(let t=0;t<this.constructor.logoShadowSteps;t++){let[e,n]=[i*(t+1)*this.constructor.logoShadowOffset,o*(t+1)*this.constructor.logoShadowOffset],a=this.constructor.logoShadowOpacity-t/this.constructor.logoShadowSteps*this.constructor.logoShadowOpacity,r=`rgba(${this.constructor.logoShadowRGB.concat(a.toFixed(2)).join(",")})`;s.push(`${e}px ${n}px ${this.constructor.logoShadowSpread}px ${r}`)}t.style.textShadow=s.join(",")})))}async enableAnimations(){this.animations||(this.animations=!0,this.session.setItem("animations",!0),document.body.classList.remove("no-animations"),this.publish("animationsEnabled"))}async disableAnimations(){this.animations&&(this.animations=!1,this.session.setItem("animations",!1),document.body.classList.add("no-animations"),this.publish("animationsDisabled"))}async registerModelControllers(){this.modelManager=new ModelManagerController(this),await this.modelManager.initialize(),this.modelPicker=new ModelPickerController(this),await this.modelPicker.initialize()}async registerDownloadsControllers(){this.downloads=new DownloadsController(this),await this.downloads.initialize()}async registerInvocationControllers(){this.engine=new InvocationController(this),await this.engine.initialize()}async registerAnimationsControllers(){this.animation=new AnimationsController(this),await this.animation.initialize()}getMenuCategories(){let t={...this.constructor.menuCategories};return isEmpty(window.enfugue)||!0!==window.enfugue.admin||(t={...t,...this.constructor.adminMenuCategories}),t.help="Help",t}async registerMenuControllers(){let t=this.getMenuCategories();this.menuControllers={};for(let e in t){let i=t[e];this.menuControllers[e]=[];try{let t=await import(`../controller/${e}/index.autogenerated.mjs`),o=await this.menu.addCategory(i);for(let i of t.Index)try{let t=(await import(`../controller/${e}/${i}`)).MenuController;if(isEmpty(t))throw"Module does not provide a 'MenuController' export.";if(!t.isDisabled()){let i=await o.addItem(t.menuName,t.menuIcon),s=new t(this);await s.initialize(),i.onClick((()=>s.onClick())),this.menuControllers[e].push(s)}}catch(t){console.warn("Couldn't import",e,"menu controller",i,t)}}catch(t){console.warn("Couldn't register controllers for menu",e,t)}}}async registerSidebarControllers(){let t=await import("../controller/sidebar/index.autogenerated.mjs");this.sidebarControllers=[];for(let e of t.Index){let t=(await import(`../controller/sidebar/${e}`)).SidebarController;if(isEmpty(t))throw"Module does not provide a 'SidebarController' export.";let i=new t(this);await i.initialize(),this.sidebarControllers.push(i)}}async registerToolbarControllers(){let t=await import("../controller/toolbar/index.autogenerated.mjs");this.toolbarControllers=[];for(let e of t.Index){let t=(await import(`../controller/toolbar/${e}`)).ToolbarController;if(isEmpty(t))throw"Module does not provide a 'ToolbarController' export.";let i=await this.toolbar.addItem(t.menuName,t.menuIcon),o=new t(this);await o.initialize(),i.onClick((()=>o.onClick())),this.toolbarControllers.push(o)}}async startKeepalive(){const t=this.config.model.status.interval||1e4,e=t=>{"ready"===t?this.publish("engineReady"):"busy"===t?this.publish("engineBusy"):"idle"===t?this.publish("engineIdle"):console.warn("Unknown status",t)};let i=document.querySelector("header");if(isEmpty(i))return void console.warn("No header found on page, not appending status view.");let o=await this.model.get(),s=new StatusView(this.config,o),n=await s.getNode();e(o.status),i.appendChild(n.render()),setInterval((async()=>{try{let t=await this.model.get();o.status!==t.status&&e(t.status),s.updateStatus(t),o=t}catch{s.updateStatus("error")}}),t);let a=await this.model.get("/invocation"),r=null;for(let t of a)if("processing"===t.status){r=t;break}isEmpty(r)||(isEmpty(r)||isEmpty(r.metadata)||isEmpty(r.metadata.tensorrt_build)?(this.notifications.push("info","Active Invocation Found","You have an image currently being generated, beginning monitoring process."),this.engine.canvasInvocation(r.uuid)):this.notifications.push("info","TensorRT Build in Progress",`You have a TensorRT engine build in progress for ${r.metadata.tensorrt_build.model}. You'll receive a notification in this window when it is complete. The engine will remain unavailable until that time.`),this.publish("invocationBegin",r)),setInterval((async()=>{try{let t,e=await this.model.get("/invocation");for(let i of e)"processing"===i.status&&(null!==r&&r.id===i.id||(t=i)),isEmpty(r)||i.id!==r.id||i.status===r.status||("completed"===i.status?this.publish("invocationComplete",i):this.publish("invocationError",i),r=null);isEmpty(t)||(this.publish("invocationBegin",t),r=t)}catch(t){console.error(t)}}),t)}async registerLogout(){if(!isEmpty(window.enfugue.user)&&"noauth"!==window.enfugue.user){let t=new LogoutButtonView(this.config);document.querySelector("header").appendChild((await t.getNode()).render())}}async startAutosave(){try{let t=await this.history.getCurrentState();isEmpty(t)||(this.setState(t),this.notifications.push("info","Session Restored","Your last autosaved session was successfully loaded."));const e=this.config.model.autosave.interval||3e4;setInterval((()=>this.autosave()),e)}catch(t){console.error(t),this.notifications.push("warning","History Disabled","Couldn't open IndexedDB, history and autosave are disabled.")}}async autosave(t=!0){try{await this.history.setCurrentState(this.getState()),t&&SimpleNotification.notify("Session autosaved!",2e3)}catch(t){console.error("Couldn't autosave",t)}}subscribe(t,e){this.publisher.subscribe(t,e)}unsubscribe(t,e){this.publisher.unsubscribe(t,e)}async publish(t,e=null){this.publisher.publish(t,e)}spawnConfirmForm(t,e,i,o=!0,s=!1){return new Promise((async(n,a)=>{let r,l=!1,m=new t(this.config,i);m.onSubmit((()=>{l=!0,n(!0),o&&r.remove()})),m.onCancel((()=>{l=!0,n(!1),r.remove()})),r=await this.windows.spawnWindow(e,m,this.constructor.confirmViewWidth,this.constructor.confirmViewHeight),r.onClose((()=>{!l&&s?a():n(!1),l=!0}))}))}confirm(t,e=!0){return this.spawnConfirmForm(ConfirmFormView,"Confirm",t,e)}yesNo(t,e=!0){return this.spawnConfirmForm(YesNoFormView,"Yes or No",t,e,!0)}async saveAs(t,e,i,o){let s=new Blob([e],{type:i});return this.saveBlobAs(t,s,o)}async saveBlobAs(t,e,i){i.startsWith(".")||(i=`.${i}`);let o=window.URL.createObjectURL(e),s=new FileNameFormView(this.config),n=await this.windows.spawnWindow(t,s,this.constructor.filenameFormInputWidth,this.constructor.filenameFormInputHeight);s.onCancel((()=>n.close())),s.onSubmit((t=>{let e=t.filename;e.endsWith(i)&&(e=e.substring(0,e.length-i.length));let s=document.createElement("a");s.setAttribute("download",`${e}${i}`),s.href=o,document.body.appendChild(s),window.requestAnimationFrame((()=>{s.dispatchEvent(createEvent("click")),document.body.removeChild(s),n.remove()}))})),n.onClose((()=>window.URL.revokeObjectURL(o)))}async onPaste(t){let e=(t.clipboardData||t.originalEvent.clipboardData).items;for(let t of e)if("file"===t.kind){let e=t.getAsFile(),i=new FileReader;i.onload=t=>this.images.addImageNode(t.target.result,"Pasted Image"),i.readAsDataURL(e)}else t.getAsString((t=>this.onTextPaste(t)))}async onImagePaste(t){let e=new ImageView(this.config,t);await e.waitForLoad(),this.images.addNode(ImageEditorImageNodeView,"Pasted Image",e,0,0,e.width,e.height)}async onTextPaste(t){t.startsWith("<html>")||console.warn("Text paste",t)}getStatefulControllers(){let t=[this.modelPicker].concat(this.toolbarControllers).concat(this.sidebarControllers);for(let e in this.menuControllers)t=t.concat(this.menuControllers[e]);return t}getState(){let t={images:this.images.getState()},e=this.getStatefulControllers();for(let i of e)t={...t,...i.getState()};return t}shouldSaveState(){let t=this.getState();return!(isEmpty(t.prompts)||isEmpty(t.prompts.prompt)&&isEmpty(t.prompts.negativePrompt))||!isEmpty(t.images)}async setState(t,e=!1){!0===e&&this.shouldSaveState()&&(await this.autosave(!1),await this.history.flush(t));let i=this.getStatefulControllers();for(let e of i)await e.setState(t);isEmpty(t.canvas)||(isEmpty(t.canvas.width)||(this.images.width=t.canvas.width),isEmpty(t.canvas.height)||(this.images.height=t.canvas.height)),void 0!==t.images&&null!==t.images&&(this.engine.hideSampleChooser(),this.images.hideCurrentInvocation(),this.images.setState(t.images))}async resetState(t=!0){let e={images:[]},i=this.getStatefulControllers();for(let t of i)e={...e,...t.getDefaultState()};await this.setState(e,t)}async initializeStateFromImage(t,e=!0){try{let i={},o=await this.yesNo("Would you like to keep settings?<br /><br />This will maintain things like prompts and other global settings the same while only changing the dimensions to match the image."),s=this.getStatefulControllers();for(let t of s)i=o?{...i,...t.getState()}:{...i,...t.getDefaultState()};isEmpty(i.canvas)&&(i.canvas={}),i.canvas.width=t.width,i.canvas.height=t.height,i.images=[ImageEditorView.getNodeDataForImage(t)],this.engine.hideSampleChooser(),this.images.hideCurrentInvocation(),this.images.width=t.width,this.images.height=t.height,await this.setState(i,e)}catch(t){}}onKeyPress(t){}async popState(t){}}export{Application};
