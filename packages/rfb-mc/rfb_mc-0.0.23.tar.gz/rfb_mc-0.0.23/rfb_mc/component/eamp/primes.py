from typing import Dict, Tuple, Optional, overload
from functools import lru_cache
import random


@lru_cache(1)
def get_lowest_prime_above_or_equal_power_of_power_of_two_dict() -> Dict[int, int]:
    return {
        0: 2,
        1: 5,
        2: 17,
        3: 257,
        4: 65537,
        5: 4294967311,
        6: 18446744073709551629,
        7: 340282366920938463463374607431768211507,
        8: 115792089237316195423570985008687907853269984665640564039457584007913129640233,
        9: 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084171,
        10: 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137859,
        11: 32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596231637,
        12: 1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154192097,
        13: 1090748135619415929462984244733782862448264161996232692431832786189721331849119295216264234525201987223957291796157025273109870820177184063610979765077554799078906298842192989538609825228048205159696851613591638196771886542609324560121290553901886301017900252535799917200010079600026535836800905297805880952350501630195475653911005312364560014847426035293551245843928918752768696279344088055617515694349945406677825140814900616105920256438504578013326493565836047242407382442812245131517757519164899226365743722432277368075027627883045206501792761700945699168497257879683851737049996900961120515655050115561271491492515342105748966629547032786321505730828430221664970324396138635251626409516168005427623435996308921691446181187406395310665404885739434832877428167407495370993511868756359970390117021823616749458620969857006263612082706715408157066575137281027022310927564910276759160520878304632411049364568754920967322982459184763427383790272448438018526977764941072715611580434690827459339991961414242741410599117426060556483763756314527611362658628383368621157993638020878537675545336789915694234433955666315070087213535470255670312004130725495834508357439653828936077080978550578912967907352780054935621561090795845172954115972927479877527738560008204118558930004777748727761853813510493840581861598652211605960308356405941821189714037868726219481498727603653616298856174822413033485438785324024751419417183012281078209729303537372804574372095228703622776363945290869806258422355148507571039619387449629866808188769662815778153079393179093143648340761738581819563002994422790754955061288818308430079648693232179158765918035565216157115402992120276155607873107937477466841528362987708699450152031231862594203085693838944657061346236704234026821102958954951197087076546186622796294536451620756509351018906023773821539532776208676978589731966330308893304665169436185078350641568336944530051437491311298834367265238595404904273455928723949525227184617404367854754610474377019768025576605881038077270707717942221977090385438585844095492116099852538903974655703943973086090930596963360767529964938414598185705963754561497355827813623833288906309004288017321424808663962671333528009232758350873059614118723781422101460198615747386855096896089189180441339558524822867541113212638793675567650340362970031930023397828465318547238244232028015189689660418822976000815437610652254270163595650875433851147123214227266605403581781469090806576468950587661997186505665475715793793,

    }


def get_lowest_prime_above_or_equal_power_of_power_of_two(j: int) -> int:
    """
    Returns the smallest prime that above or equal 2 ** (2 ** j)
    """

    primes_dict = get_lowest_prime_above_or_equal_power_of_power_of_two_dict()

    if j in primes_dict:
        return primes_dict[j]
    else:
        raise ValueError(f"No stored primes for the lowest prime above or equal 2 ** (2 ** {j}),"
                         f" the highest available is for 2 ** (2 ** {max(primes_dict.keys())})")


def miller_rabin(n: int, k: int = 40) -> bool:
    """
    Takes in a possible prime n and the number of testing iterations k.
    Returns True if n is a prime, returns False with a probability >= (1/4)**(-k) if it is not.
    Note: If n < 2, False will always be returned
    """

    # Implementation uses the Miller-Rabin Primality Test
    # The optimal number of rounds for this test is 40
    # See http://stackoverflow.com/questions/6325576
    #     /how-many-iterations-of-rabin-miller-should-i-use-for-cryptographic-safe-primes
    # for justification

    if n <= 3:
        return True if n == 2 or n == 3 else False
    elif n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2

    for _ in range(k):
        a = random.randrange(2, n - 1)
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


@overload
def get_closest_prime(x: int) -> int: pass


@overload
def get_closest_prime(x: int, bounds: Tuple[Optional[int], None]) -> int: pass


@overload
def get_closest_prime(x: int, bounds: Tuple[Optional[int], int]) -> Optional[int]: pass


def get_closest_prime(
    x: int,
    bounds: Tuple[Optional[int], Optional[int]] = (None, None),
) -> Optional[int]:
    """
    Generates the prime nearest to the given "x" (including x itself).
    The generated prime will be within the given bounds (unless none exists in which case None is returned),
    a bound of None will mean the side is unbounded i.e. (12, None) means the generated prime needs to be >= 12.
    There is a small probability that the generated prime is not a prime.
    """

    lower_bound = max(bounds[0] or 0, 2)
    upper_bound = bounds[1]

    def in_bounds(y: int) -> bool:
        return lower_bound <= y and (upper_bound is None or y <= upper_bound)

    if in_bounds(x) and miller_rabin(x, k=40):
        return x

    k = 1

    while in_bounds(x - k) or in_bounds(x + k):
        if in_bounds(x - k) and miller_rabin(x - k, k=40):
            return x - k
        elif in_bounds(x + k) and miller_rabin(x + k, k=40):
            return x + k
        else:
            k += 1

    return None
