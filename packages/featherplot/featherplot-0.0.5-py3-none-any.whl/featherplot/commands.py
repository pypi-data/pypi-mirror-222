# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_commands.ipynb.

# %% auto 0
__all__ = ['add_sidecars', 'export_conda_to_ini', 'run_add_sidecars', 'run_export_conda_to_ini']

# %% ../nbs/08_commands.ipynb 3
import os, yaml, configparser, typer
from pathlib import Path
from rich.table import Table
from rich.console import Console
from rich.repr import auto as rich_auto
from dataclasses import dataclass, field

from typing import (
    ClassVar, List, Dict, Union, Optional, Tuple, Sequence, Set,
    Any, TypeVar, Type, Callable, cast, no_type_check
)

# %% ../nbs/08_commands.ipynb 4
from .typer import app

# %% ../nbs/08_commands.ipynb 5
from .deepscatter import add_sidecars_cli
from .deepscatter import Tileset

# %% ../nbs/08_commands.ipynb 6
@app.command()
def add_sidecars(
    tileset:Path = typer.Option('--tileset', help='Path to the tileset to add sidecars to.'),

    sidecar:Path = typer.Option('--sidecar',  help='Path to the new data to add to the tileset.'),
    key:str = typer.Option('--key', help='key to use for joining; must exist in both tables'),

    verbose:bool = typer.Option(False, '--verbose', '-v', help='Print verbose output.', is_flag=True),
):
    tileset = Tileset(tileset)
    tileset.add_sidecars(sidecar, key, verbose=verbose)

# %% ../nbs/08_commands.ipynb 7
@app.command()
def export_conda_to_ini():
    pass

# %% ../nbs/08_commands.ipynb 8
def run_add_sidecars():     
    app()    
    add_sidecars_cli_wrapper()

# %% ../nbs/08_commands.ipynb 9
def run_export_conda_to_ini():     
    app()    
    export_conda_to_ini()
