# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PoolInstance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_id': 'str',
        'cloud_instance_id': 'str',
        'cloud_instance_type': 'str',
        'cached_at': 'datetime'
    }

    attribute_map = {
        'instance_id': 'instance_id',
        'cloud_instance_id': 'cloud_instance_id',
        'cloud_instance_type': 'cloud_instance_type',
        'cached_at': 'cached_at'
    }

    def __init__(self, instance_id=None, cloud_instance_id=None, cloud_instance_type=None, cached_at=None, local_vars_configuration=None):  # noqa: E501
        """PoolInstance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_id = None
        self._cloud_instance_id = None
        self._cloud_instance_type = None
        self._cached_at = None
        self.discriminator = None

        self.instance_id = instance_id
        self.cloud_instance_id = cloud_instance_id
        self.cloud_instance_type = cloud_instance_type
        self.cached_at = cached_at

    @property
    def instance_id(self):
        """Gets the instance_id of this PoolInstance.  # noqa: E501


        :return: The instance_id of this PoolInstance.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this PoolInstance.


        :param instance_id: The instance_id of this PoolInstance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def cloud_instance_id(self):
        """Gets the cloud_instance_id of this PoolInstance.  # noqa: E501


        :return: The cloud_instance_id of this PoolInstance.  # noqa: E501
        :rtype: str
        """
        return self._cloud_instance_id

    @cloud_instance_id.setter
    def cloud_instance_id(self, cloud_instance_id):
        """Sets the cloud_instance_id of this PoolInstance.


        :param cloud_instance_id: The cloud_instance_id of this PoolInstance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_instance_id`, must not be `None`")  # noqa: E501

        self._cloud_instance_id = cloud_instance_id

    @property
    def cloud_instance_type(self):
        """Gets the cloud_instance_type of this PoolInstance.  # noqa: E501


        :return: The cloud_instance_type of this PoolInstance.  # noqa: E501
        :rtype: str
        """
        return self._cloud_instance_type

    @cloud_instance_type.setter
    def cloud_instance_type(self, cloud_instance_type):
        """Sets the cloud_instance_type of this PoolInstance.


        :param cloud_instance_type: The cloud_instance_type of this PoolInstance.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_instance_type is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_instance_type`, must not be `None`")  # noqa: E501

        self._cloud_instance_type = cloud_instance_type

    @property
    def cached_at(self):
        """Gets the cached_at of this PoolInstance.  # noqa: E501


        :return: The cached_at of this PoolInstance.  # noqa: E501
        :rtype: datetime
        """
        return self._cached_at

    @cached_at.setter
    def cached_at(self, cached_at):
        """Sets the cached_at of this PoolInstance.


        :param cached_at: The cached_at of this PoolInstance.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and cached_at is None:  # noqa: E501
            raise ValueError("Invalid value for `cached_at`, must not be `None`")  # noqa: E501

        self._cached_at = cached_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolInstance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PoolInstance):
            return True

        return self.to_dict() != other.to_dict()
