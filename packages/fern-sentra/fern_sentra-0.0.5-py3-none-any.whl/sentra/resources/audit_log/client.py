# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...environment import SentraEnvironment
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.event_log_action import EventLogAction
from ...types.event_log_entity_type import EventLogEntityType
from ...types.get_all_api_v_2_audit_log_get_response import GetAllApiV2AuditLogGetResponse
from ...types.get_filter_api_v_2_audit_log_filter_name_get_response import GetFilterApiV2AuditLogFilterNameGetResponse
from ...types.http_validation_error import HttpValidationError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuditLogClient:
    def __init__(
        self, *, environment: SentraEnvironment = SentraEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2AuditLogGetResponse:
        """
        List all audit log events.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/audit-log"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2AuditLogGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_event(
        self,
        *,
        entity_type: EventLogEntityType,
        action: EventLogAction,
        entity_id: typing.Optional[str] = OMIT,
        properties: typing.Dict[str, str],
    ) -> bool:
        """
        Manually emit an event to the audit log on behalf of the authenticated user or service account.

        Parameters:
            - entity_type: EventLogEntityType.

            - action: EventLogAction.

            - entity_id: typing.Optional[str].

            - properties: typing.Dict[str, str].
        """
        _request: typing.Dict[str, typing.Any] = {
            "entity_type": entity_type,
            "action": action,
            "properties": properties,
        }
        if entity_id is not OMIT:
            _request["entity_id"] = entity_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/audit-log"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_filter(
        self,
        name: str,
        *,
        values: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetFilterApiV2AuditLogFilterNameGetResponse:
        """
        Get all available filtering options for filtering on audit log events.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/audit-log/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters, "with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2AuditLogFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuditLogClient:
    def __init__(
        self, *, environment: SentraEnvironment = SentraEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2AuditLogGetResponse:
        """
        List all audit log events.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/audit-log"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2AuditLogGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_event(
        self,
        *,
        entity_type: EventLogEntityType,
        action: EventLogAction,
        entity_id: typing.Optional[str] = OMIT,
        properties: typing.Dict[str, str],
    ) -> bool:
        """
        Manually emit an event to the audit log on behalf of the authenticated user or service account.

        Parameters:
            - entity_type: EventLogEntityType.

            - action: EventLogAction.

            - entity_id: typing.Optional[str].

            - properties: typing.Dict[str, str].
        """
        _request: typing.Dict[str, typing.Any] = {
            "entity_type": entity_type,
            "action": action,
            "properties": properties,
        }
        if entity_id is not OMIT:
            _request["entity_id"] = entity_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/audit-log"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(bool, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_filter(
        self,
        name: str,
        *,
        values: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetFilterApiV2AuditLogFilterNameGetResponse:
        """
        Get all available filtering options for filtering on audit log events.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/audit-log/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters, "with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2AuditLogFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
