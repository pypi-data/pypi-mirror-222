# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SentraEnvironment
from .resources.alerts.client import AlertsClient, AsyncAlertsClient
from .resources.api_keys.client import ApiKeysClient, AsyncApiKeysClient
from .resources.audit_log.client import AsyncAuditLogClient, AuditLogClient
from .resources.connectors.client import AsyncConnectorsClient, ConnectorsClient
from .resources.context_labels.client import AsyncContextLabelsClient, ContextLabelsClient
from .resources.dashboard.client import AsyncDashboardClient, DashboardClient
from .resources.data_access.client import AsyncDataAccessClient, DataAccessClient
from .resources.data_assets.client import AsyncDataAssetsClient, DataAssetsClient
from .resources.data_classes.client import AsyncDataClassesClient, DataClassesClient
from .resources.data_stores.client import AsyncDataStoresClient, DataStoresClient
from .resources.export.client import AsyncExportClient, ExportClient
from .resources.integrations.client import AsyncIntegrationsClient, IntegrationsClient
from .resources.policies.client import AsyncPoliciesClient, PoliciesClient
from .resources.roles.client import AsyncRolesClient, RolesClient
from .resources.sensitivity.client import AsyncSensitivityClient, SensitivityClient
from .resources.users.client import AsyncUsersClient, UsersClient


class Sentra:
    def __init__(
        self,
        *,
        environment: SentraEnvironment = SentraEnvironment.PRODUCTION,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = SyncClientWrapper(api_key=api_key, httpx_client=httpx.Client(timeout=timeout))
        self.connectors = ConnectorsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.alerts = AlertsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.policies = PoliciesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_stores = DataStoresClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_assets = DataAssetsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.dashboard = DashboardClient(environment=environment, client_wrapper=self._client_wrapper)
        self.sensitivity = SensitivityClient(environment=environment, client_wrapper=self._client_wrapper)
        self.users = UsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.integrations = IntegrationsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_access = DataAccessClient(environment=environment, client_wrapper=self._client_wrapper)
        self.export = ExportClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_classes = DataClassesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.audit_log = AuditLogClient(environment=environment, client_wrapper=self._client_wrapper)
        self.context_labels = ContextLabelsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.roles = RolesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.api_keys = ApiKeysClient(environment=environment, client_wrapper=self._client_wrapper)


class AsyncSentra:
    def __init__(
        self,
        *,
        environment: SentraEnvironment = SentraEnvironment.PRODUCTION,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = AsyncClientWrapper(api_key=api_key, httpx_client=httpx.AsyncClient(timeout=timeout))
        self.connectors = AsyncConnectorsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.alerts = AsyncAlertsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.policies = AsyncPoliciesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_stores = AsyncDataStoresClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_assets = AsyncDataAssetsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.dashboard = AsyncDashboardClient(environment=environment, client_wrapper=self._client_wrapper)
        self.sensitivity = AsyncSensitivityClient(environment=environment, client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.integrations = AsyncIntegrationsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_access = AsyncDataAccessClient(environment=environment, client_wrapper=self._client_wrapper)
        self.export = AsyncExportClient(environment=environment, client_wrapper=self._client_wrapper)
        self.data_classes = AsyncDataClassesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.audit_log = AsyncAuditLogClient(environment=environment, client_wrapper=self._client_wrapper)
        self.context_labels = AsyncContextLabelsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.roles = AsyncRolesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.api_keys = AsyncApiKeysClient(environment=environment, client_wrapper=self._client_wrapper)
