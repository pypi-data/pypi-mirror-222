# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class DataStoreProps(pydantic.BaseModel):
    vpc_id: typing.Optional[str]
    subnet_ids: typing.Optional[typing.List[str]]
    subnet_groups: typing.Optional[typing.List[str]]
    security_group_ids: typing.Optional[typing.List[str]]
    native_unique_id: typing.Optional[str]
    database_engine_version: typing.Optional[str]
    authentication_type: typing.Optional[str]
    authentication_strength: typing.Optional[str]
    is_cluster: typing.Optional[bool]
    iam_instance_profile: typing.Optional[str]
    sse_algorithm: typing.Optional[str]
    kms_master_key_id: typing.Optional[str]
    server_name: typing.Optional[str]
    server_id: typing.Optional[str]
    database_account: typing.Optional[str]
    subscription: typing.Optional[str]
    restrict_outbound_network_access: typing.Optional[str]
    cluster_endpoint: typing.Optional[str]
    instance_endpoint: typing.Optional[typing.Dict[str, typing.Any]]
    username: typing.Optional[str]
    port: typing.Optional[int]
    db_name: typing.Optional[str]
    instance_class: typing.Optional[str]
    scan_engine: typing.Optional[str]
    scan_engine_version: typing.Optional[str]
    root_device_name: typing.Optional[str]
    volumes: typing.Optional[typing.List[typing.Dict[str, str]]]
    object_ownership_policy: typing.Optional[str]
    internal_tags: typing.Optional[typing.List[str]]
    access_policies_checksum: typing.Optional[str]
    storage_capacity: typing.Optional[int]
    source_replica_id: typing.Optional[str]
    storage_account: typing.Optional[str]
    blob_container_name: typing.Optional[str]
    resource_group: typing.Optional[str]
    sensitivity_score: typing.Optional[str]
    sensitivity_level: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
