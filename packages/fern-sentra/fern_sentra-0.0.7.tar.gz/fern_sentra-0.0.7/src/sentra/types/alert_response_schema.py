# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .alert_entity_type import AlertEntityType
from .alert_response_schema_content import AlertResponseSchemaContent
from .alert_status import AlertStatus
from .alert_status_reason import AlertStatusReason
from .alert_type import AlertType
from .resolved_alert_source import ResolvedAlertSource


class AlertResponseSchema(pydantic.BaseModel):
    id: str
    policy_id: str
    entity_id: typing.Optional[str]
    entity_type: AlertEntityType
    status: AlertStatus
    status_reason: AlertStatusReason
    type: AlertType
    content: AlertResponseSchemaContent
    resolved_alert_source: typing.Optional[ResolvedAlertSource]
    occurrences: int
    organization_id: int
    connector_id: int
    created_at: typing.Optional[str]
    opened_at: typing.Optional[str]
    last_modified: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
