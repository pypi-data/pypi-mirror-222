# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .context_label_schema import ContextLabelSchema
from .data_class_item import DataClassItem


class AccessDataStore(pydantic.BaseModel):
    id: str
    name: str
    permissions: typing.Dict[str, typing.List[str]]
    last_activity: typing.Optional[str]
    data_classes: typing.Optional[typing.List[DataClassItem]]
    category: str
    context_labels: typing.List[ContextLabelSchema]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
