# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class DataHubFabric(str, enum.Enum):
    """
    An enumeration.
    """

    DEV = "DEV"
    TEST = "TEST"
    QA = "QA"
    UAT = "UAT"
    EI = "EI"
    PRE = "PRE"
    STG = "STG"
    NON_PROD = "NON_PROD"
    PROD = "PROD"
    CORP = "CORP"

    def visit(
        self,
        dev: typing.Callable[[], T_Result],
        test: typing.Callable[[], T_Result],
        qa: typing.Callable[[], T_Result],
        uat: typing.Callable[[], T_Result],
        ei: typing.Callable[[], T_Result],
        pre: typing.Callable[[], T_Result],
        stg: typing.Callable[[], T_Result],
        non_prod: typing.Callable[[], T_Result],
        prod: typing.Callable[[], T_Result],
        corp: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is DataHubFabric.DEV:
            return dev()
        if self is DataHubFabric.TEST:
            return test()
        if self is DataHubFabric.QA:
            return qa()
        if self is DataHubFabric.UAT:
            return uat()
        if self is DataHubFabric.EI:
            return ei()
        if self is DataHubFabric.PRE:
            return pre()
        if self is DataHubFabric.STG:
            return stg()
        if self is DataHubFabric.NON_PROD:
            return non_prod()
        if self is DataHubFabric.PROD:
            return prod()
        if self is DataHubFabric.CORP:
            return corp()
