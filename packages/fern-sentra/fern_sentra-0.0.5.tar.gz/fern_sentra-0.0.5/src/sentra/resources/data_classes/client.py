# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...environment import SentraEnvironment
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.class_and_classifier_config_schema import ClassAndClassifierConfigSchema
from ...types.class_categories import ClassCategories
from ...types.create_class_request_schema_classifier_schema import CreateClassRequestSchemaClassifierSchema
from ...types.get_all_api_v_2_classes_get_response import GetAllApiV2ClassesGetResponse
from ...types.get_filter_api_v_2_classes_filter_name_get_response import GetFilterApiV2ClassesFilterNameGetResponse
from ...types.http_validation_error import HttpValidationError
from ...types.update_class_request_schema_classifier_schema import UpdateClassRequestSchemaClassifierSchema

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DataClassesClient:
    def __init__(
        self, *, environment: SentraEnvironment = SentraEnvironment.PRODUCTION, client_wrapper: SyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2ClassesGetResponse:
        """
        List all data classes.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/classes"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2ClassesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_class(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        category: ClassCategories,
        sensitivity_weight: int,
        enabled: typing.Optional[bool] = OMIT,
        classifier_schema: CreateClassRequestSchemaClassifierSchema,
    ) -> ClassAndClassifierConfigSchema:
        """
        Parameters:
            - name: str.

            - description: typing.Optional[str].

            - category: ClassCategories.

            - sensitivity_weight: int.

            - enabled: typing.Optional[bool].

            - classifier_schema: CreateClassRequestSchemaClassifierSchema.
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "category": category,
            "sensitivity_weight": sensitivity_weight,
            "classifier_schema": classifier_schema,
        }
        if description is not OMIT:
            _request["description"] = description
        if enabled is not OMIT:
            _request["enabled"] = enabled
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/classes"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_filter(
        self, name: str, *, values: typing.Optional[str] = None, filters: typing.Optional[str] = None
    ) -> GetFilterApiV2ClassesFilterNameGetResponse:
        """
        Get all available filtering options for filtering on data classes.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2ClassesFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str) -> ClassAndClassifierConfigSchema:
        """
        Get all information about a specific data class by ID.

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_class(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        category: typing.Optional[ClassCategories] = OMIT,
        sensitivity_weight: typing.Optional[int] = OMIT,
        enabled: typing.Optional[bool] = OMIT,
        classifier_schema: typing.Optional[UpdateClassRequestSchemaClassifierSchema] = OMIT,
    ) -> ClassAndClassifierConfigSchema:
        """
        Update a data class.

        Parameters:
            - id: str.

            - name: typing.Optional[str].

            - description: typing.Optional[str].

            - category: typing.Optional[ClassCategories].

            - sensitivity_weight: typing.Optional[int].

            - enabled: typing.Optional[bool].

            - classifier_schema: typing.Optional[UpdateClassRequestSchemaClassifierSchema].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if category is not OMIT:
            _request["category"] = category
        if sensitivity_weight is not OMIT:
            _request["sensitivity_weight"] = sensitivity_weight
        if enabled is not OMIT:
            _request["enabled"] = enabled
        if classifier_schema is not OMIT:
            _request["classifier_schema"] = classifier_schema
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_data_class_config(self, id: str) -> str:
        """
        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_class_file(self, id: str, *, dictionary_file: typing.IO) -> ClassAndClassifierConfigSchema:
        """
        Parameters:
            - id: str.

            - dictionary_file: typing.IO.
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/dictionary_file/{id}"),
            data=jsonable_encoder({}),
            files={"dictionary_file": dictionary_file},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDataClassesClient:
    def __init__(
        self, *, environment: SentraEnvironment = SentraEnvironment.PRODUCTION, client_wrapper: AsyncClientWrapper
    ):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2ClassesGetResponse:
        """
        List all data classes.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/classes"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2ClassesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_class(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        category: ClassCategories,
        sensitivity_weight: int,
        enabled: typing.Optional[bool] = OMIT,
        classifier_schema: CreateClassRequestSchemaClassifierSchema,
    ) -> ClassAndClassifierConfigSchema:
        """
        Parameters:
            - name: str.

            - description: typing.Optional[str].

            - category: ClassCategories.

            - sensitivity_weight: int.

            - enabled: typing.Optional[bool].

            - classifier_schema: CreateClassRequestSchemaClassifierSchema.
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "category": category,
            "sensitivity_weight": sensitivity_weight,
            "classifier_schema": classifier_schema,
        }
        if description is not OMIT:
            _request["description"] = description
        if enabled is not OMIT:
            _request["enabled"] = enabled
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "api/v2/classes"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_filter(
        self, name: str, *, values: typing.Optional[str] = None, filters: typing.Optional[str] = None
    ) -> GetFilterApiV2ClassesFilterNameGetResponse:
        """
        Get all available filtering options for filtering on data classes.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2ClassesFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str) -> ClassAndClassifierConfigSchema:
        """
        Get all information about a specific data class by ID.

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_class(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        category: typing.Optional[ClassCategories] = OMIT,
        sensitivity_weight: typing.Optional[int] = OMIT,
        enabled: typing.Optional[bool] = OMIT,
        classifier_schema: typing.Optional[UpdateClassRequestSchemaClassifierSchema] = OMIT,
    ) -> ClassAndClassifierConfigSchema:
        """
        Update a data class.

        Parameters:
            - id: str.

            - name: typing.Optional[str].

            - description: typing.Optional[str].

            - category: typing.Optional[ClassCategories].

            - sensitivity_weight: typing.Optional[int].

            - enabled: typing.Optional[bool].

            - classifier_schema: typing.Optional[UpdateClassRequestSchemaClassifierSchema].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if category is not OMIT:
            _request["category"] = category
        if sensitivity_weight is not OMIT:
            _request["sensitivity_weight"] = sensitivity_weight
        if enabled is not OMIT:
            _request["enabled"] = enabled
        if classifier_schema is not OMIT:
            _request["classifier_schema"] = classifier_schema
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_data_class_config(self, id: str) -> str:
        """
        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(str, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_class_file(self, id: str, *, dictionary_file: typing.IO) -> ClassAndClassifierConfigSchema:
        """
        Parameters:
            - id: str.

            - dictionary_file: typing.IO.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment.value}/", f"api/v2/classes/dictionary_file/{id}"),
            data=jsonable_encoder({}),
            files={"dictionary_file": dictionary_file},
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClassAndClassifierConfigSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
