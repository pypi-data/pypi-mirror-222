# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .account_type import AccountType
from .app_schemas_stores_public_access_level import AppSchemasStoresPublicAccessLevel
from .context_label_schema import ContextLabelSchema
from .data_class_item import DataClassItem
from .data_store_props import DataStoreProps


class DataStoreExtended(pydantic.BaseModel):
    organization_id: int
    connector_id: int
    name: str
    properties: DataStoreProps
    created_at: typing.Optional[str]
    last_modified: typing.Optional[str]
    scan_priority: typing.Optional[int]
    deleted: typing.Optional[bool]
    mark_deleted_at: typing.Optional[str]
    last_activity: typing.Optional[str]
    cloud_resource_id: typing.Optional[str]
    cloud_resource_group_id: typing.Optional[str]
    region: typing.Optional[str]
    hosting_service: typing.Optional[str]
    database_engine: typing.Optional[str]
    public_access_level: typing.Optional[AppSchemasStoresPublicAccessLevel]
    is_backed_up: typing.Optional[bool]
    is_managed: typing.Optional[bool]
    category: typing.Optional[str]
    tags: typing.Optional[typing.Dict[str, str]]
    is_encrypted: typing.Optional[bool]
    is_logging_enabled: typing.Optional[bool]
    used_storage: typing.Optional[int]
    id: str
    discovered_at: str
    last_seen_at: str
    is_known: bool
    last_scanned: typing.Optional[str]
    sensitivity_score: typing.Optional[float]
    sensitivity_level: typing.Optional[int]
    connector_name: typing.Optional[str] = pydantic.Field(alias="Connector__name")
    connector_account_type: AccountType = pydantic.Field(alias="Connector__account_type")
    data_classes: typing.Optional[typing.List[DataClassItem]]
    findings_count: typing.Optional[int]
    context_labels: typing.List[ContextLabelSchema]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
