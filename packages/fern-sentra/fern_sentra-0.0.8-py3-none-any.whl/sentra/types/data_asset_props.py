# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .data_asset_object import DataAssetObject


class DataAssetProps(pydantic.BaseModel):
    tags: typing.Optional[typing.Dict[str, str]]
    structure: typing.Optional[typing.Dict[str, str]]
    s_3_storage_class: typing.Optional[str] = pydantic.Field(alias="s3_storage_class")
    s_3_encryption_status: typing.Optional[str] = pydantic.Field(alias="s3_encryption_status")
    s_3_storage_classes: typing.Optional[typing.Dict[str, int]] = pydantic.Field(alias="s3_storage_classes")
    s_3_encryption_statuses: typing.Optional[typing.Dict[str, int]] = pydantic.Field(alias="s3_encryption_statuses")
    object_keys: typing.Optional[typing.List[DataAssetObject]]
    owner_ids: typing.Optional[typing.List[typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
