# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class RuntimeProperties(pydantic.BaseModel):
    data_scan_config: typing.Optional[typing.Dict[str, typing.Any]]
    skip_config: typing.Optional[typing.Dict[str, typing.Any]]
    on_feature_flags: typing.Optional[typing.List[typing.Any]]
    scanner_config: typing.Optional[typing.Dict[str, typing.Any]]
    cleaner_timeout: typing.Optional[int]
    scan_management_config: typing.Optional[typing.Dict[str, typing.Any]]
    parallel_limit_snapshot_based: typing.Optional[int]
    parallel_limit_non_snapshot_based: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
