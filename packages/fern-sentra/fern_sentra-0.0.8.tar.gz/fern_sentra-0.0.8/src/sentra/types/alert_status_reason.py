# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AlertStatusReason(str, enum.Enum):
    """
    An enumeration.
    """

    FALSE_POSITIVE = "false_positive"
    FIXED = "fixed"
    IGNORED = "ignored"
    REOPENED = "reopened"
    NONE = "none"
    RESOURCE_DELETED = "resource_deleted"

    def visit(
        self,
        false_positive: typing.Callable[[], T_Result],
        fixed: typing.Callable[[], T_Result],
        ignored: typing.Callable[[], T_Result],
        reopened: typing.Callable[[], T_Result],
        none: typing.Callable[[], T_Result],
        resource_deleted: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AlertStatusReason.FALSE_POSITIVE:
            return false_positive()
        if self is AlertStatusReason.FIXED:
            return fixed()
        if self is AlertStatusReason.IGNORED:
            return ignored()
        if self is AlertStatusReason.REOPENED:
            return reopened()
        if self is AlertStatusReason.NONE:
            return none()
        if self is AlertStatusReason.RESOURCE_DELETED:
            return resource_deleted()
