# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .class_and_classifier_config_schema_classifier_config import ClassAndClassifierConfigSchemaClassifierConfig
from .class_categories import ClassCategories
from .class_source import ClassSource


class ClassAndClassifierConfigSchema(pydantic.BaseModel):
    id: str
    organization_id: int
    name: str
    description: typing.Optional[str] = pydantic.Field(
        description='<span style="white-space: nowrap">`<= 1024 characters`</span>'
    )
    source: ClassSource
    category: ClassCategories
    created_by: typing.Optional[int]
    created_at: str
    sensitivity_weight: int
    enabled: bool
    experimental: bool
    classifier_config: ClassAndClassifierConfigSchemaClassifierConfig

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
