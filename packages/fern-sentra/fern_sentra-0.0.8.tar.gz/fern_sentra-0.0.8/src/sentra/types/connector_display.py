# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .account_type import AccountType
from .connector_display_args import ConnectorDisplayArgs
from .connector_display_compute_properties import ConnectorDisplayComputeProperties
from .schedule_properties import ScheduleProperties


class ConnectorDisplay(pydantic.BaseModel):
    name: str
    account_id: str
    account_type: AccountType
    enabled: bool
    compute_connector_id: typing.Optional[int]
    args: ConnectorDisplayArgs
    compute_properties: typing.Optional[ConnectorDisplayComputeProperties]
    schedule_properties: typing.Optional[ScheduleProperties]
    is_scanner: typing.Optional[bool]
    created_at: str
    organization_id: int
    added_by_user_id: typing.Optional[int]
    id: int
    has_heartbeat: typing.Optional[bool]
    last_heartbeat: typing.Optional[str]
    added_by_user_name: str

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
