# coding: utf-8

"""
    LMK API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, StrictStr, constr, validator

class InitiateOauthRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    client_id: StrictStr = ...
    response_type: StrictStr = ...
    redirect_uri: StrictStr = ...
    scope: constr(strict=True) = ...
    state: StrictStr = ...
    __properties = ["client_id", "response_type", "redirect_uri", "scope", "state"]

    @validator('scope')
    def scope_validate_regular_expression(cls, v):
        if not re.match(r"[\w\-:]+( [\w\-:])*", v):
            raise ValueError(r"must validate the regular expression /[\w\-:]+( [\w\-:])*/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InitiateOauthRequest:
        """Create an instance of InitiateOauthRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InitiateOauthRequest:
        """Create an instance of InitiateOauthRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return InitiateOauthRequest.parse_obj(obj)

        _obj = InitiateOauthRequest.parse_obj({
            "client_id": obj.get("client_id"),
            "response_type": obj.get("response_type"),
            "redirect_uri": obj.get("redirect_uri"),
            "scope": obj.get("scope"),
            "state": obj.get("state")
        })
        return _obj

