# coding: utf-8

"""
    LMK API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr
from lmk.generated.models.create_notification_channel_request_payload import CreateNotificationChannelRequestPayload

class UpdateNotificationChannelRequest(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    payload: Optional[CreateNotificationChannelRequestPayload] = None
    name: Optional[StrictStr] = None
    order: Optional[float] = None
    __properties = ["payload", "name", "order"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateNotificationChannelRequest:
        """Create an instance of UpdateNotificationChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateNotificationChannelRequest:
        """Create an instance of UpdateNotificationChannelRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return UpdateNotificationChannelRequest.parse_obj(obj)

        _obj = UpdateNotificationChannelRequest.parse_obj({
            "payload": CreateNotificationChannelRequestPayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "name": obj.get("name"),
            "order": obj.get("order")
        })
        return _obj

