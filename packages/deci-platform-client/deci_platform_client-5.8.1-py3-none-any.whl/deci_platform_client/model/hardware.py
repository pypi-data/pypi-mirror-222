# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class Hardware(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "jobLabel",
            "machineModel",
            "environment",
            "taint",
            "vendor",
            "name",
            "label",
            "family",
            "group",
        }
        
        class properties:
            name = schemas.StrSchema
            label = schemas.StrSchema
            machineModel = schemas.StrSchema
        
            @staticmethod
            def group() -> typing.Type['HardwareGroup']:
                return HardwareGroup
        
            @staticmethod
            def vendor() -> typing.Type['HardwareVendor']:
                return HardwareVendor
        
            @staticmethod
            def family() -> typing.Type['InferenceHardware']:
                return InferenceHardware
            taint = schemas.StrSchema
            jobLabel = schemas.StrSchema
        
            @staticmethod
            def environment() -> typing.Type['HardwareEnvironment']:
                return HardwareEnvironment
            updateTime = schemas.DateTimeSchema
            creationTime = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            imageDistribution = schemas.StrSchema
            imageRepository = schemas.StrSchema
            
            
            class future(
                schemas.EnumBase,
                schemas.BoolSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            
            
            class defaultBatchSizeList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'defaultBatchSizeList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            fake = schemas.BoolSchema
            deprecated = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "label": label,
                "machineModel": machineModel,
                "group": group,
                "vendor": vendor,
                "family": family,
                "taint": taint,
                "jobLabel": jobLabel,
                "environment": environment,
                "updateTime": updateTime,
                "creationTime": creationTime,
                "id": id,
                "deleted": deleted,
                "imageDistribution": imageDistribution,
                "imageRepository": imageRepository,
                "future": future,
                "defaultBatchSizeList": defaultBatchSizeList,
                "fake": fake,
                "deprecated": deprecated,
            }
    
    jobLabel: MetaOapg.properties.jobLabel
    machineModel: MetaOapg.properties.machineModel
    environment: 'HardwareEnvironment'
    taint: MetaOapg.properties.taint
    vendor: 'HardwareVendor'
    name: MetaOapg.properties.name
    label: MetaOapg.properties.label
    family: 'InferenceHardware'
    group: 'HardwareGroup'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineModel"]) -> MetaOapg.properties.machineModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'HardwareGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'HardwareVendor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["family"]) -> 'InferenceHardware': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taint"]) -> MetaOapg.properties.taint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobLabel"]) -> MetaOapg.properties.jobLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> 'HardwareEnvironment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateTime"]) -> MetaOapg.properties.updateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageDistribution"]) -> MetaOapg.properties.imageDistribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageRepository"]) -> MetaOapg.properties.imageRepository: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["future"]) -> MetaOapg.properties.future: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultBatchSizeList"]) -> MetaOapg.properties.defaultBatchSizeList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fake"]) -> MetaOapg.properties.fake: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deprecated"]) -> MetaOapg.properties.deprecated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "label", "machineModel", "group", "vendor", "family", "taint", "jobLabel", "environment", "updateTime", "creationTime", "id", "deleted", "imageDistribution", "imageRepository", "future", "defaultBatchSizeList", "fake", "deprecated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineModel"]) -> MetaOapg.properties.machineModel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> 'HardwareGroup': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> 'HardwareVendor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["family"]) -> 'InferenceHardware': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taint"]) -> MetaOapg.properties.taint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobLabel"]) -> MetaOapg.properties.jobLabel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> 'HardwareEnvironment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateTime"]) -> typing.Union[MetaOapg.properties.updateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageDistribution"]) -> typing.Union[MetaOapg.properties.imageDistribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageRepository"]) -> typing.Union[MetaOapg.properties.imageRepository, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["future"]) -> typing.Union[MetaOapg.properties.future, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultBatchSizeList"]) -> typing.Union[MetaOapg.properties.defaultBatchSizeList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fake"]) -> typing.Union[MetaOapg.properties.fake, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deprecated"]) -> typing.Union[MetaOapg.properties.deprecated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "label", "machineModel", "group", "vendor", "family", "taint", "jobLabel", "environment", "updateTime", "creationTime", "id", "deleted", "imageDistribution", "imageRepository", "future", "defaultBatchSizeList", "fake", "deprecated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobLabel: typing.Union[MetaOapg.properties.jobLabel, str, ],
        machineModel: typing.Union[MetaOapg.properties.machineModel, str, ],
        environment: 'HardwareEnvironment',
        taint: typing.Union[MetaOapg.properties.taint, str, ],
        vendor: 'HardwareVendor',
        name: typing.Union[MetaOapg.properties.name, str, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        family: 'InferenceHardware',
        group: 'HardwareGroup',
        updateTime: typing.Union[MetaOapg.properties.updateTime, str, datetime, schemas.Unset] = schemas.unset,
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        imageDistribution: typing.Union[MetaOapg.properties.imageDistribution, str, schemas.Unset] = schemas.unset,
        imageRepository: typing.Union[MetaOapg.properties.imageRepository, str, schemas.Unset] = schemas.unset,
        future: typing.Union[MetaOapg.properties.future, bool, schemas.Unset] = schemas.unset,
        defaultBatchSizeList: typing.Union[MetaOapg.properties.defaultBatchSizeList, list, tuple, schemas.Unset] = schemas.unset,
        fake: typing.Union[MetaOapg.properties.fake, bool, schemas.Unset] = schemas.unset,
        deprecated: typing.Union[MetaOapg.properties.deprecated, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Hardware':
        return super().__new__(
            cls,
            *_args,
            jobLabel=jobLabel,
            machineModel=machineModel,
            environment=environment,
            taint=taint,
            vendor=vendor,
            name=name,
            label=label,
            family=family,
            group=group,
            updateTime=updateTime,
            creationTime=creationTime,
            id=id,
            deleted=deleted,
            imageDistribution=imageDistribution,
            imageRepository=imageRepository,
            future=future,
            defaultBatchSizeList=defaultBatchSizeList,
            fake=fake,
            deprecated=deprecated,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.hardware_environment import HardwareEnvironment
from deci_platform_client.model.hardware_group import HardwareGroup
from deci_platform_client.model.hardware_vendor import HardwareVendor
from deci_platform_client.model.inference_hardware import InferenceHardware
