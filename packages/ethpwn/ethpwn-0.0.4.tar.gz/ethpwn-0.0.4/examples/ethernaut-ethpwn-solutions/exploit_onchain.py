#!/usr/bin/env python3

import os
import time
from ethpwn import *
import argparse


parser = argparse.ArgumentParser()
parser.add_argument('exploit_contract_source', type=str)
parser.add_argument('proxy_addr', type=str)
parser.add_argument('--force', action='store_true', help="Force the exploit even if estimage_gas says it will fail")
parser.add_argument('--value', type=parse_wei, default=0, help="Value to send with the exploit transaction")
parser.add_argument('-n', '--dry-run', action='store_true', help="Don't actually send the exploit transaction, only parse the contracts")
parser.add_argument('--wallet', type=str, default=None, help="Wallet to use for the exploit transaction")
ARGS = parser.parse_args()

context.log_level = 'DEBUG'

MY_WALLET = get_wallet(ARGS.wallet)
assert MY_WALLET is not None
context.default_from_addr = MY_WALLET.address
context.default_signing_key = MY_WALLET.private_key

solidity_includes = os.path.dirname(os.path.abspath(__file__)) + '/__solidity_includes/'
CONTRACT_METADATA.compiler.add_import_remappings({
    'openzeppelin-contracts-08': solidity_includes + 'openzeppelin-contracts-0.8/contracts',
})


CONTRACT_METADATA.compile_solidity_files([ARGS.exploit_contract_source])

if not ARGS.dry_run:
    with CONTRACT_METADATA['Exploit'].deploy_destructible(ARGS.proxy_addr, force=ARGS.force) as (tx_hash, target):
        print(f"Exploit contract is at {target.address}")
        time.sleep(1)
        transact(target.functions.exploit(), value=ARGS.value, force=ARGS.force)
else:
    for file_name, contract_name, metadata in CONTRACT_METADATA.all_contracts():
        print(f"{file_name}:{contract_name}")
