# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'CertificatesResult',
    'AwaitableCertificatesResult',
    'certificates',
    'certificates_output',
]

@pulumi.output_type
class CertificatesResult:
    """
    A collection of values returned by Certificates.
    """
    def __init__(__self__, certificate_name=None, certificates=None, id=None, ids=None, name_regex=None, output_file=None, project_name=None, tags=None, total_count=None):
        if certificate_name and not isinstance(certificate_name, str):
            raise TypeError("Expected argument 'certificate_name' to be a str")
        pulumi.set(__self__, "certificate_name", certificate_name)
        if certificates and not isinstance(certificates, list):
            raise TypeError("Expected argument 'certificates' to be a list")
        pulumi.set(__self__, "certificates", certificates)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if name_regex and not isinstance(name_regex, str):
            raise TypeError("Expected argument 'name_regex' to be a str")
        pulumi.set(__self__, "name_regex", name_regex)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if total_count and not isinstance(total_count, int):
            raise TypeError("Expected argument 'total_count' to be a int")
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[str]:
        """
        The name of the Certificate.
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter
    def certificates(self) -> Sequence['outputs.CertificatesCertificateResult']:
        """
        The collection of Certificate query.
        """
        return pulumi.get(self, "certificates")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="nameRegex")
    def name_regex(self) -> Optional[str]:
        return pulumi.get(self, "name_regex")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        """
        The ProjectName of the Certificate.
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CertificatesTagResult']]:
        """
        Tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        The total count of Certificate query.
        """
        return pulumi.get(self, "total_count")


class AwaitableCertificatesResult(CertificatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CertificatesResult(
            certificate_name=self.certificate_name,
            certificates=self.certificates,
            id=self.id,
            ids=self.ids,
            name_regex=self.name_regex,
            output_file=self.output_file,
            project_name=self.project_name,
            tags=self.tags,
            total_count=self.total_count)


def certificates(certificate_name: Optional[str] = None,
                 ids: Optional[Sequence[str]] = None,
                 name_regex: Optional[str] = None,
                 output_file: Optional[str] = None,
                 project_name: Optional[str] = None,
                 tags: Optional[Sequence[pulumi.InputType['CertificatesTagArgs']]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCertificatesResult:
    """
    Use this data source to query detailed information of certificates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.certificates(ids=["cert-274scdwqufwg07fap8u5fu8pi"])
    ```


    :param str certificate_name: The name of the Certificate.
    :param Sequence[str] ids: The list of Certificate IDs.
    :param str name_regex: The Name Regex of Certificate.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of Certificate.
    :param Sequence[pulumi.InputType['CertificatesTagArgs']] tags: Tags.
    """
    __args__ = dict()
    __args__['certificateName'] = certificate_name
    __args__['ids'] = ids
    __args__['nameRegex'] = name_regex
    __args__['outputFile'] = output_file
    __args__['projectName'] = project_name
    __args__['tags'] = tags
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('volcengine:clb/certificates:Certificates', __args__, opts=opts, typ=CertificatesResult).value

    return AwaitableCertificatesResult(
        certificate_name=__ret__.certificate_name,
        certificates=__ret__.certificates,
        id=__ret__.id,
        ids=__ret__.ids,
        name_regex=__ret__.name_regex,
        output_file=__ret__.output_file,
        project_name=__ret__.project_name,
        tags=__ret__.tags,
        total_count=__ret__.total_count)


@_utilities.lift_output_func(certificates)
def certificates_output(certificate_name: Optional[pulumi.Input[Optional[str]]] = None,
                        ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                        output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        project_name: Optional[pulumi.Input[Optional[str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['CertificatesTagArgs']]]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[CertificatesResult]:
    """
    Use this data source to query detailed information of certificates
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.certificates(ids=["cert-274scdwqufwg07fap8u5fu8pi"])
    ```


    :param str certificate_name: The name of the Certificate.
    :param Sequence[str] ids: The list of Certificate IDs.
    :param str name_regex: The Name Regex of Certificate.
    :param str output_file: File name where to save data source results.
    :param str project_name: The ProjectName of Certificate.
    :param Sequence[pulumi.InputType['CertificatesTagArgs']] tags: Tags.
    """
    ...
