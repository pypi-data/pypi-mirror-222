# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RulesResult',
    'AwaitableRulesResult',
    'rules',
    'rules_output',
]

@pulumi.output_type
class RulesResult:
    """
    A collection of values returned by Rules.
    """
    def __init__(__self__, id=None, ids=None, listener_id=None, output_file=None, rules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if output_file and not isinstance(output_file, str):
            raise TypeError("Expected argument 'output_file' to be a str")
        pulumi.set(__self__, "output_file", output_file)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="outputFile")
    def output_file(self) -> Optional[str]:
        return pulumi.get(self, "output_file")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.RulesRuleResult']:
        """
        The collection of Rule query.
        """
        return pulumi.get(self, "rules")


class AwaitableRulesResult(RulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return RulesResult(
            id=self.id,
            ids=self.ids,
            listener_id=self.listener_id,
            output_file=self.output_file,
            rules=self.rules)


def rules(ids: Optional[Sequence[str]] = None,
          listener_id: Optional[str] = None,
          output_file: Optional[str] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableRulesResult:
    """
    Use this data source to query detailed information of clb rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.rules(listener_id="lsn-273ywvnmiu70g7fap8u2xzg9d",
        ids=["rule-273z9jo9v3mrk7fap8sq8v5x7"])
    pulumi.export("data", default)
    ```


    :param Sequence[str] ids: A list of Rule IDs.
    :param str listener_id: The Id of listener.
    :param str output_file: File name where to save data source results.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['listenerId'] = listener_id
    __args__['outputFile'] = output_file
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('volcengine:clb/rules:Rules', __args__, opts=opts, typ=RulesResult).value

    return AwaitableRulesResult(
        id=__ret__.id,
        ids=__ret__.ids,
        listener_id=__ret__.listener_id,
        output_file=__ret__.output_file,
        rules=__ret__.rules)


@_utilities.lift_output_func(rules)
def rules_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 output_file: Optional[pulumi.Input[Optional[str]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[RulesResult]:
    """
    Use this data source to query detailed information of clb rules
    ## Example Usage

    ```python
    import pulumi
    import pulumi_volcengine as volcengine

    default = volcengine.clb.rules(listener_id="lsn-273ywvnmiu70g7fap8u2xzg9d",
        ids=["rule-273z9jo9v3mrk7fap8sq8v5x7"])
    pulumi.export("data", default)
    ```


    :param Sequence[str] ids: A list of Rule IDs.
    :param str listener_id: The Id of listener.
    :param str output_file: File name where to save data source results.
    """
    ...
