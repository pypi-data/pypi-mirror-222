# -*- coding: utf-8 -*-
# Copyright (C) 2023 Benjamin Thomas Schwertfeger
# GitHub: https://github.com/btschwertfeger
#

[build-system]
requires = ["setuptools>=65.5.1", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-kraken-sdk"
dynamic = ["version"]
authors = [
  { name = "Benjamin Thomas Schwertfeger", email = "contact@b-schwertfeger.de" },
]
description = "Collection of REST and websocket clients to interact with the Kraken cryptocurrency exchange."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.7"
dependencies = ["asyncio>=3.4", "requests", "websockets"]
keywords = ["crypto", "trading", "kraken", "exchange", "api"]
classifiers = [
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Office/Business :: Financial",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Utilities",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Framework :: AsyncIO",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Unix",
]

[project.urls]
"Homepage" = "https://github.com/btschwertfeger/python-kraken-sdk"
"Bug Tracker" = "https://github.com/btschwertfeger/python-kraken-sdk/issues"
"Documentation" = "https://python-kraken-sdk.readthedocs.io/en/stable/"

[project.optional-dependencies]
dev = [
  # building
  "build",
  # testing
  "pytest",
  "pytest-cov",
  # documentation
  "sphinx",
  "sphinx-rtd-theme",
  # formatting
  "black",
  # typing
  "mypy",
  "types-requests",
  # linting
  "ruff",
]
examples = ["matplotlib"]

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
include = ["kraken*"]
exclude = ["docs*", "tests*", "examples*", ".env"]

[tool.setuptools_scm]
write_to = "kraken/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"

# ========= T E S T I N G =====================================================
#
[tool.pytest]
junit_family = "xunit2"
testpaths = ["tests"]

[tool.pytest.ini_options]
markers = [
  "wip: Used to run a specific test by hand.",
  "spot: … Spot endpoint.",
  "spot_auth: … authenticated Spot endpoint.",
  "spot_trade: … Spot Trade endpoint.",
  "spot_user: … Spot User endpoint.",
  "spot_market: … Spot Market endpoint.",
  "spot_funding: … Spot Funding endpoint.",
  "spot_staking: … Spot Staking endpoint.",
  "spot_websocket: … Spot Websocket clients (v1 + v2) + Spot Orderbook client.",
  "spot_websocket_v1: … Spot Websocket client v1.",
  "spot_websocket_v2: … Spot Websocket client v2.",
  "spot_orderbook: … Spot Orderbook client.",
  "futures: … Futures endpoint.",
  "futures_auth: … authenticated Futures endpoint.",
  "futures_market: … Futures Market endpoint.",
  "futures_user: … Futures User endpoint.",
  "futures_trade: … Futures Trade endpoint.",
  "futures_funding: … Futures Funding endpoint.",
  "futures_websocket: … Futures Websocket endpoint.",
]

[tool.coverage.run]
source = ["kraken"]
omit = ["*tests*"]

[tool.coverage.report]
exclude_lines = ["coverage: disable", "if TYPE_CHECKING:"]
skip_empty = true

# ========= T Y P I N G =======================================================
#
[tool.mypy]
python_version = "3.7"
# junit_xml = "mypy.xml"
files = ["kraken/**/*.py"]
exclude = ["tests/*/*.py"]

# Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# # Untyped definitions and calls
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false

# None and Optional handling
implicit_optional = true
strict_optional = false

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

# Suppressing errors
ignore_errors = false

# Configuring error messages
show_error_context = true
show_column_numbers = true
hide_error_codes = false
pretty = true
color_output = true
show_absolute_path = true
ignore_missing_imports = true

# ========= L I N T I N G ======================================================
#
[tool.ruff]
# src = ["kraken"]

# https://beta.ruff.rs/docs/rules/
# https://beta.ruff.rs/docs/settings/
select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # blind-except
  "C4",    # flake8-comprehensions
  "COM",   # flake8-commas
  "E",     # pycodestyle
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  "FLY",   # flynt
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-string-concat
  "N",     # PEP8 naming
  "PERF",  # Perflint # maybe
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # Pylint
  "PT",    # flake8-pytest-style
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
  "TID",   # flake8-tidy-imports
  # "ARG", # flake8-unused-arguments # todo: after the exceptions were updated (fix in v2.0.0)
  # "ERA", # eradicate # !(commented-out code)
  # "FBT", # boolean trap # todo: fix in v2.0.0
  # "FIX", # flake8-fixme # !
  # "PTH", # flake8-use-pathlib # maybe
  # "TD",  # flake8-todos # !
  # "TRY", # tryceratops # todo: during update of the exceptions (fix in v2.0.0)
]
fixable = ["I", "C4", "Q", "PT", "ICN", "COM", "RSE", "PT", "FA"]

ignore = [
  "B019",    # use of lru_cache or cache
  "PERF203", # try-except in loop (todo: check that from time to time)
  "PLR2004", # magic value in comparison
]

respect-gitignore = true
exclude = []

line-length = 130
cache-dir = ".cache/ruff"
task-tags = ["todo", "TODO"]

[tool.ruff.per-file-ignores]
"setup.py" = ["F401"] # unused import
"kraken/exceptions/__init__.py" = [
  "N818", # Exception name should be named with an Error suffix # todo
]
"examples/*.py" = [
  "ASYNC101", # no open call on async function
  "BLE001",   # blind exception
  "S101",     # assert use
  "S110",     # try-catch-pass without logging
  "T201",     # print
]
"tests/*.py" = [
  "ASYNC101", # no open call on async function
  "E501",     # Line to long
  "F841",     # unused variable
  "N802",     # PEP8 naming
  "S101",     # assert use
  "S106",     # hardcoded password
  "S110",     # try-except-pass without logging
  "S311",     # pseudo-random-generator
  "SLF001",   # private member access
  "TID252",   # ban relative imports
]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-bandit]
check-typed-exception = true

[tool.ruff.isort]
case-sensitive = true

[tool.ruff.pep8-naming]
ignore-names = [
  "i",
  "j",
  "k",
  "_",
  "fromAccount",
  "toAccount",
  "fromUser",
  "toUser",
  "sourceWallet",
  "lastTime",
  "lastFillTime",
  "to",
  "maxLeverage",
  "pnlPreference",
  "cliOrdId",
  "cliOrdIds",
  "orderId",
  "orderIds",
  "stopPrice",
  "limitPrice",
  "orderType",
  "reduceOnly",
  "triggerSignal",
  "EXCEPTION_ASSIGNMENT",
  "trailingStopDeviationUnit",
  "trailingStopMaxDeviation",
  "subaccountUid",
  "ConnectSpotWebsocket",
]

[tool.ruff.pylint]
max-args = 8
max-branches = 10
