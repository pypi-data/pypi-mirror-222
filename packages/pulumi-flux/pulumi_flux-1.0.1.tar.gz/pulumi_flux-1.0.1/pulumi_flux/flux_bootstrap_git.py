# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FluxBootstrapGitArgs', 'FluxBootstrapGit']

@pulumi.input_type
class FluxBootstrapGitArgs:
    def __init__(__self__, *,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 components_extras: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_secret_creation: Optional[pulumi.Input[bool]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 kustomization_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse_submodules: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']] = None,
                 toleration_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 watch_all_namespaces: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a FluxBootstrapGit resource.
        :param pulumi.Input[str] cluster_domain: The internal cluster domain. Defaults to `cluster.local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components_extras: List of extra components to include in the install manifests.
        :param pulumi.Input[bool] disable_secret_creation: Use the existing secret for flux controller and don't create one from bootstrap
        :param pulumi.Input[str] image_pull_secret: Kubernetes secret name used for pulling the toolkit images from a private registry.
        :param pulumi.Input[str] interval: Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        :param pulumi.Input[str] kustomization_override: Kustomization to override configuration set by default.
        :param pulumi.Input[str] log_level: Log level for toolkit components. Defaults to `info`.
        :param pulumi.Input[str] namespace: The namespace scope for install manifests. Defaults to `flux-system`.
        :param pulumi.Input[bool] network_policy: Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        :param pulumi.Input[str] path: Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        :param pulumi.Input[bool] recurse_submodules: Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        :param pulumi.Input[str] registry: Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        :param pulumi.Input[str] secret_name: Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] toleration_keys: List of toleration keys used to schedule the components pods onto nodes with matching taints.
        :param pulumi.Input[str] version: Flux version. Defaults to `v2.0.1`.
        :param pulumi.Input[bool] watch_all_namespaces: If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if components_extras is not None:
            pulumi.set(__self__, "components_extras", components_extras)
        if disable_secret_creation is not None:
            pulumi.set(__self__, "disable_secret_creation", disable_secret_creation)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if kustomization_override is not None:
            pulumi.set(__self__, "kustomization_override", kustomization_override)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if recurse_submodules is not None:
            pulumi.set(__self__, "recurse_submodules", recurse_submodules)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if toleration_keys is not None:
            pulumi.set(__self__, "toleration_keys", toleration_keys)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if watch_all_namespaces is not None:
            pulumi.set(__self__, "watch_all_namespaces", watch_all_namespaces)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The internal cluster domain. Defaults to `cluster.local`
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter(name="componentsExtras")
    def components_extras(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of extra components to include in the install manifests.
        """
        return pulumi.get(self, "components_extras")

    @components_extras.setter
    def components_extras(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "components_extras", value)

    @property
    @pulumi.getter(name="disableSecretCreation")
    def disable_secret_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the existing secret for flux controller and don't create one from bootstrap
        """
        return pulumi.get(self, "disable_secret_creation")

    @disable_secret_creation.setter
    def disable_secret_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_secret_creation", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes secret name used for pulling the toolkit images from a private registry.
        """
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="kustomizationOverride")
    def kustomization_override(self) -> Optional[pulumi.Input[str]]:
        """
        Kustomization to override configuration set by default.
        """
        return pulumi.get(self, "kustomization_override")

    @kustomization_override.setter
    def kustomization_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kustomization_override", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level for toolkit components. Defaults to `info`.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace scope for install manifests. Defaults to `flux-system`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="recurseSubmodules")
    def recurse_submodules(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        """
        return pulumi.get(self, "recurse_submodules")

    @recurse_submodules.setter
    def recurse_submodules(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse_submodules", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="tolerationKeys")
    def toleration_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of toleration keys used to schedule the components pods onto nodes with matching taints.
        """
        return pulumi.get(self, "toleration_keys")

    @toleration_keys.setter
    def toleration_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "toleration_keys", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Flux version. Defaults to `v2.0.1`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="watchAllNamespaces")
    def watch_all_namespaces(self) -> Optional[pulumi.Input[bool]]:
        """
        If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        return pulumi.get(self, "watch_all_namespaces")

    @watch_all_namespaces.setter
    def watch_all_namespaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "watch_all_namespaces", value)


@pulumi.input_type
class _FluxBootstrapGitState:
    def __init__(__self__, *,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 components_extras: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_secret_creation: Optional[pulumi.Input[bool]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 kustomization_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse_submodules: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 repository_files: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']] = None,
                 toleration_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 watch_all_namespaces: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering FluxBootstrapGit resources.
        :param pulumi.Input[str] cluster_domain: The internal cluster domain. Defaults to `cluster.local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components_extras: List of extra components to include in the install manifests.
        :param pulumi.Input[bool] disable_secret_creation: Use the existing secret for flux controller and don't create one from bootstrap
        :param pulumi.Input[str] image_pull_secret: Kubernetes secret name used for pulling the toolkit images from a private registry.
        :param pulumi.Input[str] interval: Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        :param pulumi.Input[str] kustomization_override: Kustomization to override configuration set by default.
        :param pulumi.Input[str] log_level: Log level for toolkit components. Defaults to `info`.
        :param pulumi.Input[str] namespace: The namespace scope for install manifests. Defaults to `flux-system`.
        :param pulumi.Input[bool] network_policy: Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        :param pulumi.Input[str] path: Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        :param pulumi.Input[bool] recurse_submodules: Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        :param pulumi.Input[str] registry: Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] repository_files: Git repository files created and managed by the provider.
        :param pulumi.Input[str] secret_name: Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] toleration_keys: List of toleration keys used to schedule the components pods onto nodes with matching taints.
        :param pulumi.Input[str] version: Flux version. Defaults to `v2.0.1`.
        :param pulumi.Input[bool] watch_all_namespaces: If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        if cluster_domain is not None:
            pulumi.set(__self__, "cluster_domain", cluster_domain)
        if components is not None:
            pulumi.set(__self__, "components", components)
        if components_extras is not None:
            pulumi.set(__self__, "components_extras", components_extras)
        if disable_secret_creation is not None:
            pulumi.set(__self__, "disable_secret_creation", disable_secret_creation)
        if image_pull_secret is not None:
            pulumi.set(__self__, "image_pull_secret", image_pull_secret)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if kustomization_override is not None:
            pulumi.set(__self__, "kustomization_override", kustomization_override)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if network_policy is not None:
            pulumi.set(__self__, "network_policy", network_policy)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if recurse_submodules is not None:
            pulumi.set(__self__, "recurse_submodules", recurse_submodules)
        if registry is not None:
            pulumi.set(__self__, "registry", registry)
        if repository_files is not None:
            pulumi.set(__self__, "repository_files", repository_files)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if toleration_keys is not None:
            pulumi.set(__self__, "toleration_keys", toleration_keys)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if watch_all_namespaces is not None:
            pulumi.set(__self__, "watch_all_namespaces", watch_all_namespaces)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The internal cluster domain. Defaults to `cluster.local`
        """
        return pulumi.get(self, "cluster_domain")

    @cluster_domain.setter
    def cluster_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_domain", value)

    @property
    @pulumi.getter
    def components(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        """
        return pulumi.get(self, "components")

    @components.setter
    def components(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "components", value)

    @property
    @pulumi.getter(name="componentsExtras")
    def components_extras(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of extra components to include in the install manifests.
        """
        return pulumi.get(self, "components_extras")

    @components_extras.setter
    def components_extras(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "components_extras", value)

    @property
    @pulumi.getter(name="disableSecretCreation")
    def disable_secret_creation(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the existing secret for flux controller and don't create one from bootstrap
        """
        return pulumi.get(self, "disable_secret_creation")

    @disable_secret_creation.setter
    def disable_secret_creation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_secret_creation", value)

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes secret name used for pulling the toolkit images from a private registry.
        """
        return pulumi.get(self, "image_pull_secret")

    @image_pull_secret.setter
    def image_pull_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_pull_secret", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="kustomizationOverride")
    def kustomization_override(self) -> Optional[pulumi.Input[str]]:
        """
        Kustomization to override configuration set by default.
        """
        return pulumi.get(self, "kustomization_override")

    @kustomization_override.setter
    def kustomization_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kustomization_override", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level for toolkit components. Defaults to `info`.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace scope for install manifests. Defaults to `flux-system`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        """
        return pulumi.get(self, "network_policy")

    @network_policy.setter
    def network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "network_policy", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="recurseSubmodules")
    def recurse_submodules(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        """
        return pulumi.get(self, "recurse_submodules")

    @recurse_submodules.setter
    def recurse_submodules(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recurse_submodules", value)

    @property
    @pulumi.getter
    def registry(self) -> Optional[pulumi.Input[str]]:
        """
        Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        """
        return pulumi.get(self, "registry")

    @registry.setter
    def registry(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry", value)

    @property
    @pulumi.getter(name="repositoryFiles")
    def repository_files(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Git repository files created and managed by the provider.
        """
        return pulumi.get(self, "repository_files")

    @repository_files.setter
    def repository_files(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "repository_files", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['FluxBootstrapGitTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter(name="tolerationKeys")
    def toleration_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of toleration keys used to schedule the components pods onto nodes with matching taints.
        """
        return pulumi.get(self, "toleration_keys")

    @toleration_keys.setter
    def toleration_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "toleration_keys", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Flux version. Defaults to `v2.0.1`.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="watchAllNamespaces")
    def watch_all_namespaces(self) -> Optional[pulumi.Input[bool]]:
        """
        If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        return pulumi.get(self, "watch_all_namespaces")

    @watch_all_namespaces.setter
    def watch_all_namespaces(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "watch_all_namespaces", value)


class FluxBootstrapGit(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 components_extras: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_secret_creation: Optional[pulumi.Input[bool]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 kustomization_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse_submodules: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['FluxBootstrapGitTimeoutsArgs']]] = None,
                 toleration_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 watch_all_namespaces: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Commits Flux components to a Git repository and configures a Kubernetes cluster to synchronize with the same Git repository.

        > **NOTE:** Checkout the GitHub bootstrap guide for a detailed step by step guide.

        ## Example Usage

        Get Kubernetes credentials from a kubeconfig file. The current context set in the kubeconfig file will be used by default.

        ```python
        import pulumi
        import pulumi_flux as flux

        this = flux.FluxBootstrapGit("this", path="clusters/my-cluster")
        ```

        ## Import

        Existing Flux installations can be imported by passing the namespace where Flux is installed.

        ```sh
         $ pulumi import flux:index/fluxBootstrapGit:FluxBootstrapGit this flux-system
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_domain: The internal cluster domain. Defaults to `cluster.local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components_extras: List of extra components to include in the install manifests.
        :param pulumi.Input[bool] disable_secret_creation: Use the existing secret for flux controller and don't create one from bootstrap
        :param pulumi.Input[str] image_pull_secret: Kubernetes secret name used for pulling the toolkit images from a private registry.
        :param pulumi.Input[str] interval: Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        :param pulumi.Input[str] kustomization_override: Kustomization to override configuration set by default.
        :param pulumi.Input[str] log_level: Log level for toolkit components. Defaults to `info`.
        :param pulumi.Input[str] namespace: The namespace scope for install manifests. Defaults to `flux-system`.
        :param pulumi.Input[bool] network_policy: Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        :param pulumi.Input[str] path: Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        :param pulumi.Input[bool] recurse_submodules: Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        :param pulumi.Input[str] registry: Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        :param pulumi.Input[str] secret_name: Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] toleration_keys: List of toleration keys used to schedule the components pods onto nodes with matching taints.
        :param pulumi.Input[str] version: Flux version. Defaults to `v2.0.1`.
        :param pulumi.Input[bool] watch_all_namespaces: If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FluxBootstrapGitArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Commits Flux components to a Git repository and configures a Kubernetes cluster to synchronize with the same Git repository.

        > **NOTE:** Checkout the GitHub bootstrap guide for a detailed step by step guide.

        ## Example Usage

        Get Kubernetes credentials from a kubeconfig file. The current context set in the kubeconfig file will be used by default.

        ```python
        import pulumi
        import pulumi_flux as flux

        this = flux.FluxBootstrapGit("this", path="clusters/my-cluster")
        ```

        ## Import

        Existing Flux installations can be imported by passing the namespace where Flux is installed.

        ```sh
         $ pulumi import flux:index/fluxBootstrapGit:FluxBootstrapGit this flux-system
        ```

        :param str resource_name: The name of the resource.
        :param FluxBootstrapGitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FluxBootstrapGitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_domain: Optional[pulumi.Input[str]] = None,
                 components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 components_extras: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_secret_creation: Optional[pulumi.Input[bool]] = None,
                 image_pull_secret: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 kustomization_override: Optional[pulumi.Input[str]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 network_policy: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 recurse_submodules: Optional[pulumi.Input[bool]] = None,
                 registry: Optional[pulumi.Input[str]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['FluxBootstrapGitTimeoutsArgs']]] = None,
                 toleration_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 watch_all_namespaces: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FluxBootstrapGitArgs.__new__(FluxBootstrapGitArgs)

            __props__.__dict__["cluster_domain"] = cluster_domain
            __props__.__dict__["components"] = components
            __props__.__dict__["components_extras"] = components_extras
            __props__.__dict__["disable_secret_creation"] = disable_secret_creation
            __props__.__dict__["image_pull_secret"] = image_pull_secret
            __props__.__dict__["interval"] = interval
            __props__.__dict__["kustomization_override"] = kustomization_override
            __props__.__dict__["log_level"] = log_level
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["network_policy"] = network_policy
            __props__.__dict__["path"] = path
            __props__.__dict__["recurse_submodules"] = recurse_submodules
            __props__.__dict__["registry"] = registry
            __props__.__dict__["secret_name"] = secret_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["toleration_keys"] = toleration_keys
            __props__.__dict__["version"] = version
            __props__.__dict__["watch_all_namespaces"] = watch_all_namespaces
            __props__.__dict__["repository_files"] = None
        super(FluxBootstrapGit, __self__).__init__(
            'flux:index/fluxBootstrapGit:FluxBootstrapGit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_domain: Optional[pulumi.Input[str]] = None,
            components: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            components_extras: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            disable_secret_creation: Optional[pulumi.Input[bool]] = None,
            image_pull_secret: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            kustomization_override: Optional[pulumi.Input[str]] = None,
            log_level: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            network_policy: Optional[pulumi.Input[bool]] = None,
            path: Optional[pulumi.Input[str]] = None,
            recurse_submodules: Optional[pulumi.Input[bool]] = None,
            registry: Optional[pulumi.Input[str]] = None,
            repository_files: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            secret_name: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['FluxBootstrapGitTimeoutsArgs']]] = None,
            toleration_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            version: Optional[pulumi.Input[str]] = None,
            watch_all_namespaces: Optional[pulumi.Input[bool]] = None) -> 'FluxBootstrapGit':
        """
        Get an existing FluxBootstrapGit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_domain: The internal cluster domain. Defaults to `cluster.local`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components: Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] components_extras: List of extra components to include in the install manifests.
        :param pulumi.Input[bool] disable_secret_creation: Use the existing secret for flux controller and don't create one from bootstrap
        :param pulumi.Input[str] image_pull_secret: Kubernetes secret name used for pulling the toolkit images from a private registry.
        :param pulumi.Input[str] interval: Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        :param pulumi.Input[str] kustomization_override: Kustomization to override configuration set by default.
        :param pulumi.Input[str] log_level: Log level for toolkit components. Defaults to `info`.
        :param pulumi.Input[str] namespace: The namespace scope for install manifests. Defaults to `flux-system`.
        :param pulumi.Input[bool] network_policy: Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        :param pulumi.Input[str] path: Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        :param pulumi.Input[bool] recurse_submodules: Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        :param pulumi.Input[str] registry: Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] repository_files: Git repository files created and managed by the provider.
        :param pulumi.Input[str] secret_name: Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] toleration_keys: List of toleration keys used to schedule the components pods onto nodes with matching taints.
        :param pulumi.Input[str] version: Flux version. Defaults to `v2.0.1`.
        :param pulumi.Input[bool] watch_all_namespaces: If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FluxBootstrapGitState.__new__(_FluxBootstrapGitState)

        __props__.__dict__["cluster_domain"] = cluster_domain
        __props__.__dict__["components"] = components
        __props__.__dict__["components_extras"] = components_extras
        __props__.__dict__["disable_secret_creation"] = disable_secret_creation
        __props__.__dict__["image_pull_secret"] = image_pull_secret
        __props__.__dict__["interval"] = interval
        __props__.__dict__["kustomization_override"] = kustomization_override
        __props__.__dict__["log_level"] = log_level
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["network_policy"] = network_policy
        __props__.__dict__["path"] = path
        __props__.__dict__["recurse_submodules"] = recurse_submodules
        __props__.__dict__["registry"] = registry
        __props__.__dict__["repository_files"] = repository_files
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["toleration_keys"] = toleration_keys
        __props__.__dict__["version"] = version
        __props__.__dict__["watch_all_namespaces"] = watch_all_namespaces
        return FluxBootstrapGit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterDomain")
    def cluster_domain(self) -> pulumi.Output[str]:
        """
        The internal cluster domain. Defaults to `cluster.local`
        """
        return pulumi.get(self, "cluster_domain")

    @property
    @pulumi.getter
    def components(self) -> pulumi.Output[Sequence[str]]:
        """
        Toolkit components to include in the install manifests. Defaults to `[source-controller kustomize-controller helm-controller notification-controller]`
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="componentsExtras")
    def components_extras(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of extra components to include in the install manifests.
        """
        return pulumi.get(self, "components_extras")

    @property
    @pulumi.getter(name="disableSecretCreation")
    def disable_secret_creation(self) -> pulumi.Output[Optional[bool]]:
        """
        Use the existing secret for flux controller and don't create one from bootstrap
        """
        return pulumi.get(self, "disable_secret_creation")

    @property
    @pulumi.getter(name="imagePullSecret")
    def image_pull_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Kubernetes secret name used for pulling the toolkit images from a private registry.
        """
        return pulumi.get(self, "image_pull_secret")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[str]:
        """
        Interval at which to reconcile from bootstrap repository. Defaults to `1m0s`.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="kustomizationOverride")
    def kustomization_override(self) -> pulumi.Output[Optional[str]]:
        """
        Kustomization to override configuration set by default.
        """
        return pulumi.get(self, "kustomization_override")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[str]:
        """
        Log level for toolkit components. Defaults to `info`.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The namespace scope for install manifests. Defaults to `flux-system`.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="networkPolicy")
    def network_policy(self) -> pulumi.Output[bool]:
        """
        Deny ingress access to the toolkit controllers from other namespaces using network policies. Defaults to `true`.
        """
        return pulumi.get(self, "network_policy")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        Path relative to the repository root, when specified the cluster sync will be scoped to this path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="recurseSubmodules")
    def recurse_submodules(self) -> pulumi.Output[Optional[bool]]:
        """
        Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
        """
        return pulumi.get(self, "recurse_submodules")

    @property
    @pulumi.getter
    def registry(self) -> pulumi.Output[str]:
        """
        Container registry where the toolkit images are published. Defaults to `ghcr.io/fluxcd`.
        """
        return pulumi.get(self, "registry")

    @property
    @pulumi.getter(name="repositoryFiles")
    def repository_files(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Git repository files created and managed by the provider.
        """
        return pulumi.get(self, "repository_files")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[str]:
        """
        Name of the secret the sync credentials can be found in or stored to. Defaults to `flux-system`.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.FluxBootstrapGitTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter(name="tolerationKeys")
    def toleration_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of toleration keys used to schedule the components pods onto nodes with matching taints.
        """
        return pulumi.get(self, "toleration_keys")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Flux version. Defaults to `v2.0.1`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="watchAllNamespaces")
    def watch_all_namespaces(self) -> pulumi.Output[bool]:
        """
        If true watch for custom resources in all namespaces. Defaults to `true`.
        """
        return pulumi.get(self, "watch_all_namespaces")

