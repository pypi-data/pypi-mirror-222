name: 'fprime-build-native-scala'
on:
  workflow_call:
    inputs:
      working-directory:
        description: "Working directory to use when running commands"
        required: false
        default: .
        type: string
      build:
        description: "Build command for generating compiled JARs"
        required: false
        default: ./install
        type: string
      output-directory:
        description: "Directory for output of the build"
        required: false
        default: ./bin
        type: string
      test:
        description: "Test command used to generate tracing and prove output"
        required: false
        default: ./test
        type: string
      trace:
        description: "Turn off tracing step"
        required: false
        default: true
        type: boolean
      trace-directory:
        description: "Directory for tracing output"
        required: false
        default: trace/META-INF/native-image
        type: string
jobs:
  build-jars:
    runs-on: "ubuntu-latest"
    name: "Build Standard JARs"
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup Native Image Tools"
        uses: fprime-community/native-images-action@main
      - name: "Building JAR files"
        run: |
          cd ${{ inputs.working-directory }}
          ${{ inputs.build }} ${{ inputs.output-directory }}
        shell: bash
      - name: "Archiving JARs package"
        uses: actions/upload-artifact@v3
        with:
          name: build-jar
          path: ${{ inputs.output-directory }}
          retention-days: 5
          if-no-files-found: error
      - if: ${{ inputs.trace }}
        name: "Tracing JARs via Unit-Tests"
        run: |
          cd ${{ inputs.working-directory }}
          mkdir -p "${{ inputs.trace-directory }}"
          export TRACE_METADATA_DIRECTORY="$( pwd )/${{ inputs.trace-directory }}"
          export PATH="${NATIVE_IMAGE_TOOLS_PATH}:${PATH}"
          ${{ inputs.test }}
          echo -e "Trace output files:\n$( find ${{ inputs.trace-directory }} -name *.json )"
      - name: "Archiving Tracing"
        uses: actions/upload-artifact@v3
        with:
          name: jar-traces
          path: ${{ inputs.trace-directory }}/*.json
          retention-days: 5
          if-no-files-found: error
  build-native-images-linux:
    needs: build-jars
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup Native Image Tools"
        uses: fprime-community/native-images-action@main
      - name: "Download JARs"
        uses: actions/download-artifact@v3
        with:
          name: build-jar
          path: bin
      - name: "Download Tracing"
        uses: actions/download-artifact@v3
        with:
          name: jar-traces
          path: ${{ inputs.trace-directory }}
      - name: "Build Native Images"
        run: |
          cd ${{ inputs.working-directory }}
          export CLASSPATH="${{ inputs.trace-directory }}/../..:${CLASSPATH}"
          $NATIVE_IMAGE_TOOLS_PATH/native-images bin ${{ inputs.tools }}
        shell: bash
      - name: "Archive Native Images"
        uses: actions/upload-artifact@v3
        with:
          name: build-manylinux_2_28_x86_64
          path: bin/*
          retention-days: 5
          if-no-files-found: error
  build-native-images-non-linux:
    needs: build-jars
    strategy:
      matrix:
        runner:
         - runner: "macos-11"
           tag: "macosx_10_9_universal2"
         - runner: "odroid"
           tag: "manylinux_2_28_aarch64"
    runs-on: ${{ matrix.runner.runner }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup Native Image Tools"
        uses: fprime-community/native-images-action@main
      - name: "Download JARs"
        uses: actions/download-artifact@v3
        with:
          name: build-jar
          path: bin
      - name: "Download Tracing"
        uses: actions/download-artifact@v3
        with:
          name: jar-traces
          path: ${{ inputs.trace-directory }}
      - name: "Build Native Images"
        run: |
          cd ${{ inputs.working-directory }}
          export CLASSPATH="${{ inputs.trace-directory }}/../..:${CLASSPATH}"
          $NATIVE_IMAGE_TOOLS_PATH/native-images bin ${{ inputs.tools }}
        shell: bash
      - name: "Archive Native Images"
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.runner.tag }}
          path: bin/*
          retention-days: 5
          if-no-files-found: error
  build-native-wheels:
    needs: [build-native-images-linux, build-native-images-non-linux]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package_tag: ["jar", "manylinux_2_28_x86_64", "manylinux_2_28_aarch64", "macosx_10_9_universal2"]
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Download Package"
        uses: actions/download-artifact@v3
        with:
          name: build-${{ matrix.package_tag }}
          path: ${{ inputs.output-directory }}
      - name: "Install Builder"
        run: pip install fprime-native-images
        shell: bash
      - name: "Run Builder"
        run: |
          fprime-native-packager ${{ inputs.output-directory }} --package-tag ${{ matrix.package_tag }}
        shell: bash
      - name: "Archiving Wheels"
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.package_tag }}
          path: packages/dist/*
          retention-days: 5
          if-no-files-found: error
  publish-native-wheels:
    if: ${{ github.event_name == 'release' }}
    needs: [build-native-wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package_tag: ["jar", "manylinux_2_28_x86_64", "manylinux_2_28_aarch64", "macosx_10_9_universal2"]
    steps:
      - name: "Download Package"
        uses: actions/download-artifact@v3
        with:
          name: wheels-${{ matrix.package_tag }}
          path: dist
      - name: "Install Builder"
        run: pip install twine
        shell: bash
      - name: Publish distributions to TestPyPI
        env:
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_CREDENTIAL }}
        run: |
          twine upload -r testpypi -u "__token__" dist/*
        shell: bash
      - name: Publish distributions to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_CREDENTIAL }}
        run: |
          twine upload -u "__token__" dist/*
        shell: bash
