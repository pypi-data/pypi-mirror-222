# This pyproject.toml is setup so it can be used with or without poetry and also
# supports editable installs (PEP 660) without breaking IDE and linter inspection.

# DEVELOPER INSTALL INSTRUCTIONS (assuming current directory is at the top of the project) :
# Poetry:
#   poetry install --extras dev
# PIP:
#   pip install -e .[dev]

[tool.poetry]
name = "selenium-axe-python"
version = "2.1.12"
description = "Python library to integrate axe and selenium for web accessibility testing."
authors = ["Kimberly Sereduck"]
maintainers = ["Marcel Wilson"]
license = "Mozilla Public License 2.0 (MPL 2.0)"
repository = "https://github.com/bandophahita/selenium-axe-python"
#documentation = ""
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]

# It's possible to add optional dependencies with the poetry CLI tool using:
#   poetry add --optional some_dev_pkg
# This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
# But then you need to remember to manually edit the [tool.poetry.extras] dev section
# and declare the package. This allows `pip install .[dev]` to work as expected
# Poetry users will need to use the `--extras dev` option rather than the `--with dev`
# so we dont have two different sets of package versions to update.

[tool.poetry.dependencies]
python = "^3.7"
selenium = ">=3.0.2"
typing-extensions = "^4.7.1"

# convenience packages for development of selenium-axe-python only
pre-commit = {version = "*", optional = true}
pytest = {version = "*", optional = true}
tox = {version = "*", optional = true}
mypy = {version = "*", optional = true}
black = {version = "*", optional = true}
isort = {version = "*", optional = true}
flake8 = {version = "*", optional = true}
pylint = {version = "*", optional = true}
coverage = {version = "*", optional = true}
pytest-mock = {version = "*", optional = true}
pytest-html = {version = "^3.2.0", optional = true}
py = {version = "^1.11.0", optional = true}
ruff = {version = "*", optional = true}

[tool.poetry.extras]
dev = [
    "pre-commit",
    "pytest",
    "pytest-mock",
    "pytest-html",
    "tox",
    "pylint",
    "mypy",
    "black",
    "isort",
    "flake8",
    "coverage",
    "sphinx",
    "autodoc-pydantic",
    "py",
    "ruff"
]
test = [
    "pytest",
    "pytest-mock",
    "coverage",
]

[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
line_length = 88
multi_line_output = 3
include_trailing_comma = "True"
use_parentheses = "True"
combine_as_imports = "True"
src_paths = "selenium-axe-python"


[tool.ruff]
# Enable the pycodestyle (`E`) and Pyflakes (`F`) rules by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle error
    "W",  # pycodestyle warning
    "F",  # Pyflakes
    "I",  # isort
    "C4",  # flake8-comprehensions
    "TCH",  # type checking
    "RUF",  # ruff specific
    "UP",  # python upgrade
    "A",  # built-ins
    "B",  # bugbear
    #    "ARG",  # unused arguments
    #    "PT",  # Pytest style
    #    "RET", # flake8 return
    #    "SIM", # flake8 simplify
    #    "TD",  #TODOs
    #    "FBT",  # boolean trap
    "ANN",  # annotations
]
ignore = [
    #    "PT003",  # pytest fixture scope implied
    #    "PT004",  # pytest fixture setup doesn't return anything
    "RUF100",  # blanket noqa
    "ANN101",  # missing-type-self
    "ANN102",  # cls 
    #    "ANN401",  # any-type
    "UP035",  # 3.8 still needs the older type annotations for dictionary
    "UP006",
]
# Avoid trying to fix flake8-bugbear (`B`) violations.
#unfixable = ["B"]

# Same as Black.
line-length = 88

exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "docker-compose-dev.yaml",
    "docker-compose-pro.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
]

target-version = "py311"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_axe.py" = ["E501"]

[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

#[tool.ruff.flake8-annotations]
#mypy-init-return = true

[tool.ruff.flake8-annotations]
# ignore returns types for functions that implicity or explicitly only return None
suppress-none-returning = true
allow-star-arg-any = true

[tool.black]
line-length = 88
target-version = ['py311']

# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
)

'''
