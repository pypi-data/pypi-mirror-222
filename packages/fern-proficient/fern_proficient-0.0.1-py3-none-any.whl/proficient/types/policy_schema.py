# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .policy_rule import PolicyRule
from .policy_severity import PolicySeverity
from .policy_status import PolicyStatus
from .policy_triggering_type import PolicyTriggeringType
from .policy_type import PolicyType
from .risk_type import RiskType


class PolicySchema(pydantic.BaseModel):
    canonical: str
    revision: str
    name: str
    severity: PolicySeverity
    risk_type: typing.Optional[RiskType]
    description: typing.Optional[str] = pydantic.Field(
        description='<span style="white-space: nowrap">`<= 1024 characters`</span>'
    )
    recommendation: typing.Optional[str]
    status: PolicyStatus
    predefined: bool
    type: PolicyType
    tags: typing.List[str]
    frameworks: typing.List[str]
    rules: typing.List[PolicyRule]
    auto_approval: bool
    triggering_type: typing.Optional[PolicyTriggeringType]
    id: str
    created_at: str
    created_by: typing.Optional[str]
    user_id: typing.Optional[int]
    organization_id: int
    opened_alerts: typing.Optional[int]
    last_executed: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
