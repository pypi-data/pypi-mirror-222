# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .format_type import FormatType
from .keyword_requirement import KeywordRequirement


class ExternalClassifierConfig(pydantic.BaseModel):
    """
    Includes parameters that are common to all classifiers
    All parameters in this class should have a default

    Classifier is user facing term used to describe the entity that is responsible to define
    how a data class gets created.

    Currently our internal logic speaks in terms of "recognizers" and "resolvers". The first defines the extraction
    process, and the latter the analysis. Classifiers come directly from the user configuration service and internally
    gets mapped to these two internal types.
    """

    base_certainty_score: typing.Optional[float]
    keyword_certainty_score: typing.Optional[float]
    class_name_dependencies: typing.Optional[typing.List[str]]
    match_fraction_threshold: typing.Optional[float]
    match_min_count: typing.Optional[int]
    keyword_requirement: typing.Optional[KeywordRequirement]
    allowed_format_types: typing.Optional[typing.List[FormatType]]
    masking_function_name: typing.Optional[str]
    validator_function_name: typing.Optional[str]
    keywords: typing.Optional[typing.List[str]]
    case_sensitive: typing.Optional[bool]
    type: typing.Optional[typing_extensions.Literal["REGEX"]]
    pattern: str
    exclusion_pattern: typing.Optional[str]
    class_sensitivity_weight: typing.Optional[float]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
