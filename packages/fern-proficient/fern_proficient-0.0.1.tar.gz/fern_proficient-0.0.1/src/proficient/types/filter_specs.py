# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class FilterSpecs(pydantic.BaseModel):
    not_: typing.Optional[typing.List[FilterSpecsNotItem]] = pydantic.Field(alias="not")
    and_: typing.Optional[typing.List[FilterSpecsAndItem]] = pydantic.Field(alias="and")
    or_: typing.Optional[typing.List[FilterSpecsOrItem]] = pydantic.Field(alias="or")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


from .filter_specs_and_item import FilterSpecsAndItem  # noqa: E402
from .filter_specs_not_item import FilterSpecsNotItem  # noqa: E402
from .filter_specs_or_item import FilterSpecsOrItem  # noqa: E402

FilterSpecs.update_forward_refs()
