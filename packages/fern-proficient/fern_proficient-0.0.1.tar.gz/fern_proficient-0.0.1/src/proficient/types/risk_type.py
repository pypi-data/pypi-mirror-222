# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class RiskType(str, enum.Enum):
    """
    An enumeration.
    """

    SHADOW_DATA = "shadow_data"
    EXPOSED_DATA = "exposed_data"
    RISKY_CREDENTIALS = "risky_credentials"
    DATA_LOCALIZATION = "data_localization"
    EXCESSIVE_ACCESS = "excessive_access"
    THIRD_PARTY_ACCESS = "third_party_access"
    PRIVACY_INFRINGEMENT = "privacy_infringement"
    MISPLACED_DATA = "misplaced_data"
    BUSINESS_CONTINUITY = "business_continuity"

    def visit(
        self,
        shadow_data: typing.Callable[[], T_Result],
        exposed_data: typing.Callable[[], T_Result],
        risky_credentials: typing.Callable[[], T_Result],
        data_localization: typing.Callable[[], T_Result],
        excessive_access: typing.Callable[[], T_Result],
        third_party_access: typing.Callable[[], T_Result],
        privacy_infringement: typing.Callable[[], T_Result],
        misplaced_data: typing.Callable[[], T_Result],
        business_continuity: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is RiskType.SHADOW_DATA:
            return shadow_data()
        if self is RiskType.EXPOSED_DATA:
            return exposed_data()
        if self is RiskType.RISKY_CREDENTIALS:
            return risky_credentials()
        if self is RiskType.DATA_LOCALIZATION:
            return data_localization()
        if self is RiskType.EXCESSIVE_ACCESS:
            return excessive_access()
        if self is RiskType.THIRD_PARTY_ACCESS:
            return third_party_access()
        if self is RiskType.PRIVACY_INFRINGEMENT:
            return privacy_infringement()
        if self is RiskType.MISPLACED_DATA:
            return misplaced_data()
        if self is RiskType.BUSINESS_CONTINUITY:
            return business_continuity()
