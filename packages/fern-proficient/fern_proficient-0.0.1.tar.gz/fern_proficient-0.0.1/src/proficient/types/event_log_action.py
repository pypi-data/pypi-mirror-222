# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EventLogAction(str, enum.Enum):
    """
    An enumeration.
    """

    POLICY_ADDED = "POLICY_ADDED"
    POLICY_ENABLED = "POLICY_ENABLED"
    POLICY_DISABLED = "POLICY_DISABLED"
    POLICY_REMOVED = "POLICY_REMOVED"
    POLICY_UPDATED = "POLICY_UPDATED"
    POLICY_LIST_EXPORTED = "POLICY_LIST_EXPORTED"
    ACCESS_LIST_EXPORTED = "ACCESS_LIST_EXPORTED"
    ASSETS_LIST_EXPORTED = "ASSETS_LIST_EXPORTED"
    STORES_LIST_EXPORTED = "STORES_LIST_EXPORTED"
    ALERTS_LIST_EXPORTED = "ALERTS_LIST_EXPORTED"
    ALERTS_STATUS_CHANGED = "ALERTS_STATUS_CHANGED"
    ACCOUNT_ADDED = "ACCOUNT_ADDED"
    ACCOUNT_UPDATED = "ACCOUNT_UPDATED"
    CLASS_ADDED = "CLASS_ADDED"
    CLASS_ENABLED = "CLASS_ENABLED"
    CLASS_DISABLED = "CLASS_DISABLED"
    CLASS_REMOVED = "CLASS_REMOVED"
    INTEGRATION_ADDED = "INTEGRATION_ADDED"
    INTEGRATION_UPDATED = "INTEGRATION_UPDATED"
    INTEGRATION_REMOVED = "INTEGRATION_REMOVED"
    INTEGRATION_ACTIVATED = "INTEGRATION_ACTIVATED"
    INTEGRATION_DEACTIVATED = "INTEGRATION_DEACTIVATED"
    USERS_LIST_EXPORTED = "USERS_LIST_EXPORTED"
    USER_ROLE_CHANGED = "USER_ROLE_CHANGED"
    TOKEN_ADDED = "TOKEN_ADDED"
    TOKEN_REMOVED = "TOKEN_REMOVED"
    TOKEN_ENABLED = "TOKEN_ENABLED"
    TOKEN_DISABLED = "TOKEN_DISABLED"
    TOKEN_UPDATED = "TOKEN_UPDATED"

    def visit(
        self,
        policy_added: typing.Callable[[], T_Result],
        policy_enabled: typing.Callable[[], T_Result],
        policy_disabled: typing.Callable[[], T_Result],
        policy_removed: typing.Callable[[], T_Result],
        policy_updated: typing.Callable[[], T_Result],
        policy_list_exported: typing.Callable[[], T_Result],
        access_list_exported: typing.Callable[[], T_Result],
        assets_list_exported: typing.Callable[[], T_Result],
        stores_list_exported: typing.Callable[[], T_Result],
        alerts_list_exported: typing.Callable[[], T_Result],
        alerts_status_changed: typing.Callable[[], T_Result],
        account_added: typing.Callable[[], T_Result],
        account_updated: typing.Callable[[], T_Result],
        class_added: typing.Callable[[], T_Result],
        class_enabled: typing.Callable[[], T_Result],
        class_disabled: typing.Callable[[], T_Result],
        class_removed: typing.Callable[[], T_Result],
        integration_added: typing.Callable[[], T_Result],
        integration_updated: typing.Callable[[], T_Result],
        integration_removed: typing.Callable[[], T_Result],
        integration_activated: typing.Callable[[], T_Result],
        integration_deactivated: typing.Callable[[], T_Result],
        users_list_exported: typing.Callable[[], T_Result],
        user_role_changed: typing.Callable[[], T_Result],
        token_added: typing.Callable[[], T_Result],
        token_removed: typing.Callable[[], T_Result],
        token_enabled: typing.Callable[[], T_Result],
        token_disabled: typing.Callable[[], T_Result],
        token_updated: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EventLogAction.POLICY_ADDED:
            return policy_added()
        if self is EventLogAction.POLICY_ENABLED:
            return policy_enabled()
        if self is EventLogAction.POLICY_DISABLED:
            return policy_disabled()
        if self is EventLogAction.POLICY_REMOVED:
            return policy_removed()
        if self is EventLogAction.POLICY_UPDATED:
            return policy_updated()
        if self is EventLogAction.POLICY_LIST_EXPORTED:
            return policy_list_exported()
        if self is EventLogAction.ACCESS_LIST_EXPORTED:
            return access_list_exported()
        if self is EventLogAction.ASSETS_LIST_EXPORTED:
            return assets_list_exported()
        if self is EventLogAction.STORES_LIST_EXPORTED:
            return stores_list_exported()
        if self is EventLogAction.ALERTS_LIST_EXPORTED:
            return alerts_list_exported()
        if self is EventLogAction.ALERTS_STATUS_CHANGED:
            return alerts_status_changed()
        if self is EventLogAction.ACCOUNT_ADDED:
            return account_added()
        if self is EventLogAction.ACCOUNT_UPDATED:
            return account_updated()
        if self is EventLogAction.CLASS_ADDED:
            return class_added()
        if self is EventLogAction.CLASS_ENABLED:
            return class_enabled()
        if self is EventLogAction.CLASS_DISABLED:
            return class_disabled()
        if self is EventLogAction.CLASS_REMOVED:
            return class_removed()
        if self is EventLogAction.INTEGRATION_ADDED:
            return integration_added()
        if self is EventLogAction.INTEGRATION_UPDATED:
            return integration_updated()
        if self is EventLogAction.INTEGRATION_REMOVED:
            return integration_removed()
        if self is EventLogAction.INTEGRATION_ACTIVATED:
            return integration_activated()
        if self is EventLogAction.INTEGRATION_DEACTIVATED:
            return integration_deactivated()
        if self is EventLogAction.USERS_LIST_EXPORTED:
            return users_list_exported()
        if self is EventLogAction.USER_ROLE_CHANGED:
            return user_role_changed()
        if self is EventLogAction.TOKEN_ADDED:
            return token_added()
        if self is EventLogAction.TOKEN_REMOVED:
            return token_removed()
        if self is EventLogAction.TOKEN_ENABLED:
            return token_enabled()
        if self is EventLogAction.TOKEN_DISABLED:
            return token_disabled()
        if self is EventLogAction.TOKEN_UPDATED:
            return token_updated()
