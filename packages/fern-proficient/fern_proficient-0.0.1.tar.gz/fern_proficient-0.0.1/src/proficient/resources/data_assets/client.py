# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.asset_class_user_request import AssetClassUserRequest
from ...types.data_asset_at_risk import DataAssetAtRisk
from ...types.data_asset_extended import DataAssetExtended
from ...types.get_all_api_v_2_data_assets_get_response import GetAllApiV2DataAssetsGetResponse
from ...types.get_filter_api_v_2_data_assets_filter_name_get_response import (
    GetFilterApiV2DataAssetsFilterNameGetResponse,
)
from ...types.http_validation_error import HttpValidationError
from ...types.list_similar_assets_response import ListSimilarAssetsResponse
from ...types.similar_assets_pair_schema import SimilarAssetsPairSchema

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DataAssetsClient:
    def __init__(self, *, environment: str, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def get_filter(
        self, name: str, *, values: typing.Optional[str] = None, filters: typing.Optional[str] = None
    ) -> GetFilterApiV2DataAssetsFilterNameGetResponse:
        """
        Get all available filtering options for filtering on data assets.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2DataAssetsFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_top_data_assets_at_risk(
        self, *, limit: typing.Optional[int] = None, connector_id: typing.Optional[int] = None
    ) -> typing.List[DataAssetAtRisk]:
        """
        Get a prioritized list of all data assets which are considered at the highest risk.

        Parameters:
            - limit: typing.Optional[int].

            - connector_id: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/at-risk"),
            params=remove_none_from_dict({"limit": limit, "connector_id": connector_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[DataAssetAtRisk], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_similar_assets_of_asset(
        self,
        *,
        asset_id: str,
        filters: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> ListSimilarAssetsResponse:
        """
        Get all similar assets of a specific asset.

        Parameters:
            - asset_id: str.

            - filters: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - offset: typing.Optional[int].

            - limit: typing.Optional[int].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/similar"),
            params=remove_none_from_dict(
                {"asset_id": asset_id, "filters": filters, "sort_by": sort_by, "offset": offset, "limit": limit}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListSimilarAssetsResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_similar_assets_pair(self, pair_id: str) -> SimilarAssetsPairSchema:
        """
        Get information about a similarity between two assets using its pair ID.

        Parameters:
            - pair_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/similar/{pair_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SimilarAssetsPairSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_classes_user_operations(self, *, request: typing.List[AssetClassUserRequest]) -> typing.List[int]:
        """
        Manually add or remove a specific data class to a specific asset. Allows specifying the column where
        the data class was found.

        Parameters:
            - request: typing.List[AssetClassUserRequest].
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/classes"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[int], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        group_by: typing.Optional[str] = None,
    ) -> GetAllApiV2DataAssetsGetResponse:
        """
        List all data assets.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - group_by: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets"),
            params=remove_none_from_dict(
                {"offset": offset, "limit": limit, "sort_by": sort_by, "filters": filters, "group_by": group_by}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2DataAssetsGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_external(self, id: str, *, with_entities: typing.Optional[str] = None) -> DataAssetExtended:
        """
        Get extended information about a specific data asset by ID.

        Parameters:
            - id: str.

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/{id}"),
            params=remove_none_from_dict({"with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DataAssetExtended, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDataAssetsClient:
    def __init__(self, *, environment: str, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def get_filter(
        self, name: str, *, values: typing.Optional[str] = None, filters: typing.Optional[str] = None
    ) -> GetFilterApiV2DataAssetsFilterNameGetResponse:
        """
        Get all available filtering options for filtering on data assets.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2DataAssetsFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_top_data_assets_at_risk(
        self, *, limit: typing.Optional[int] = None, connector_id: typing.Optional[int] = None
    ) -> typing.List[DataAssetAtRisk]:
        """
        Get a prioritized list of all data assets which are considered at the highest risk.

        Parameters:
            - limit: typing.Optional[int].

            - connector_id: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/at-risk"),
            params=remove_none_from_dict({"limit": limit, "connector_id": connector_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[DataAssetAtRisk], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_similar_assets_of_asset(
        self,
        *,
        asset_id: str,
        filters: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
    ) -> ListSimilarAssetsResponse:
        """
        Get all similar assets of a specific asset.

        Parameters:
            - asset_id: str.

            - filters: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - offset: typing.Optional[int].

            - limit: typing.Optional[int].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/similar"),
            params=remove_none_from_dict(
                {"asset_id": asset_id, "filters": filters, "sort_by": sort_by, "offset": offset, "limit": limit}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListSimilarAssetsResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_similar_assets_pair(self, pair_id: str) -> SimilarAssetsPairSchema:
        """
        Get information about a similarity between two assets using its pair ID.

        Parameters:
            - pair_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/similar/{pair_id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(SimilarAssetsPairSchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_classes_user_operations(self, *, request: typing.List[AssetClassUserRequest]) -> typing.List[int]:
        """
        Manually add or remove a specific data class to a specific asset. Allows specifying the column where
        the data class was found.

        Parameters:
            - request: typing.List[AssetClassUserRequest].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets/classes"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[int], _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        group_by: typing.Optional[str] = None,
    ) -> GetAllApiV2DataAssetsGetResponse:
        """
        List all data assets.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - group_by: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/data-assets"),
            params=remove_none_from_dict(
                {"offset": offset, "limit": limit, "sort_by": sort_by, "filters": filters, "group_by": group_by}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2DataAssetsGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_external(self, id: str, *, with_entities: typing.Optional[str] = None) -> DataAssetExtended:
        """
        Get extended information about a specific data asset by ID.

        Parameters:
            - id: str.

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/data-assets/{id}"),
            params=remove_none_from_dict({"with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DataAssetExtended, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
