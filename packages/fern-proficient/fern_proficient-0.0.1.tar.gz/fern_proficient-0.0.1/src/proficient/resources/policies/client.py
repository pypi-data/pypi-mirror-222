# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...errors.not_found_error import NotFoundError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.get_all_api_v_2_policies_get_response import GetAllApiV2PoliciesGetResponse
from ...types.get_filter_api_v_2_policies_filter_name_get_response import GetFilterApiV2PoliciesFilterNameGetResponse
from ...types.http_validation_error import HttpValidationError
from ...types.policy_rule import PolicyRule
from ...types.policy_schema import PolicySchema
from ...types.policy_severity import PolicySeverity
from ...types.policy_status import PolicyStatus
from ...types.policy_triggering_type import PolicyTriggeringType
from ...types.policy_type import PolicyType
from ...types.policy_update_response import PolicyUpdateResponse
from ...types.risk_type import RiskType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PoliciesClient:
    def __init__(self, *, environment: str, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def get_filter(
        self,
        name: str,
        *,
        values: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetFilterApiV2PoliciesFilterNameGetResponse:
        """
        Get all available filtering options for filtering on policies.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters, "with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2PoliciesFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str, *, with_entities: typing.Optional[str] = None) -> PolicySchema:
        """
        Get all information on a specific policy by ID.

        Parameters:
            - id: str.

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{id}"),
            params=remove_none_from_dict({"with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str) -> PolicySchema:
        """
        Delete a policy and all of its associated alerts.

        Parameters:
            - id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def change_policy_status(self, policy_id: str, *, enabled: bool) -> PolicySchema:
        """
        Enable or disable a policy.

        Parameters:
            - policy_id: str.

            - enabled: bool.
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{policy_id}/status"),
            params=remove_none_from_dict({"enabled": enabled}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_policy(
        self,
        policy_id: str,
        *,
        force: typing.Optional[bool] = None,
        canonical: str,
        revision: str,
        name: str,
        severity: PolicySeverity,
        risk_type: typing.Optional[RiskType] = OMIT,
        description: typing.Optional[str] = OMIT,
        recommendation: typing.Optional[str] = OMIT,
        status: PolicyStatus,
        predefined: typing.Optional[bool] = OMIT,
        type: PolicyType,
        tags: typing.List[str],
        frameworks: typing.List[str],
        rules: typing.List[PolicyRule],
        auto_approval: typing.Optional[bool] = OMIT,
        triggering_type: typing.Optional[PolicyTriggeringType] = OMIT,
    ) -> PolicyUpdateResponse:
        """
        Update a policy.

        Parameters:
            - policy_id: str.

            - force: typing.Optional[bool].

            - canonical: str.

            - revision: str.

            - name: str.

            - severity: PolicySeverity.

            - risk_type: typing.Optional[RiskType].

            - description: typing.Optional[str]. <span style="white-space: nowrap">`<= 1024 characters`</span>

            - recommendation: typing.Optional[str].

            - status: PolicyStatus.

            - predefined: typing.Optional[bool].

            - type: PolicyType.

            - tags: typing.List[str].

            - frameworks: typing.List[str].

            - rules: typing.List[PolicyRule].

            - auto_approval: typing.Optional[bool].

            - triggering_type: typing.Optional[PolicyTriggeringType].
        """
        _request: typing.Dict[str, typing.Any] = {
            "canonical": canonical,
            "revision": revision,
            "name": name,
            "severity": severity,
            "status": status,
            "type": type,
            "tags": tags,
            "frameworks": frameworks,
            "rules": rules,
        }
        if risk_type is not OMIT:
            _request["risk_type"] = risk_type
        if description is not OMIT:
            _request["description"] = description
        if recommendation is not OMIT:
            _request["recommendation"] = recommendation
        if predefined is not OMIT:
            _request["predefined"] = predefined
        if auto_approval is not OMIT:
            _request["auto_approval"] = auto_approval
        if triggering_type is not OMIT:
            _request["triggering_type"] = triggering_type
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{policy_id}"),
            params=remove_none_from_dict({"force": force}),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicyUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_policy_enums(self) -> typing.Any:
        """
        Get available enums for filtering on policies.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies:getEnums"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2PoliciesGetResponse:
        """
        List all policies.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2PoliciesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_from_builder(
        self,
        *,
        name: str,
        severity: PolicySeverity,
        risk_type: typing.Optional[RiskType] = OMIT,
        description: typing.Optional[str] = OMIT,
        recommendation: typing.Optional[str] = OMIT,
        tags: typing.List[str],
        frameworks: typing.List[str],
        rules: typing.List[PolicyRule],
    ) -> PolicySchema:
        """
        Create a new policy.

        Parameters:
            - name: str.

            - severity: PolicySeverity.

            - risk_type: typing.Optional[RiskType].

            - description: typing.Optional[str]. <span style="white-space: nowrap">`<= 1024 characters`</span>

            - recommendation: typing.Optional[str].

            - tags: typing.List[str].

            - frameworks: typing.List[str].

            - rules: typing.List[PolicyRule].
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "severity": severity,
            "tags": tags,
            "frameworks": frameworks,
            "rules": rules,
        }
        if risk_type is not OMIT:
            _request["risk_type"] = risk_type
        if description is not OMIT:
            _request["description"] = description
        if recommendation is not OMIT:
            _request["recommendation"] = recommendation
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPoliciesClient:
    def __init__(self, *, environment: str, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def get_filter(
        self,
        name: str,
        *,
        values: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetFilterApiV2PoliciesFilterNameGetResponse:
        """
        Get all available filtering options for filtering on policies.

        Parameters:
            - name: str.

            - values: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/filter/{name}"),
            params=remove_none_from_dict({"values": values, "filters": filters, "with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFilterApiV2PoliciesFilterNameGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str, *, with_entities: typing.Optional[str] = None) -> PolicySchema:
        """
        Get all information on a specific policy by ID.

        Parameters:
            - id: str.

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{id}"),
            params=remove_none_from_dict({"with_entities": with_entities}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str) -> PolicySchema:
        """
        Delete a policy and all of its associated alerts.

        Parameters:
            - id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def change_policy_status(self, policy_id: str, *, enabled: bool) -> PolicySchema:
        """
        Enable or disable a policy.

        Parameters:
            - policy_id: str.

            - enabled: bool.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{policy_id}/status"),
            params=remove_none_from_dict({"enabled": enabled}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_policy(
        self,
        policy_id: str,
        *,
        force: typing.Optional[bool] = None,
        canonical: str,
        revision: str,
        name: str,
        severity: PolicySeverity,
        risk_type: typing.Optional[RiskType] = OMIT,
        description: typing.Optional[str] = OMIT,
        recommendation: typing.Optional[str] = OMIT,
        status: PolicyStatus,
        predefined: typing.Optional[bool] = OMIT,
        type: PolicyType,
        tags: typing.List[str],
        frameworks: typing.List[str],
        rules: typing.List[PolicyRule],
        auto_approval: typing.Optional[bool] = OMIT,
        triggering_type: typing.Optional[PolicyTriggeringType] = OMIT,
    ) -> PolicyUpdateResponse:
        """
        Update a policy.

        Parameters:
            - policy_id: str.

            - force: typing.Optional[bool].

            - canonical: str.

            - revision: str.

            - name: str.

            - severity: PolicySeverity.

            - risk_type: typing.Optional[RiskType].

            - description: typing.Optional[str]. <span style="white-space: nowrap">`<= 1024 characters`</span>

            - recommendation: typing.Optional[str].

            - status: PolicyStatus.

            - predefined: typing.Optional[bool].

            - type: PolicyType.

            - tags: typing.List[str].

            - frameworks: typing.List[str].

            - rules: typing.List[PolicyRule].

            - auto_approval: typing.Optional[bool].

            - triggering_type: typing.Optional[PolicyTriggeringType].
        """
        _request: typing.Dict[str, typing.Any] = {
            "canonical": canonical,
            "revision": revision,
            "name": name,
            "severity": severity,
            "status": status,
            "type": type,
            "tags": tags,
            "frameworks": frameworks,
            "rules": rules,
        }
        if risk_type is not OMIT:
            _request["risk_type"] = risk_type
        if description is not OMIT:
            _request["description"] = description
        if recommendation is not OMIT:
            _request["recommendation"] = recommendation
        if predefined is not OMIT:
            _request["predefined"] = predefined
        if auto_approval is not OMIT:
            _request["auto_approval"] = auto_approval
        if triggering_type is not OMIT:
            _request["triggering_type"] = triggering_type
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment}/", f"api/v2/policies/{policy_id}"),
            params=remove_none_from_dict({"force": force}),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicyUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_policy_enums(self) -> typing.Any:
        """
        Get available enums for filtering on policies.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies:getEnums"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_all(
        self,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        count_only: typing.Optional[bool] = None,
        group_by: typing.Optional[str] = None,
        sort_by: typing.Optional[str] = None,
        filters: typing.Optional[str] = None,
        with_entities: typing.Optional[str] = None,
    ) -> GetAllApiV2PoliciesGetResponse:
        """
        List all policies.

        Parameters:
            - offset: typing.Optional[int].

            - limit: typing.Optional[int].

            - count_only: typing.Optional[bool].

            - group_by: typing.Optional[str].

            - sort_by: typing.Optional[str].

            - filters: typing.Optional[str].

            - with_entities: typing.Optional[str].
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies"),
            params=remove_none_from_dict(
                {
                    "offset": offset,
                    "limit": limit,
                    "count_only": count_only,
                    "group_by": group_by,
                    "sort_by": sort_by,
                    "filters": filters,
                    "with_entities": with_entities,
                }
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetAllApiV2PoliciesGetResponse, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_from_builder(
        self,
        *,
        name: str,
        severity: PolicySeverity,
        risk_type: typing.Optional[RiskType] = OMIT,
        description: typing.Optional[str] = OMIT,
        recommendation: typing.Optional[str] = OMIT,
        tags: typing.List[str],
        frameworks: typing.List[str],
        rules: typing.List[PolicyRule],
    ) -> PolicySchema:
        """
        Create a new policy.

        Parameters:
            - name: str.

            - severity: PolicySeverity.

            - risk_type: typing.Optional[RiskType].

            - description: typing.Optional[str]. <span style="white-space: nowrap">`<= 1024 characters`</span>

            - recommendation: typing.Optional[str].

            - tags: typing.List[str].

            - frameworks: typing.List[str].

            - rules: typing.List[PolicyRule].
        """
        _request: typing.Dict[str, typing.Any] = {
            "name": name,
            "severity": severity,
            "tags": tags,
            "frameworks": frameworks,
            "rules": rules,
        }
        if risk_type is not OMIT:
            _request["risk_type"] = risk_type
        if description is not OMIT:
            _request["description"] = description
        if recommendation is not OMIT:
            _request["recommendation"] = recommendation
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/v2/policies"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PolicySchema, _response.json())  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
