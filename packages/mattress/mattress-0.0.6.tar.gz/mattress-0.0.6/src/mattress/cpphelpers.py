# DO NOT MODIFY: this is automatically generated by the ctypes-compiler

import os
import ctypes as ct

# TODO: surely there's a better way than whatever this is.
dirname = os.path.dirname(os.path.abspath(__file__))
contents = os.listdir(dirname)
lib = None
for x in contents:
    if x.startswith('core') and not x.endswith("py"):
        lib = ct.CDLL(os.path.join(dirname, x))
        break

if lib is None:
    raise ImportError("failed to find the core.* module")

lib.free_error_message.argtypes = [ ct.POINTER(ct.c_char_p) ]

lib.py_extract_column.argtypes = [
    ct.c_void_p,
    ct.c_int,
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_extract_ncol.restype = ct.c_int
lib.py_extract_ncol.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_extract_nrow.restype = ct.c_int
lib.py_extract_nrow.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_extract_row.argtypes = [
    ct.c_void_p,
    ct.c_int,
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_extract_sparse.restype = ct.c_int
lib.py_extract_sparse.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_free_mat.argtypes = [
    ct.c_void_p,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_initialize_compressed_sparse_matrix.restype = ct.c_void_p
lib.py_initialize_compressed_sparse_matrix.argtypes = [
    ct.c_int,
    ct.c_int,
    ct.c_uint64,
    ct.c_void_p,
    ct.c_void_p,
    ct.c_void_p,
    ct.c_void_p,
    ct.c_void_p,
    ct.c_uint8,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

lib.py_initialize_dense_matrix.restype = ct.c_void_p
lib.py_initialize_dense_matrix.argtypes = [
    ct.c_int,
    ct.c_int,
    ct.c_void_p,
    ct.c_void_p,
    ct.c_uint8,
    ct.POINTER(ct.c_int),
    ct.POINTER(ct.c_char_p)
]

def extract_column(rawmat, c, output):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_extract_column(rawmat, c, output, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def extract_ncol(mat):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_extract_ncol(mat, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def extract_nrow(mat):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_extract_nrow(mat, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def extract_row(rawmat, r, output):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_extract_row(rawmat, r, output, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def extract_sparse(mat):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_extract_sparse(mat, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def free_mat(mat):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_free_mat(mat, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def initialize_compressed_sparse_matrix(nr, nc, nz, dtype, dptr, itype, iptr, indptr, byrow):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_initialize_compressed_sparse_matrix(nr, nc, nz, dtype, dptr, itype, iptr, indptr, byrow, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___

def initialize_dense_matrix(nr, nc, type, ptr, byrow):
    errcode___ = ct.c_int(0)
    errmsg___ = ct.c_char_p(0)
    output___ = lib.py_initialize_dense_matrix(nr, nc, type, ptr, byrow, ct.byref(errcode___), ct.byref(errmsg___))
    if errcode___.value != 0:
        msg = errmsg___.value.decode('ascii')
        lib.free_error_message(errmsg___)
        raise RuntimeError(msg)
    return output___