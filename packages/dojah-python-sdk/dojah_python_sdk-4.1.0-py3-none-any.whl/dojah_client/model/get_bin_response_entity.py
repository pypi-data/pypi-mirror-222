# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetBinResponseEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            bin = schemas.StrSchema
            brand = schemas.StrSchema
            sub_brand = schemas.StrSchema
            country_code = schemas.StrSchema
            country_name = schemas.StrSchema
            card_type = schemas.StrSchema
            bank = schemas.StrSchema
            __annotations__ = {
                "bin": bin,
                "brand": brand,
                "sub_brand": sub_brand,
                "country_code": country_code,
                "country_name": country_name,
                "card_type": card_type,
                "bank": bank,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin"]) -> MetaOapg.properties.bin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand"]) -> MetaOapg.properties.brand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_brand"]) -> MetaOapg.properties.sub_brand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_type"]) -> MetaOapg.properties.card_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bank"]) -> MetaOapg.properties.bank: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bin", "brand", "sub_brand", "country_code", "country_name", "card_type", "bank", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin"]) -> typing.Union[MetaOapg.properties.bin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand"]) -> typing.Union[MetaOapg.properties.brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_brand"]) -> typing.Union[MetaOapg.properties.sub_brand, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_type"]) -> typing.Union[MetaOapg.properties.card_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bank"]) -> typing.Union[MetaOapg.properties.bank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bin", "brand", "sub_brand", "country_code", "country_name", "card_type", "bank", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        bin: typing.Union[MetaOapg.properties.bin, str, schemas.Unset] = schemas.unset,
        brand: typing.Union[MetaOapg.properties.brand, str, schemas.Unset] = schemas.unset,
        sub_brand: typing.Union[MetaOapg.properties.sub_brand, str, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
        country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
        card_type: typing.Union[MetaOapg.properties.card_type, str, schemas.Unset] = schemas.unset,
        bank: typing.Union[MetaOapg.properties.bank, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetBinResponseEntity':
        return super().__new__(
            cls,
            *args,
            bin=bin,
            brand=brand,
            sub_brand=sub_brand,
            country_code=country_code,
            country_name=country_name,
            card_type=card_type,
            bank=bank,
            _configuration=_configuration,
            **kwargs,
        )
