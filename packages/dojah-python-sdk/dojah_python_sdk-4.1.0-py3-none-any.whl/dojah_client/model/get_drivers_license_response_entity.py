# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetDriversLicenseResponseEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            certificate_date = schemas.StrSchema
            date_of_birth = schemas.StrSchema
            expiry_date = schemas.StrSchema
            full_name = schemas.StrSchema
            id = schemas.StrSchema
            is_date_of_birth_match = schemas.BoolSchema
            is_full_name_match = schemas.BoolSchema
            issue_date = schemas.StrSchema
            picture = schemas.StrSchema
            pin = schemas.StrSchema
            processing_center = schemas.StrSchema
            status = schemas.NumberSchema
            __annotations__ = {
                "certificate_date": certificate_date,
                "date_of_birth": date_of_birth,
                "expiry_date": expiry_date,
                "full_name": full_name,
                "id": id,
                "is_date_of_birth_match": is_date_of_birth_match,
                "is_full_name_match": is_full_name_match,
                "issue_date": issue_date,
                "picture": picture,
                "pin": pin,
                "processing_center": processing_center,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificate_date"]) -> MetaOapg.properties.certificate_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry_date"]) -> MetaOapg.properties.expiry_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_date_of_birth_match"]) -> MetaOapg.properties.is_date_of_birth_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_full_name_match"]) -> MetaOapg.properties.is_full_name_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_date"]) -> MetaOapg.properties.issue_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["picture"]) -> MetaOapg.properties.picture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pin"]) -> MetaOapg.properties.pin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processing_center"]) -> MetaOapg.properties.processing_center: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["certificate_date", "date_of_birth", "expiry_date", "full_name", "id", "is_date_of_birth_match", "is_full_name_match", "issue_date", "picture", "pin", "processing_center", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificate_date"]) -> typing.Union[MetaOapg.properties.certificate_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry_date"]) -> typing.Union[MetaOapg.properties.expiry_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_date_of_birth_match"]) -> typing.Union[MetaOapg.properties.is_date_of_birth_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_full_name_match"]) -> typing.Union[MetaOapg.properties.is_full_name_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_date"]) -> typing.Union[MetaOapg.properties.issue_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["picture"]) -> typing.Union[MetaOapg.properties.picture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pin"]) -> typing.Union[MetaOapg.properties.pin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processing_center"]) -> typing.Union[MetaOapg.properties.processing_center, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["certificate_date", "date_of_birth", "expiry_date", "full_name", "id", "is_date_of_birth_match", "is_full_name_match", "issue_date", "picture", "pin", "processing_center", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        certificate_date: typing.Union[MetaOapg.properties.certificate_date, str, schemas.Unset] = schemas.unset,
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, str, schemas.Unset] = schemas.unset,
        expiry_date: typing.Union[MetaOapg.properties.expiry_date, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_date_of_birth_match: typing.Union[MetaOapg.properties.is_date_of_birth_match, bool, schemas.Unset] = schemas.unset,
        is_full_name_match: typing.Union[MetaOapg.properties.is_full_name_match, bool, schemas.Unset] = schemas.unset,
        issue_date: typing.Union[MetaOapg.properties.issue_date, str, schemas.Unset] = schemas.unset,
        picture: typing.Union[MetaOapg.properties.picture, str, schemas.Unset] = schemas.unset,
        pin: typing.Union[MetaOapg.properties.pin, str, schemas.Unset] = schemas.unset,
        processing_center: typing.Union[MetaOapg.properties.processing_center, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetDriversLicenseResponseEntity':
        return super().__new__(
            cls,
            *args,
            certificate_date=certificate_date,
            date_of_birth=date_of_birth,
            expiry_date=expiry_date,
            full_name=full_name,
            id=id,
            is_date_of_birth_match=is_date_of_birth_match,
            is_full_name_match=is_full_name_match,
            issue_date=issue_date,
            picture=picture,
            pin=pin,
            processing_center=processing_center,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
