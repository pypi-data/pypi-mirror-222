# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetNationalIdResponseEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            date_of_birth = schemas.StrSchema
            first_name = schemas.StrSchema
            gender = schemas.StrSchema
            id = schemas.StrSchema
            is_date_of_birth_match = schemas.BoolSchema
            is_first_name_match = schemas.BoolSchema
            is_gender_match = schemas.BoolSchema
            is_last_name_match = schemas.BoolSchema
            is_middle_name_match = schemas.BoolSchema
            last_name = schemas.StrSchema
            middle_name = schemas.StrSchema
            __annotations__ = {
                "date_of_birth": date_of_birth,
                "first_name": first_name,
                "gender": gender,
                "id": id,
                "is_date_of_birth_match": is_date_of_birth_match,
                "is_first_name_match": is_first_name_match,
                "is_gender_match": is_gender_match,
                "is_last_name_match": is_last_name_match,
                "is_middle_name_match": is_middle_name_match,
                "last_name": last_name,
                "middle_name": middle_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_date_of_birth_match"]) -> MetaOapg.properties.is_date_of_birth_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_first_name_match"]) -> MetaOapg.properties.is_first_name_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_gender_match"]) -> MetaOapg.properties.is_gender_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_last_name_match"]) -> MetaOapg.properties.is_last_name_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_middle_name_match"]) -> MetaOapg.properties.is_middle_name_match: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middle_name"]) -> MetaOapg.properties.middle_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_of_birth", "first_name", "gender", "id", "is_date_of_birth_match", "is_first_name_match", "is_gender_match", "is_last_name_match", "is_middle_name_match", "last_name", "middle_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_date_of_birth_match"]) -> typing.Union[MetaOapg.properties.is_date_of_birth_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_first_name_match"]) -> typing.Union[MetaOapg.properties.is_first_name_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_gender_match"]) -> typing.Union[MetaOapg.properties.is_gender_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_last_name_match"]) -> typing.Union[MetaOapg.properties.is_last_name_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_middle_name_match"]) -> typing.Union[MetaOapg.properties.is_middle_name_match, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middle_name"]) -> typing.Union[MetaOapg.properties.middle_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_of_birth", "first_name", "gender", "id", "is_date_of_birth_match", "is_first_name_match", "is_gender_match", "is_last_name_match", "is_middle_name_match", "last_name", "middle_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, str, schemas.Unset] = schemas.unset,
        first_name: typing.Union[MetaOapg.properties.first_name, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_date_of_birth_match: typing.Union[MetaOapg.properties.is_date_of_birth_match, bool, schemas.Unset] = schemas.unset,
        is_first_name_match: typing.Union[MetaOapg.properties.is_first_name_match, bool, schemas.Unset] = schemas.unset,
        is_gender_match: typing.Union[MetaOapg.properties.is_gender_match, bool, schemas.Unset] = schemas.unset,
        is_last_name_match: typing.Union[MetaOapg.properties.is_last_name_match, bool, schemas.Unset] = schemas.unset,
        is_middle_name_match: typing.Union[MetaOapg.properties.is_middle_name_match, bool, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        middle_name: typing.Union[MetaOapg.properties.middle_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetNationalIdResponseEntity':
        return super().__new__(
            cls,
            *args,
            date_of_birth=date_of_birth,
            first_name=first_name,
            gender=gender,
            id=id,
            is_date_of_birth_match=is_date_of_birth_match,
            is_first_name_match=is_first_name_match,
            is_gender_match=is_gender_match,
            is_last_name_match=is_last_name_match,
            is_middle_name_match=is_middle_name_match,
            last_name=last_name,
            middle_name=middle_name,
            _configuration=_configuration,
            **kwargs,
        )
