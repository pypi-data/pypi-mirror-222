# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudGetEmailReputationResponseEntityDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            blacklisted = schemas.BoolSchema
            malicious_activity = schemas.BoolSchema
            malicious_activity_recent = schemas.BoolSchema
            credentials_leaked = schemas.BoolSchema
            credentials_leaked_recent = schemas.BoolSchema
            data_breach = schemas.BoolSchema
            first_seen = schemas.StrSchema
            last_seen = schemas.StrSchema
            domain_exists = schemas.BoolSchema
            domain_reputation = schemas.StrSchema
            new_domain = schemas.BoolSchema
            days_since_domain_creation = schemas.NumberSchema
            suspicious_tld = schemas.BoolSchema
            spam = schemas.BoolSchema
            free_provider = schemas.BoolSchema
            disposable = schemas.BoolSchema
            deliverable = schemas.BoolSchema
            accept_all = schemas.BoolSchema
            valid_mx = schemas.BoolSchema
            primary_mx = schemas.StrSchema
            spoofable = schemas.BoolSchema
            spf_strict = schemas.BoolSchema
            dmarc_enforced = schemas.BoolSchema
        
            @staticmethod
            def profiles() -> typing.Type['FraudGetEmailReputationResponseEntityDetailsProfiles']:
                return FraudGetEmailReputationResponseEntityDetailsProfiles
            __annotations__ = {
                "blacklisted": blacklisted,
                "malicious_activity": malicious_activity,
                "malicious_activity_recent": malicious_activity_recent,
                "credentials_leaked": credentials_leaked,
                "credentials_leaked_recent": credentials_leaked_recent,
                "data_breach": data_breach,
                "first_seen": first_seen,
                "last_seen": last_seen,
                "domain_exists": domain_exists,
                "domain_reputation": domain_reputation,
                "new_domain": new_domain,
                "days_since_domain_creation": days_since_domain_creation,
                "suspicious_tld": suspicious_tld,
                "spam": spam,
                "free_provider": free_provider,
                "disposable": disposable,
                "deliverable": deliverable,
                "accept_all": accept_all,
                "valid_mx": valid_mx,
                "primary_mx": primary_mx,
                "spoofable": spoofable,
                "spf_strict": spf_strict,
                "dmarc_enforced": dmarc_enforced,
                "profiles": profiles,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blacklisted"]) -> MetaOapg.properties.blacklisted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["malicious_activity"]) -> MetaOapg.properties.malicious_activity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["malicious_activity_recent"]) -> MetaOapg.properties.malicious_activity_recent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials_leaked"]) -> MetaOapg.properties.credentials_leaked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials_leaked_recent"]) -> MetaOapg.properties.credentials_leaked_recent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_breach"]) -> MetaOapg.properties.data_breach: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_seen"]) -> MetaOapg.properties.first_seen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen"]) -> MetaOapg.properties.last_seen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_exists"]) -> MetaOapg.properties.domain_exists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_reputation"]) -> MetaOapg.properties.domain_reputation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["new_domain"]) -> MetaOapg.properties.new_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_since_domain_creation"]) -> MetaOapg.properties.days_since_domain_creation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspicious_tld"]) -> MetaOapg.properties.suspicious_tld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spam"]) -> MetaOapg.properties.spam: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free_provider"]) -> MetaOapg.properties.free_provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliverable"]) -> MetaOapg.properties.deliverable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_all"]) -> MetaOapg.properties.accept_all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_mx"]) -> MetaOapg.properties.valid_mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_mx"]) -> MetaOapg.properties.primary_mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spoofable"]) -> MetaOapg.properties.spoofable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spf_strict"]) -> MetaOapg.properties.spf_strict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dmarc_enforced"]) -> MetaOapg.properties.dmarc_enforced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profiles"]) -> 'FraudGetEmailReputationResponseEntityDetailsProfiles': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["blacklisted", "malicious_activity", "malicious_activity_recent", "credentials_leaked", "credentials_leaked_recent", "data_breach", "first_seen", "last_seen", "domain_exists", "domain_reputation", "new_domain", "days_since_domain_creation", "suspicious_tld", "spam", "free_provider", "disposable", "deliverable", "accept_all", "valid_mx", "primary_mx", "spoofable", "spf_strict", "dmarc_enforced", "profiles", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blacklisted"]) -> typing.Union[MetaOapg.properties.blacklisted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["malicious_activity"]) -> typing.Union[MetaOapg.properties.malicious_activity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["malicious_activity_recent"]) -> typing.Union[MetaOapg.properties.malicious_activity_recent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials_leaked"]) -> typing.Union[MetaOapg.properties.credentials_leaked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials_leaked_recent"]) -> typing.Union[MetaOapg.properties.credentials_leaked_recent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_breach"]) -> typing.Union[MetaOapg.properties.data_breach, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_seen"]) -> typing.Union[MetaOapg.properties.first_seen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen"]) -> typing.Union[MetaOapg.properties.last_seen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_exists"]) -> typing.Union[MetaOapg.properties.domain_exists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_reputation"]) -> typing.Union[MetaOapg.properties.domain_reputation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["new_domain"]) -> typing.Union[MetaOapg.properties.new_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_since_domain_creation"]) -> typing.Union[MetaOapg.properties.days_since_domain_creation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspicious_tld"]) -> typing.Union[MetaOapg.properties.suspicious_tld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spam"]) -> typing.Union[MetaOapg.properties.spam, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free_provider"]) -> typing.Union[MetaOapg.properties.free_provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliverable"]) -> typing.Union[MetaOapg.properties.deliverable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_all"]) -> typing.Union[MetaOapg.properties.accept_all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_mx"]) -> typing.Union[MetaOapg.properties.valid_mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_mx"]) -> typing.Union[MetaOapg.properties.primary_mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spoofable"]) -> typing.Union[MetaOapg.properties.spoofable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spf_strict"]) -> typing.Union[MetaOapg.properties.spf_strict, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dmarc_enforced"]) -> typing.Union[MetaOapg.properties.dmarc_enforced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profiles"]) -> typing.Union['FraudGetEmailReputationResponseEntityDetailsProfiles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["blacklisted", "malicious_activity", "malicious_activity_recent", "credentials_leaked", "credentials_leaked_recent", "data_breach", "first_seen", "last_seen", "domain_exists", "domain_reputation", "new_domain", "days_since_domain_creation", "suspicious_tld", "spam", "free_provider", "disposable", "deliverable", "accept_all", "valid_mx", "primary_mx", "spoofable", "spf_strict", "dmarc_enforced", "profiles", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        blacklisted: typing.Union[MetaOapg.properties.blacklisted, bool, schemas.Unset] = schemas.unset,
        malicious_activity: typing.Union[MetaOapg.properties.malicious_activity, bool, schemas.Unset] = schemas.unset,
        malicious_activity_recent: typing.Union[MetaOapg.properties.malicious_activity_recent, bool, schemas.Unset] = schemas.unset,
        credentials_leaked: typing.Union[MetaOapg.properties.credentials_leaked, bool, schemas.Unset] = schemas.unset,
        credentials_leaked_recent: typing.Union[MetaOapg.properties.credentials_leaked_recent, bool, schemas.Unset] = schemas.unset,
        data_breach: typing.Union[MetaOapg.properties.data_breach, bool, schemas.Unset] = schemas.unset,
        first_seen: typing.Union[MetaOapg.properties.first_seen, str, schemas.Unset] = schemas.unset,
        last_seen: typing.Union[MetaOapg.properties.last_seen, str, schemas.Unset] = schemas.unset,
        domain_exists: typing.Union[MetaOapg.properties.domain_exists, bool, schemas.Unset] = schemas.unset,
        domain_reputation: typing.Union[MetaOapg.properties.domain_reputation, str, schemas.Unset] = schemas.unset,
        new_domain: typing.Union[MetaOapg.properties.new_domain, bool, schemas.Unset] = schemas.unset,
        days_since_domain_creation: typing.Union[MetaOapg.properties.days_since_domain_creation, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        suspicious_tld: typing.Union[MetaOapg.properties.suspicious_tld, bool, schemas.Unset] = schemas.unset,
        spam: typing.Union[MetaOapg.properties.spam, bool, schemas.Unset] = schemas.unset,
        free_provider: typing.Union[MetaOapg.properties.free_provider, bool, schemas.Unset] = schemas.unset,
        disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
        deliverable: typing.Union[MetaOapg.properties.deliverable, bool, schemas.Unset] = schemas.unset,
        accept_all: typing.Union[MetaOapg.properties.accept_all, bool, schemas.Unset] = schemas.unset,
        valid_mx: typing.Union[MetaOapg.properties.valid_mx, bool, schemas.Unset] = schemas.unset,
        primary_mx: typing.Union[MetaOapg.properties.primary_mx, str, schemas.Unset] = schemas.unset,
        spoofable: typing.Union[MetaOapg.properties.spoofable, bool, schemas.Unset] = schemas.unset,
        spf_strict: typing.Union[MetaOapg.properties.spf_strict, bool, schemas.Unset] = schemas.unset,
        dmarc_enforced: typing.Union[MetaOapg.properties.dmarc_enforced, bool, schemas.Unset] = schemas.unset,
        profiles: typing.Union['FraudGetEmailReputationResponseEntityDetailsProfiles', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudGetEmailReputationResponseEntityDetails':
        return super().__new__(
            cls,
            *args,
            blacklisted=blacklisted,
            malicious_activity=malicious_activity,
            malicious_activity_recent=malicious_activity_recent,
            credentials_leaked=credentials_leaked,
            credentials_leaked_recent=credentials_leaked_recent,
            data_breach=data_breach,
            first_seen=first_seen,
            last_seen=last_seen,
            domain_exists=domain_exists,
            domain_reputation=domain_reputation,
            new_domain=new_domain,
            days_since_domain_creation=days_since_domain_creation,
            suspicious_tld=suspicious_tld,
            spam=spam,
            free_provider=free_provider,
            disposable=disposable,
            deliverable=deliverable,
            accept_all=accept_all,
            valid_mx=valid_mx,
            primary_mx=primary_mx,
            spoofable=spoofable,
            spf_strict=spf_strict,
            dmarc_enforced=dmarc_enforced,
            profiles=profiles,
            _configuration=_configuration,
            **kwargs,
        )

from dojah_client.model.fraud_get_email_reputation_response_entity_details_profiles import FraudGetEmailReputationResponseEntityDetailsProfiles
