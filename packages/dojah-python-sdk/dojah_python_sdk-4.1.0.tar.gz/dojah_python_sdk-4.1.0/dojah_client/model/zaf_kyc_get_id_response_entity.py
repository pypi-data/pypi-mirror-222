# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class ZafKycGetIdResponseEntity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            birth_place_country = schemas.StrSchema
            birth_place_country_code = schemas.StrSchema
            booked_date = schemas.StrSchema
            card_date = schemas.StrSchema
            date_of_birth = schemas.StrSchema
            full_name = schemas.StrSchema
            gender = schemas.StrSchema
            id_blocked = schemas.StrSchema
            id_number = schemas.StrSchema
            issued_date = schemas.StrSchema
            last_name = schemas.StrSchema
            maiden_name = schemas.StrSchema
            marital_status = schemas.StrSchema
            on_HANIS = schemas.StrSchema
            on_NPR = schemas.StrSchema
            photo = schemas.StrSchema
            smart_card_issued = schemas.StrSchema
            status = schemas.NumberSchema
            __annotations__ = {
                "birth_place_country": birth_place_country,
                "birth_place_country_code": birth_place_country_code,
                "booked_date": booked_date,
                "card_date": card_date,
                "date_of_birth": date_of_birth,
                "full_name": full_name,
                "gender": gender,
                "id_blocked": id_blocked,
                "id_number": id_number,
                "issued_date": issued_date,
                "last_name": last_name,
                "maiden_name": maiden_name,
                "marital_status": marital_status,
                "on_HANIS": on_HANIS,
                "on_NPR": on_NPR,
                "photo": photo,
                "smart_card_issued": smart_card_issued,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_place_country"]) -> MetaOapg.properties.birth_place_country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_place_country_code"]) -> MetaOapg.properties.birth_place_country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["booked_date"]) -> MetaOapg.properties.booked_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card_date"]) -> MetaOapg.properties.card_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_of_birth"]) -> MetaOapg.properties.date_of_birth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_blocked"]) -> MetaOapg.properties.id_blocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_number"]) -> MetaOapg.properties.id_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issued_date"]) -> MetaOapg.properties.issued_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maiden_name"]) -> MetaOapg.properties.maiden_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marital_status"]) -> MetaOapg.properties.marital_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_HANIS"]) -> MetaOapg.properties.on_HANIS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["on_NPR"]) -> MetaOapg.properties.on_NPR: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photo"]) -> MetaOapg.properties.photo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smart_card_issued"]) -> MetaOapg.properties.smart_card_issued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["birth_place_country", "birth_place_country_code", "booked_date", "card_date", "date_of_birth", "full_name", "gender", "id_blocked", "id_number", "issued_date", "last_name", "maiden_name", "marital_status", "on_HANIS", "on_NPR", "photo", "smart_card_issued", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_place_country"]) -> typing.Union[MetaOapg.properties.birth_place_country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_place_country_code"]) -> typing.Union[MetaOapg.properties.birth_place_country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["booked_date"]) -> typing.Union[MetaOapg.properties.booked_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card_date"]) -> typing.Union[MetaOapg.properties.card_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_of_birth"]) -> typing.Union[MetaOapg.properties.date_of_birth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> typing.Union[MetaOapg.properties.full_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_blocked"]) -> typing.Union[MetaOapg.properties.id_blocked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_number"]) -> typing.Union[MetaOapg.properties.id_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issued_date"]) -> typing.Union[MetaOapg.properties.issued_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> typing.Union[MetaOapg.properties.last_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maiden_name"]) -> typing.Union[MetaOapg.properties.maiden_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marital_status"]) -> typing.Union[MetaOapg.properties.marital_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_HANIS"]) -> typing.Union[MetaOapg.properties.on_HANIS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["on_NPR"]) -> typing.Union[MetaOapg.properties.on_NPR, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photo"]) -> typing.Union[MetaOapg.properties.photo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smart_card_issued"]) -> typing.Union[MetaOapg.properties.smart_card_issued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["birth_place_country", "birth_place_country_code", "booked_date", "card_date", "date_of_birth", "full_name", "gender", "id_blocked", "id_number", "issued_date", "last_name", "maiden_name", "marital_status", "on_HANIS", "on_NPR", "photo", "smart_card_issued", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        birth_place_country: typing.Union[MetaOapg.properties.birth_place_country, str, schemas.Unset] = schemas.unset,
        birth_place_country_code: typing.Union[MetaOapg.properties.birth_place_country_code, str, schemas.Unset] = schemas.unset,
        booked_date: typing.Union[MetaOapg.properties.booked_date, str, schemas.Unset] = schemas.unset,
        card_date: typing.Union[MetaOapg.properties.card_date, str, schemas.Unset] = schemas.unset,
        date_of_birth: typing.Union[MetaOapg.properties.date_of_birth, str, schemas.Unset] = schemas.unset,
        full_name: typing.Union[MetaOapg.properties.full_name, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        id_blocked: typing.Union[MetaOapg.properties.id_blocked, str, schemas.Unset] = schemas.unset,
        id_number: typing.Union[MetaOapg.properties.id_number, str, schemas.Unset] = schemas.unset,
        issued_date: typing.Union[MetaOapg.properties.issued_date, str, schemas.Unset] = schemas.unset,
        last_name: typing.Union[MetaOapg.properties.last_name, str, schemas.Unset] = schemas.unset,
        maiden_name: typing.Union[MetaOapg.properties.maiden_name, str, schemas.Unset] = schemas.unset,
        marital_status: typing.Union[MetaOapg.properties.marital_status, str, schemas.Unset] = schemas.unset,
        on_HANIS: typing.Union[MetaOapg.properties.on_HANIS, str, schemas.Unset] = schemas.unset,
        on_NPR: typing.Union[MetaOapg.properties.on_NPR, str, schemas.Unset] = schemas.unset,
        photo: typing.Union[MetaOapg.properties.photo, str, schemas.Unset] = schemas.unset,
        smart_card_issued: typing.Union[MetaOapg.properties.smart_card_issued, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ZafKycGetIdResponseEntity':
        return super().__new__(
            cls,
            *args,
            birth_place_country=birth_place_country,
            birth_place_country_code=birth_place_country_code,
            booked_date=booked_date,
            card_date=card_date,
            date_of_birth=date_of_birth,
            full_name=full_name,
            gender=gender,
            id_blocked=id_blocked,
            id_number=id_number,
            issued_date=issued_date,
            last_name=last_name,
            maiden_name=maiden_name,
            marital_status=marital_status,
            on_HANIS=on_HANIS,
            on_NPR=on_NPR,
            photo=photo,
            smart_card_issued=smart_card_issued,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
