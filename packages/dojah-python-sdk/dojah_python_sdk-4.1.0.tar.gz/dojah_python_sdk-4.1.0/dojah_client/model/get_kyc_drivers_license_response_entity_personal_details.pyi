# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class GetKycDriversLicenseResponseEntityPersonalDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            birth_date = schemas.StrSchema
            blood_group_id = schemas.StrSchema
            country = schemas.StrSchema
            disability_reason = schemas.StrSchema
            facial_mark = schemas.StrSchema
            firstname = schemas.StrSchema
            gender = schemas.StrSchema
            glasses = schemas.StrSchema
            height = schemas.StrSchema
            is_disability = schemas.StrSchema
            lga = schemas.StrSchema
            mother_maiden_name = schemas.StrSchema
            nin_number = schemas.StrSchema
            othername = schemas.StrSchema
            state = schemas.StrSchema
            surname = schemas.StrSchema
            universaltax_identity_number = schemas.StrSchema
            __annotations__ = {
                "birth_date": birth_date,
                "blood_group_id": blood_group_id,
                "country": country,
                "disability_reason": disability_reason,
                "facial_mark": facial_mark,
                "firstname": firstname,
                "gender": gender,
                "glasses": glasses,
                "height": height,
                "is_disability": is_disability,
                "lga": lga,
                "mother_maiden_name": mother_maiden_name,
                "nin_number": nin_number,
                "othername": othername,
                "state": state,
                "surname": surname,
                "universaltax_identity_number": universaltax_identity_number,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birth_date"]) -> MetaOapg.properties.birth_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blood_group_id"]) -> MetaOapg.properties.blood_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability_reason"]) -> MetaOapg.properties.disability_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["facial_mark"]) -> MetaOapg.properties.facial_mark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstname"]) -> MetaOapg.properties.firstname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["glasses"]) -> MetaOapg.properties.glasses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_disability"]) -> MetaOapg.properties.is_disability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lga"]) -> MetaOapg.properties.lga: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mother_maiden_name"]) -> MetaOapg.properties.mother_maiden_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nin_number"]) -> MetaOapg.properties.nin_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["othername"]) -> MetaOapg.properties.othername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surname"]) -> MetaOapg.properties.surname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["universaltax_identity_number"]) -> MetaOapg.properties.universaltax_identity_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["birth_date", "blood_group_id", "country", "disability_reason", "facial_mark", "firstname", "gender", "glasses", "height", "is_disability", "lga", "mother_maiden_name", "nin_number", "othername", "state", "surname", "universaltax_identity_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birth_date"]) -> typing.Union[MetaOapg.properties.birth_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blood_group_id"]) -> typing.Union[MetaOapg.properties.blood_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability_reason"]) -> typing.Union[MetaOapg.properties.disability_reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["facial_mark"]) -> typing.Union[MetaOapg.properties.facial_mark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstname"]) -> typing.Union[MetaOapg.properties.firstname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["glasses"]) -> typing.Union[MetaOapg.properties.glasses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_disability"]) -> typing.Union[MetaOapg.properties.is_disability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lga"]) -> typing.Union[MetaOapg.properties.lga, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mother_maiden_name"]) -> typing.Union[MetaOapg.properties.mother_maiden_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nin_number"]) -> typing.Union[MetaOapg.properties.nin_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["othername"]) -> typing.Union[MetaOapg.properties.othername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surname"]) -> typing.Union[MetaOapg.properties.surname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["universaltax_identity_number"]) -> typing.Union[MetaOapg.properties.universaltax_identity_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["birth_date", "blood_group_id", "country", "disability_reason", "facial_mark", "firstname", "gender", "glasses", "height", "is_disability", "lga", "mother_maiden_name", "nin_number", "othername", "state", "surname", "universaltax_identity_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        birth_date: typing.Union[MetaOapg.properties.birth_date, str, schemas.Unset] = schemas.unset,
        blood_group_id: typing.Union[MetaOapg.properties.blood_group_id, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        disability_reason: typing.Union[MetaOapg.properties.disability_reason, str, schemas.Unset] = schemas.unset,
        facial_mark: typing.Union[MetaOapg.properties.facial_mark, str, schemas.Unset] = schemas.unset,
        firstname: typing.Union[MetaOapg.properties.firstname, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        glasses: typing.Union[MetaOapg.properties.glasses, str, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, str, schemas.Unset] = schemas.unset,
        is_disability: typing.Union[MetaOapg.properties.is_disability, str, schemas.Unset] = schemas.unset,
        lga: typing.Union[MetaOapg.properties.lga, str, schemas.Unset] = schemas.unset,
        mother_maiden_name: typing.Union[MetaOapg.properties.mother_maiden_name, str, schemas.Unset] = schemas.unset,
        nin_number: typing.Union[MetaOapg.properties.nin_number, str, schemas.Unset] = schemas.unset,
        othername: typing.Union[MetaOapg.properties.othername, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        surname: typing.Union[MetaOapg.properties.surname, str, schemas.Unset] = schemas.unset,
        universaltax_identity_number: typing.Union[MetaOapg.properties.universaltax_identity_number, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetKycDriversLicenseResponseEntityPersonalDetails':
        return super().__new__(
            cls,
            *args,
            birth_date=birth_date,
            blood_group_id=blood_group_id,
            country=country,
            disability_reason=disability_reason,
            facial_mark=facial_mark,
            firstname=firstname,
            gender=gender,
            glasses=glasses,
            height=height,
            is_disability=is_disability,
            lga=lga,
            mother_maiden_name=mother_maiden_name,
            nin_number=nin_number,
            othername=othername,
            state=state,
            surname=surname,
            universaltax_identity_number=universaltax_identity_number,
            _configuration=_configuration,
            **kwargs,
        )
