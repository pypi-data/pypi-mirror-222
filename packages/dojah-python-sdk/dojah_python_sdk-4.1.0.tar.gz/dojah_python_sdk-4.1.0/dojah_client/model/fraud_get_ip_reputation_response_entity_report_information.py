# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudGetIpReputationResponseEntityReportInformation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            reverse_dns = schemas.StrSchema
            continent_code = schemas.StrSchema
            continent_name = schemas.StrSchema
            country_code = schemas.StrSchema
            country_name = schemas.StrSchema
            country_currency = schemas.StrSchema
            country_calling_code = schemas.StrSchema
            region_name = schemas.StrSchema
            city_name = schemas.StrSchema
            latitude = schemas.NumberSchema
            longitude = schemas.NumberSchema
            isp = schemas.StrSchema
            asn = schemas.StrSchema
            __annotations__ = {
                "reverse_dns": reverse_dns,
                "continent_code": continent_code,
                "continent_name": continent_name,
                "country_code": country_code,
                "country_name": country_name,
                "country_currency": country_currency,
                "country_calling_code": country_calling_code,
                "region_name": region_name,
                "city_name": city_name,
                "latitude": latitude,
                "longitude": longitude,
                "isp": isp,
                "asn": asn,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reverse_dns"]) -> MetaOapg.properties.reverse_dns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continent_code"]) -> MetaOapg.properties.continent_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["continent_name"]) -> MetaOapg.properties.continent_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_name"]) -> MetaOapg.properties.country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_currency"]) -> MetaOapg.properties.country_currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_calling_code"]) -> MetaOapg.properties.country_calling_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region_name"]) -> MetaOapg.properties.region_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city_name"]) -> MetaOapg.properties.city_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isp"]) -> MetaOapg.properties.isp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asn"]) -> MetaOapg.properties.asn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reverse_dns"]) -> typing.Union[MetaOapg.properties.reverse_dns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continent_code"]) -> typing.Union[MetaOapg.properties.continent_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["continent_name"]) -> typing.Union[MetaOapg.properties.continent_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_name"]) -> typing.Union[MetaOapg.properties.country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_currency"]) -> typing.Union[MetaOapg.properties.country_currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_calling_code"]) -> typing.Union[MetaOapg.properties.country_calling_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region_name"]) -> typing.Union[MetaOapg.properties.region_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city_name"]) -> typing.Union[MetaOapg.properties.city_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isp"]) -> typing.Union[MetaOapg.properties.isp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asn"]) -> typing.Union[MetaOapg.properties.asn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reverse_dns", "continent_code", "continent_name", "country_code", "country_name", "country_currency", "country_calling_code", "region_name", "city_name", "latitude", "longitude", "isp", "asn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reverse_dns: typing.Union[MetaOapg.properties.reverse_dns, str, schemas.Unset] = schemas.unset,
        continent_code: typing.Union[MetaOapg.properties.continent_code, str, schemas.Unset] = schemas.unset,
        continent_name: typing.Union[MetaOapg.properties.continent_name, str, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, str, schemas.Unset] = schemas.unset,
        country_name: typing.Union[MetaOapg.properties.country_name, str, schemas.Unset] = schemas.unset,
        country_currency: typing.Union[MetaOapg.properties.country_currency, str, schemas.Unset] = schemas.unset,
        country_calling_code: typing.Union[MetaOapg.properties.country_calling_code, str, schemas.Unset] = schemas.unset,
        region_name: typing.Union[MetaOapg.properties.region_name, str, schemas.Unset] = schemas.unset,
        city_name: typing.Union[MetaOapg.properties.city_name, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        isp: typing.Union[MetaOapg.properties.isp, str, schemas.Unset] = schemas.unset,
        asn: typing.Union[MetaOapg.properties.asn, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudGetIpReputationResponseEntityReportInformation':
        return super().__new__(
            cls,
            *args,
            reverse_dns=reverse_dns,
            continent_code=continent_code,
            continent_name=continent_name,
            country_code=country_code,
            country_name=country_name,
            country_currency=country_currency,
            country_calling_code=country_calling_code,
            region_name=region_name,
            city_name=city_name,
            latitude=latitude,
            longitude=longitude,
            isp=isp,
            asn=asn,
            _configuration=_configuration,
            **kwargs,
        )
