# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudScreenUserResponseEntityEmailCheckResultDomainDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            domain = schemas.StrSchema
            tld = schemas.StrSchema
            registered = schemas.BoolSchema
            created = schemas.StrSchema
            updated = schemas.StrSchema
            expires = schemas.StrSchema
            registrar_name = schemas.StrSchema
            registered_to = schemas.StrSchema
            disposable = schemas.BoolSchema
            free = schemas.BoolSchema
            custom = schemas.BoolSchema
            dmarc_enforced = schemas.BoolSchema
            spf_strict = schemas.BoolSchema
            valid_mx = schemas.BoolSchema
            accept_all = schemas.BoolSchema
            suspicious_tld = schemas.BoolSchema
            website_exists = schemas.BoolSchema
            __annotations__ = {
                "domain": domain,
                "tld": tld,
                "registered": registered,
                "created": created,
                "updated": updated,
                "expires": expires,
                "registrar_name": registrar_name,
                "registered_to": registered_to,
                "disposable": disposable,
                "free": free,
                "custom": custom,
                "dmarc_enforced": dmarc_enforced,
                "spf_strict": spf_strict,
                "valid_mx": valid_mx,
                "accept_all": accept_all,
                "suspicious_tld": suspicious_tld,
                "website_exists": website_exists,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tld"]) -> MetaOapg.properties.tld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registered"]) -> MetaOapg.properties.registered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrar_name"]) -> MetaOapg.properties.registrar_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registered_to"]) -> MetaOapg.properties.registered_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disposable"]) -> MetaOapg.properties.disposable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["free"]) -> MetaOapg.properties.free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dmarc_enforced"]) -> MetaOapg.properties.dmarc_enforced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spf_strict"]) -> MetaOapg.properties.spf_strict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_mx"]) -> MetaOapg.properties.valid_mx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_all"]) -> MetaOapg.properties.accept_all: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspicious_tld"]) -> MetaOapg.properties.suspicious_tld: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website_exists"]) -> MetaOapg.properties.website_exists: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tld"]) -> typing.Union[MetaOapg.properties.tld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registered"]) -> typing.Union[MetaOapg.properties.registered, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrar_name"]) -> typing.Union[MetaOapg.properties.registrar_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registered_to"]) -> typing.Union[MetaOapg.properties.registered_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disposable"]) -> typing.Union[MetaOapg.properties.disposable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["free"]) -> typing.Union[MetaOapg.properties.free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> typing.Union[MetaOapg.properties.custom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dmarc_enforced"]) -> typing.Union[MetaOapg.properties.dmarc_enforced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spf_strict"]) -> typing.Union[MetaOapg.properties.spf_strict, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_mx"]) -> typing.Union[MetaOapg.properties.valid_mx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_all"]) -> typing.Union[MetaOapg.properties.accept_all, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspicious_tld"]) -> typing.Union[MetaOapg.properties.suspicious_tld, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website_exists"]) -> typing.Union[MetaOapg.properties.website_exists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["domain", "tld", "registered", "created", "updated", "expires", "registrar_name", "registered_to", "disposable", "free", "custom", "dmarc_enforced", "spf_strict", "valid_mx", "accept_all", "suspicious_tld", "website_exists", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        tld: typing.Union[MetaOapg.properties.tld, str, schemas.Unset] = schemas.unset,
        registered: typing.Union[MetaOapg.properties.registered, bool, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, str, schemas.Unset] = schemas.unset,
        expires: typing.Union[MetaOapg.properties.expires, str, schemas.Unset] = schemas.unset,
        registrar_name: typing.Union[MetaOapg.properties.registrar_name, str, schemas.Unset] = schemas.unset,
        registered_to: typing.Union[MetaOapg.properties.registered_to, str, schemas.Unset] = schemas.unset,
        disposable: typing.Union[MetaOapg.properties.disposable, bool, schemas.Unset] = schemas.unset,
        free: typing.Union[MetaOapg.properties.free, bool, schemas.Unset] = schemas.unset,
        custom: typing.Union[MetaOapg.properties.custom, bool, schemas.Unset] = schemas.unset,
        dmarc_enforced: typing.Union[MetaOapg.properties.dmarc_enforced, bool, schemas.Unset] = schemas.unset,
        spf_strict: typing.Union[MetaOapg.properties.spf_strict, bool, schemas.Unset] = schemas.unset,
        valid_mx: typing.Union[MetaOapg.properties.valid_mx, bool, schemas.Unset] = schemas.unset,
        accept_all: typing.Union[MetaOapg.properties.accept_all, bool, schemas.Unset] = schemas.unset,
        suspicious_tld: typing.Union[MetaOapg.properties.suspicious_tld, bool, schemas.Unset] = schemas.unset,
        website_exists: typing.Union[MetaOapg.properties.website_exists, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudScreenUserResponseEntityEmailCheckResultDomainDetails':
        return super().__new__(
            cls,
            *args,
            domain=domain,
            tld=tld,
            registered=registered,
            created=created,
            updated=updated,
            expires=expires,
            registrar_name=registrar_name,
            registered_to=registered_to,
            disposable=disposable,
            free=free,
            custom=custom,
            dmarc_enforced=dmarc_enforced,
            spf_strict=spf_strict,
            valid_mx=valid_mx,
            accept_all=accept_all,
            suspicious_tld=suspicious_tld,
            website_exists=website_exists,
            _configuration=_configuration,
            **kwargs,
        )
