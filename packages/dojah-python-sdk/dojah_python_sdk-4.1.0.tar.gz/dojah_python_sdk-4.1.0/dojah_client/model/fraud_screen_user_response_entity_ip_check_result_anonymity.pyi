# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class FraudScreenUserResponseEntityIpCheckResultAnonymity(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            is_proxy = schemas.BoolSchema
            is_webproxy = schemas.BoolSchema
            is_vpn = schemas.BoolSchema
            is_hosting = schemas.BoolSchema
            is_tor = schemas.BoolSchema
            __annotations__ = {
                "is_proxy": is_proxy,
                "is_webproxy": is_webproxy,
                "is_vpn": is_vpn,
                "is_hosting": is_hosting,
                "is_tor": is_tor,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_proxy"]) -> MetaOapg.properties.is_proxy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_webproxy"]) -> MetaOapg.properties.is_webproxy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_vpn"]) -> MetaOapg.properties.is_vpn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_hosting"]) -> MetaOapg.properties.is_hosting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_tor"]) -> MetaOapg.properties.is_tor: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_proxy"]) -> typing.Union[MetaOapg.properties.is_proxy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_webproxy"]) -> typing.Union[MetaOapg.properties.is_webproxy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_vpn"]) -> typing.Union[MetaOapg.properties.is_vpn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_hosting"]) -> typing.Union[MetaOapg.properties.is_hosting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_tor"]) -> typing.Union[MetaOapg.properties.is_tor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_proxy", "is_webproxy", "is_vpn", "is_hosting", "is_tor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_proxy: typing.Union[MetaOapg.properties.is_proxy, bool, schemas.Unset] = schemas.unset,
        is_webproxy: typing.Union[MetaOapg.properties.is_webproxy, bool, schemas.Unset] = schemas.unset,
        is_vpn: typing.Union[MetaOapg.properties.is_vpn, bool, schemas.Unset] = schemas.unset,
        is_hosting: typing.Union[MetaOapg.properties.is_hosting, bool, schemas.Unset] = schemas.unset,
        is_tor: typing.Union[MetaOapg.properties.is_tor, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudScreenUserResponseEntityIpCheckResultAnonymity':
        return super().__new__(
            cls,
            *args,
            is_proxy=is_proxy,
            is_webproxy=is_webproxy,
            is_vpn=is_vpn,
            is_hosting=is_hosting,
            is_tor=is_tor,
            _configuration=_configuration,
            **kwargs,
        )
