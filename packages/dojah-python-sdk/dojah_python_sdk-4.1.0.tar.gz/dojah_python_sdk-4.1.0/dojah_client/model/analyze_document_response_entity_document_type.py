# coding: utf-8

"""
    DOJAH Publilc APIs

    Use Dojah to verify, onboard and manage user identity across Africa!

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from dojah_client import schemas  # noqa: F401


class AnalyzeDocumentResponseEntityDocumentType(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            document_country_code = schemas.StrSchema
            document_country_name = schemas.StrSchema
            document_name = schemas.StrSchema
            document_type_id = schemas.NumberSchema
            document_year = schemas.StrSchema
            __annotations__ = {
                "document_country_code": document_country_code,
                "document_country_name": document_country_name,
                "document_name": document_name,
                "document_type_id": document_type_id,
                "document_year": document_year,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_country_code"]) -> MetaOapg.properties.document_country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_country_name"]) -> MetaOapg.properties.document_country_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_name"]) -> MetaOapg.properties.document_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_type_id"]) -> MetaOapg.properties.document_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["document_year"]) -> MetaOapg.properties.document_year: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["document_country_code", "document_country_name", "document_name", "document_type_id", "document_year", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_country_code"]) -> typing.Union[MetaOapg.properties.document_country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_country_name"]) -> typing.Union[MetaOapg.properties.document_country_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_name"]) -> typing.Union[MetaOapg.properties.document_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_type_id"]) -> typing.Union[MetaOapg.properties.document_type_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["document_year"]) -> typing.Union[MetaOapg.properties.document_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["document_country_code", "document_country_name", "document_name", "document_type_id", "document_year", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        document_country_code: typing.Union[MetaOapg.properties.document_country_code, str, schemas.Unset] = schemas.unset,
        document_country_name: typing.Union[MetaOapg.properties.document_country_name, str, schemas.Unset] = schemas.unset,
        document_name: typing.Union[MetaOapg.properties.document_name, str, schemas.Unset] = schemas.unset,
        document_type_id: typing.Union[MetaOapg.properties.document_type_id, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        document_year: typing.Union[MetaOapg.properties.document_year, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnalyzeDocumentResponseEntityDocumentType':
        return super().__new__(
            cls,
            *args,
            document_country_code=document_country_code,
            document_country_name=document_country_name,
            document_name=document_name,
            document_type_id=document_type_id,
            document_year=document_year,
            _configuration=_configuration,
            **kwargs,
        )
