// ======================================================================
// \title  CommandsTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Commands topology
// ======================================================================

#include "CommandsTopologyAc.hpp"

namespace M {


  // ----------------------------------------------------------------------
  // Component instances
  // ----------------------------------------------------------------------

  C c1(FW_OPTIONAL_NAME("c1"));

  C c2(FW_OPTIONAL_NAME("c2"));

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    c1.init(InstanceIds::c1);
    c2.init(InstanceIds::c2);
  }

  void configComponents(const TopologyState& state) {
    // Nothing to do
  }

  void setBaseIds() {
    c1.setIdBase(BaseIds::c1);
    c2.setIdBase(BaseIds::c2);
  }

  void connectComponents() {
    // Nothing to do
  }

  void regCommands() {
    c1.regCommandsSpecial();
    c2.regCommands();
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    // Nothing to do
  }

  void stopTasks(const TopologyState& state) {
    // Nothing to do
  }

  void freeThreads(const TopologyState& state) {
    // Nothing to do
  }

  void tearDownComponents(const TopologyState& state) {
    // Nothing to do
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
