# This file was auto-generated by Fern from our API Definition.

import typing

from .environment import FliptApiEnvironment
from .resources.auth.client import AsyncAuthClient, AuthClient
from .resources.auth_method_k_8_s.client import AsyncAuthMethodK8SClient, AuthMethodK8SClient
from .resources.auth_method_oidc.client import AsyncAuthMethodOidcClient, AuthMethodOidcClient
from .resources.auth_method_token.client import AsyncAuthMethodTokenClient, AuthMethodTokenClient
from .resources.constraints.client import AsyncConstraintsClient, ConstraintsClient
from .resources.distributions.client import AsyncDistributionsClient, DistributionsClient
from .resources.evaluate.client import AsyncEvaluateClient, EvaluateClient
from .resources.evaluation.client import AsyncEvaluationClient, EvaluationClient
from .resources.flags.client import AsyncFlagsClient, FlagsClient
from .resources.namespaces.client import AsyncNamespacesClient, NamespacesClient
from .resources.rollouts.client import AsyncRolloutsClient, RolloutsClient
from .resources.rules.client import AsyncRulesClient, RulesClient
from .resources.segments.client import AsyncSegmentsClient, SegmentsClient
from .resources.variants.client import AsyncVariantsClient, VariantsClient


class FliptApi:
    def __init__(
        self, *, environment: FliptApiEnvironment = FliptApiEnvironment.PRODUCTION, token: typing.Optional[str] = None
    ):
        self._environment = environment
        self._token = token
        self.evaluation = EvaluationClient(environment=self._environment, token=self._token)
        self.auth_method_k_8_s = AuthMethodK8SClient(environment=self._environment, token=self._token)
        self.auth_method_oidc = AuthMethodOidcClient(environment=self._environment, token=self._token)
        self.auth_method_token = AuthMethodTokenClient(environment=self._environment, token=self._token)
        self.auth = AuthClient(environment=self._environment, token=self._token)
        self.constraints = ConstraintsClient(environment=self._environment, token=self._token)
        self.distributions = DistributionsClient(environment=self._environment, token=self._token)
        self.evaluate = EvaluateClient(environment=self._environment, token=self._token)
        self.flags = FlagsClient(environment=self._environment, token=self._token)
        self.namespaces = NamespacesClient(environment=self._environment, token=self._token)
        self.rollouts = RolloutsClient(environment=self._environment, token=self._token)
        self.rules = RulesClient(environment=self._environment, token=self._token)
        self.segments = SegmentsClient(environment=self._environment, token=self._token)
        self.variants = VariantsClient(environment=self._environment, token=self._token)


class AsyncFliptApi:
    def __init__(
        self, *, environment: FliptApiEnvironment = FliptApiEnvironment.PRODUCTION, token: typing.Optional[str] = None
    ):
        self._environment = environment
        self._token = token
        self.evaluation = AsyncEvaluationClient(environment=self._environment, token=self._token)
        self.auth_method_k_8_s = AsyncAuthMethodK8SClient(environment=self._environment, token=self._token)
        self.auth_method_oidc = AsyncAuthMethodOidcClient(environment=self._environment, token=self._token)
        self.auth_method_token = AsyncAuthMethodTokenClient(environment=self._environment, token=self._token)
        self.auth = AsyncAuthClient(environment=self._environment, token=self._token)
        self.constraints = AsyncConstraintsClient(environment=self._environment, token=self._token)
        self.distributions = AsyncDistributionsClient(environment=self._environment, token=self._token)
        self.evaluate = AsyncEvaluateClient(environment=self._environment, token=self._token)
        self.flags = AsyncFlagsClient(environment=self._environment, token=self._token)
        self.namespaces = AsyncNamespacesClient(environment=self._environment, token=self._token)
        self.rollouts = AsyncRolloutsClient(environment=self._environment, token=self._token)
        self.rules = AsyncRulesClient(environment=self._environment, token=self._token)
        self.segments = AsyncSegmentsClient(environment=self._environment, token=self._token)
        self.variants = AsyncVariantsClient(environment=self._environment, token=self._token)
