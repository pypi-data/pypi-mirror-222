# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .resources.models.client import AsyncModelsClient, ModelsClient
from .resources.proxy.client import AsyncProxyClient, ProxyClient
from .types.chat_completions_response_dto import ChatCompletionsResponseDto
from .types.chat_request_dto import ChatRequestDto
from .types.http_validation_error import HttpValidationError
from .types.tokens_response_dto import TokensResponseDto

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Optimizely:
    def __init__(self, *, environment: str, timeout: typing.Optional[float] = 60):
        self._environment = environment
        self._client_wrapper = SyncClientWrapper(httpx_client=httpx.Client(timeout=timeout))
        self.proxy = ProxyClient(environment=environment, client_wrapper=self._client_wrapper)
        self.models = ModelsClient(environment=environment, client_wrapper=self._client_wrapper)

    def chat(self, *, request: ChatRequestDto) -> TokensResponseDto:
        """
        Parameters:
            - request: ChatRequestDto.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/tokens"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokensResponseDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def chat_completion(self, *, request: ChatRequestDto) -> ChatCompletionsResponseDto:
        """
        Parameters:
            - request: ChatRequestDto.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/complete"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ChatCompletionsResponseDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncOptimizely:
    def __init__(self, *, environment: str, timeout: typing.Optional[float] = 60):
        self._environment = environment
        self._client_wrapper = AsyncClientWrapper(httpx_client=httpx.AsyncClient(timeout=timeout))
        self.proxy = AsyncProxyClient(environment=environment, client_wrapper=self._client_wrapper)
        self.models = AsyncModelsClient(environment=environment, client_wrapper=self._client_wrapper)

    async def chat(self, *, request: ChatRequestDto) -> TokensResponseDto:
        """
        Parameters:
            - request: ChatRequestDto.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/tokens"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(TokensResponseDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def chat_completion(self, *, request: ChatRequestDto) -> ChatCompletionsResponseDto:
        """
        Parameters:
            - request: ChatRequestDto.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "api/complete"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ChatCompletionsResponseDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
