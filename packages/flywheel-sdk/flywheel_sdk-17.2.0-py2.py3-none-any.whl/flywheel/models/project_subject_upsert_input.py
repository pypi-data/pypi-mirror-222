# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401
import six

class ProjectSubjectUpsertInput(object):

    swagger_types = {
        'id': 'str',
        'label': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'sex': 'str',
        'type': 'str',
        'race': 'str',
        'ethnicity': 'str',
        'species': 'str',
        'strain': 'str',
        'info': 'object'
    }

    attribute_map = {
        'id': '_id',
        'label': 'label',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'sex': 'sex',
        'type': 'type',
        'race': 'race',
        'ethnicity': 'ethnicity',
        'species': 'species',
        'strain': 'strain',
        'info': 'info'
    }

    rattribute_map = {
        '_id': 'id',
        'label': 'label',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'sex': 'sex',
        'type': 'type',
        'race': 'race',
        'ethnicity': 'ethnicity',
        'species': 'species',
        'strain': 'strain',
        'info': 'info'
    }

    def __init__(self, id=None, label=None, firstname=None, lastname=None, sex=None, type=None, race=None, ethnicity=None, species=None, strain=None, info=None):  # noqa: E501
        """ProjectSubjectUpsertInput - a model defined in Swagger"""
        super(ProjectSubjectUpsertInput, self).__init__()

        self._id = None
        self._label = None
        self._firstname = None
        self._lastname = None
        self._sex = None
        self._type = None
        self._race = None
        self._ethnicity = None
        self._species = None
        self._strain = None
        self._info = None
        self.discriminator = None
        self.alt_discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if sex is not None:
            self.sex = sex
        if type is not None:
            self.type = type
        if race is not None:
            self.race = race
        if ethnicity is not None:
            self.ethnicity = ethnicity
        if species is not None:
            self.species = species
        if strain is not None:
            self.strain = strain
        if info is not None:
            self.info = info

    @property
    def id(self):
        """Gets the id of this ProjectSubjectUpsertInput.


        :return: The id of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectSubjectUpsertInput.


        :param id: The id of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ProjectSubjectUpsertInput.


        :return: The label of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ProjectSubjectUpsertInput.


        :param label: The label of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def firstname(self):
        """Gets the firstname of this ProjectSubjectUpsertInput.


        :return: The firstname of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this ProjectSubjectUpsertInput.


        :param firstname: The firstname of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this ProjectSubjectUpsertInput.


        :return: The lastname of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this ProjectSubjectUpsertInput.


        :param lastname: The lastname of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def sex(self):
        """Gets the sex of this ProjectSubjectUpsertInput.


        :return: The sex of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this ProjectSubjectUpsertInput.


        :param sex: The sex of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def type(self):
        """Gets the type of this ProjectSubjectUpsertInput.


        :return: The type of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProjectSubjectUpsertInput.


        :param type: The type of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def race(self):
        """Gets the race of this ProjectSubjectUpsertInput.


        :return: The race of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._race

    @race.setter
    def race(self, race):
        """Sets the race of this ProjectSubjectUpsertInput.


        :param race: The race of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._race = race

    @property
    def ethnicity(self):
        """Gets the ethnicity of this ProjectSubjectUpsertInput.


        :return: The ethnicity of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._ethnicity

    @ethnicity.setter
    def ethnicity(self, ethnicity):
        """Sets the ethnicity of this ProjectSubjectUpsertInput.


        :param ethnicity: The ethnicity of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._ethnicity = ethnicity

    @property
    def species(self):
        """Gets the species of this ProjectSubjectUpsertInput.


        :return: The species of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this ProjectSubjectUpsertInput.


        :param species: The species of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._species = species

    @property
    def strain(self):
        """Gets the strain of this ProjectSubjectUpsertInput.


        :return: The strain of this ProjectSubjectUpsertInput.
        :rtype: str
        """
        return self._strain

    @strain.setter
    def strain(self, strain):
        """Sets the strain of this ProjectSubjectUpsertInput.


        :param strain: The strain of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: str
        """

        self._strain = strain

    @property
    def info(self):
        """Gets the info of this ProjectSubjectUpsertInput.


        :return: The info of this ProjectSubjectUpsertInput.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this ProjectSubjectUpsertInput.


        :param info: The info of this ProjectSubjectUpsertInput.  # noqa: E501
        :type: object
        """

        self._info = info


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSubjectUpsertInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
