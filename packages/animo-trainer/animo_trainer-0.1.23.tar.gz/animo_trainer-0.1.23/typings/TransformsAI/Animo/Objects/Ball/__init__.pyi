import typing, abc
from TransformsAI.Animo import ObjectInfo, ObjectGroup, GridObject, HoldableObject, Directions, VoxelGrid, Actor, GridTransform
from System import IEquatable_1, Array_1, Guid, ValueTuple_2
from TransformsAI.Animo.Constants import TypeIds, Effects
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from System.Collections.Generic import List_1
from TransformsAI.Animo.Intents import Intent, UseIntent, HeldUseIntent, ArcLaunchIntent

class BallInfo(ObjectInfo, IEquatable_1[BallInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: BallInfo, right: BallInfo) -> bool: ...
    def __ne__(self, left: BallInfo, right: BallInfo) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: BallInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BallObject(HoldableObject):
    def __init__(self) -> None: ...
    Info : ObjectInfo
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def GrabPriority(self) -> float: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Holder(self) -> Actor: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsBeingHeld(self) -> bool: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def ShouldNotExist(self) -> bool: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    def GetRollDistance(self, direction: Vec2Int, maxRoll: int) -> int: ...
    def GetUseIntentHeld(self, user: Actor) -> HeldUseIntent: ...
    def TryGetArcIntent(self, absoluteDirection: Vec2Int, arc: Array_1[int]) -> ArcLaunchIntent: ...
    def TryGetRollIntent(self, absoluteDirection: Vec2Int, distance: int) -> BallRollIntent: ...


class BallRollIntent(Intent):
    def __init__(self) -> None: ...
    @property
    def CellBouncedBackFrom(self) -> typing.Optional[Vec2Int]: ...
    @CellBouncedBackFrom.setter
    def CellBouncedBackFrom(self, value: typing.Optional[Vec2Int]) -> typing.Optional[Vec2Int]: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Direction(self) -> Vec2Int: ...
    @Direction.setter
    def Direction(self, value: Vec2Int) -> Vec2Int: ...
    @property
    def Distance(self) -> int: ...
    @Distance.setter
    def Distance(self, value: int) -> int: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> GridObject: ...


class KickBallIntent(UseIntent):
    def __init__(self) -> None: ...
    KickDistance : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def RollBallIntent(self) -> BallRollIntent: ...
    @RollBallIntent.setter
    def RollBallIntent(self, value: BallRollIntent) -> BallRollIntent: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class LineHelpers(abc.ABC):
    @staticmethod
    def RasterizeLine(origin: Vec2Int, endPoint: Vec2Int, outCells: List_1[Vec2Int]) -> None: ...


class ThrowBallIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Arc : Array_1[int]
    @property
    def ArcIntent(self) -> ArcLaunchIntent: ...
    @ArcIntent.setter
    def ArcIntent(self, value: ArcLaunchIntent) -> ArcLaunchIntent: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...

