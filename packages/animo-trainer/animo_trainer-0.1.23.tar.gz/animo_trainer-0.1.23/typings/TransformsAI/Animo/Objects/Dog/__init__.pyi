import typing
from TransformsAI.Animo import ObjectInfo, ObjectGroup, GridObject, Actor, HoldableObject, Directions, VoxelGrid, GridTransform
from System import IEquatable_1, Array_1, Guid, ValueTuple_2
from TransformsAI.Animo.Constants import TypeIds, Effects
from TransformsAI.Animo.Numerics import Vec3Int, Vec2Int
from System.Collections.Generic import List_1
from TransformsAI.Animo.Intents import Intent, UseIntent

class DogInfo(ObjectInfo, IEquatable_1[DogInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: DogInfo, right: DogInfo) -> bool: ...
    def __ne__(self, left: DogInfo, right: DogInfo) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: DogInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class DogInteractions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Pet : DogInteractions # 0
    Destroy : DogInteractions # 1


class DogObject(Actor):
    def __init__(self) -> None: ...
    DecisionOverride : Array_1[DogObject.Decision]
    DidWalkFail : bool
    ForceMoveTarget : Vec3Int
    ForceMoveWillRun : bool
    HomeCell : Vec2Int
    Info : ObjectInfo
    InterestBoredom : int
    InterestExpiry : int
    IsDecisionOverriden : bool
    IsOnInterestCooldown : bool
    LastInterest : Actor
    LastTurnHeldObject : HoldableObject
    LeashDistance : float
    State : DogObject.States
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def DidDropFail(self) -> bool: ...
    @property
    def DidFlinch(self) -> bool: ...
    @DidFlinch.setter
    def DidFlinch(self, value: bool) -> bool: ...
    @property
    def DidGrabFail(self) -> bool: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def HeldObject(self) -> HoldableObject: ...
    @HeldObject.setter
    def HeldObject(self, value: HoldableObject) -> HoldableObject: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def ShouldNotExist(self) -> bool: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    def CanWalkForward(self) -> bool: ...
    def ForceMove(self, target: Vec3Int, willRun: bool) -> None: ...

    class Decision(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Stay : DogObject.Decision # 0
        Wait : DogObject.Decision # 1
        MoveForward : DogObject.Decision # 2
        TurnRight : DogObject.Decision # 3
        TurnLeft : DogObject.Decision # 4
        TurnAround : DogObject.Decision # 5
        Grab : DogObject.Decision # 6
        Drop : DogObject.Decision # 7


    class States(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        ForceMove : DogObject.States # 0
        WaitForPet : DogObject.States # 1
        BeingPet : DogObject.States # 2
        Interested : DogObject.States # 3
        FetchGetBall : DogObject.States # 4
        FetchReturnBall : DogObject.States # 5
        BoredMoveRandomly : DogObject.States # 6
        BoredSleep : DogObject.States # 7



class PetDogIntent(UseIntent):
    def __init__(self) -> None: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...

