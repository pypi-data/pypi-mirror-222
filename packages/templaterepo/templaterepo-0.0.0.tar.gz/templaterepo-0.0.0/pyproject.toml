#
#
#
#
#

# References:
# 1. Python Packaging User Guide by the Python Packaging Authority (PyPA):
#    https://packaging.python.org/
# 2. SetupTools User Guide:
#    https://setuptools.pypa.io/
#    https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
# 3. https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/

[build-system]
requires = ["setuptools>=61.0", "versioningit"]
build-backend = "setuptools.build_meta"


# ----------------------------------------- setuptools -------------------------------------------
[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = true


# ----------------------------------------- versioningit -----------------------------------------
[tool.versioningit]

[tool.versioningit.vcs]
method = "git"
match = ["v[0-9]*.[0-9]*.[0-9]*"]
default-tag = "v0.0.0"

[tool.versioningit.tag2version]
regex = "^v(?P<version>(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)(?:-(?:(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?:[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"
require-match = true

[tool.versioningit.format]
# The format used by versioneer
# Ref: https://versioningit.readthedocs.io/en/stable/index.html#example-configurations
method = { module = "setup", value = "versioningit_format_custom"}
default-branch = "main"

[tool.versioningit.onbuild]
method = "replace-version"
regex = "^\\s*__version_details__\\s*=\\s*(?P<version>.*)"
require-match = true
replacement = """dict(
    version="{version}",
    version_tuple={version_tuple},
    author_date="{author_date:%Y.%m.%d}",
    build_date="{build_date:%Y.%m.%d}",
    branch="{branch}",
    distance="{distance}",
    head_commit_hash="{revision}",
)"""
source-file = "src/templaterepo/__init__.py"
build-file = "templaterepo/__init__.py"


# ----------------------------------------- Pytest -----------------------------------------
# Ref: https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
# Ref: https://docs.pytest.org/en/stable/reference/customize.html
[tool.pytest.ini_options]
log_cli = true
minversion = "7.0"
testpaths = ["tests"]
addopts = "-ra --verbose --color=yes --full-trace --cov-config=pyproject.toml"


# ----------------------------------------- pytest-cov / Coverage.py -----------------------------------------
# Ref: https://pytest-cov.readthedocs.io/en/latest/config.html
# Ref: https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
show_missing = true

[tool.coverage.html]
directory = "coverage_html_report"

# ----------------------------------------- Pylint -----------------------------------------
# Ref: https://github.com/pylint-dev/pylint/blob/v2.17.4/examples/pyproject.toml
[tool.pylint.main]
# fail-on =
fail-under = 10
recursive=true
ignore = ["CVS"]
jobs = 0
limit-inference-results = 500
load-plugins = [
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.code_style",
    "pylint.extensions.emptystring",
    "pylint.extensions.comparetozero",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.confusing_elif",
    "pylint.extensions.for_any_all",
    "pylint.extensions.consider_refactoring_into_while_condition",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.mccabe",
    "pylint.extensions.dict_init_mutate",
    "pylint.extensions.docstyle",
    "pylint.extensions.dunder",
    "pylint.extensions.check_elif",
    "pylint.extensions.empty_comment",
    "pylint.extensions.eq_without_hash",
    "pylint.extensions.private_import",
    "pylint.extensions.magic_value",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.no_self_use",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.docparams",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
    "pylint.extensions.while_used",
]

[tool.pylint.basic]
good-names = ["i", "j", "k", "x", "y", "z", "ex", "Run", "_"]

[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-public-methods = 50
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.format]
max-line-length = 100
max-module-lines = 1000

[tool.pylint.imports]
ext-import-graph = "_local_reports/pylint/diagrams/import_graph_external.svg"
import-graph = "_local_reports/pylint/diagrams/import_graph_all.svg"
int-import-graph = "_local_reports/pylint/diagrams/import_graph_internal.svg"

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
disable = []

[tool.pylint.reports]
reports = true
score = true
msg-template = "{path}\nL[{line}:{end_line}] - Col[{column}:{end_column}] - Obj: {obj}\n\t{msg_id}: {category} - {symbol}\n\t{msg}\n"
output-format = [
    "json:_local_reports/pylint/json.json",
    "text:_local_reports/pylint/text.txt",
    "parseable:_local_reports/pylint/parseable.txt",
    "msvs:_local_reports/pylint/msvs.txt",
    "colorized",
]

[tool.pylint.spelling]
spelling-dict = "en_US"


# ----------------------------------------- mypy -----------------------------------------
# Ref: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml
[tool.mypy]
packages = ["template_package"]
strict = true
warn_return_any = true
warn_unused_configs = true
incremental = false
show_error_context = true
show_column_numbers = true
pretty = true
color_output = true
show_traceback = true
any_exprs_report = "_local_reports/mypy"
html_report = "_local_reports/mypy"
linecount_report = "_local_reports/mypy"
linecoverage_report = "_local_reports/mypy"
lineprecision_report = "_local_reports/mypy"
txt_report = "_local_reports/mypy"

# ----------------------------------------- isort ------------------------------------------------
# Ref: https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
profile = "black"
src_paths = ["template_package"]
conda_env = ""
lines_before_imports = 2
lines_after_imports = 2
lines_between_sections = 0
verbose = true
color_output = true
only_modified = true
filter_files = true
no_lines_before = ['future', 'stdlib', 'thirdparty', 'firstparty', 'localfolder']
dedup_headings = true
overwrite_in_place = true

[tool.isort.import_headings]
future = 'Futures'
stdlib = 'Standard libraries'
thirdparty = 'Non-standard libraries'
firstparty = 'Self'


# ----------------------------------------- YAPF ------------------------------------------------
# Ref: https://github.com/google/yapf#formatting-style
# https://github.com/google/yapf/blob/main/yapf/yapflib/style.py
[tool.yapf]
based_on_style = 'pep8'
use_tabs = false
INDENT_WIDTH = 4
COLUMN_LIMIT = 100


# ----------------------------------------- black ------------------------------------------------
# Ref: https://black.readthedocs.io/en/stable/usage_and_configuration/index.html
[tool.black]
line-length = 100


# ----------------------------------------- Project Metadata -------------------------------------
# !!! DO NOT EDIT THIS SECTION MANUALLY !!!
# This section is automatically updated by PyPackIT
# References:
#   PEP 621:
#     https://peps.python.org/pep-0621/
#   Python Packaging User Guide - Declaring project metadata:
#     https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
[project]
dynamic = ["version"]
name = "templaterepo"
license = {file = "LICENSE"}
readme = {file = "README.md", content-type = "text/markdown"}
dependencies = [
    "numpy"
]
