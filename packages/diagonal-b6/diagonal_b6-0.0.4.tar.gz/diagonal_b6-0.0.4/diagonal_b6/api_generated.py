# Code generated by generate_api.py. DO NOT EDIT.
# Client library for Diagonal's geospatial analysis engine, b6.

from __future__ import annotations

from typing import Callable

import diagonal_b6.expression
from diagonal_b6.expression import Call, Symbol, Lambda, Result, register_builtin_result

VERSION = '0.0.4+modified'

class CollectionTraits:

    def map_parallel(self, a0: Callable[[AnyTraits],AnyTraits]) -> CollectionResult:
        return map_parallel(self, a0)

    def flattern(self) -> CollectionResult:
        return flattern(self)

    def top(self, a0: IntTraits) -> CollectionResult:
        return top(self, a0)

    def filter(self, a0: Callable[[AnyTraits],BoolTraits]) -> CollectionResult:
        return filter(self, a0)

    def sum_by_key(self) -> CollectionResult:
        return sum_by_key(self)

    def take(self, a0: IntTraits) -> CollectionResult:
        return take(self, a0)

    def count_values(self) -> CollectionResult:
        return count_values(self)

    def count(self) -> IntTraits:
        return count(self)

    def map(self, a0: Callable[[AnyTraits],AnyTraits]) -> CollectionResult:
        return map(self, a0)

    def map_items(self, a0: Callable[[PairTraits],AnyTraits]) -> CollectionResult:
        return map_items(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class RenderableTraits:

    def to_geojson(self) -> GeoJSONTraits:
        return to_geojson(self)

    @classmethod
    def _collection(cls):
        return AnyRenderableCollectionResult

class RenderableValuesTraits:

    def to_geojson(self) -> CollectionTraits:
        return self.map(Lambda(to_geojson, [self._values()]))

class AnyRenderableValuesResult(Result, RenderableValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return RenderableResult

class GeometryTraits(RenderableTraits):

    def points(self) -> PointCollectionResult:
        return points(self)

    def centroid(self) -> PointTraits:
        return centroid(self)

    def intersecting(self) -> QueryTraits:
        return intersecting(self)

    def tile_paths(self, a0: IntTraits) -> IntStringCollectionResult:
        return tile_paths(self, a0)

    @classmethod
    def _collection(cls):
        return AnyGeometryCollectionResult

class GeometryValuesTraits(RenderableValuesTraits):

    def points(self) -> CollectionTraits:
        return self.map(Lambda(points, [self._values()]))

    def centroid(self) -> PointCollectionTraits:
        return self.map(Lambda(centroid, [self._values()]))

    def intersecting(self) -> CollectionTraits:
        return self.map(Lambda(intersecting, [self._values()]))

    def tile_paths(self, a0: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: tile_paths(x, a0), [self._values()]))

class AnyGeometryValuesResult(Result, GeometryValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return GeometryResult

class IdentifiableTraits:

    def count_tag_value(self, a0: StringTraits) -> CollectionResult:
        return count_tag_value(self, a0)

    def get(self, a0: StringTraits) -> TagTraits:
        return get(self, a0)

    def get_int(self, a0: StringTraits) -> IntTraits:
        return get_int(self, a0)

    def remove_tag(self, a0: StringTraits) -> ChangeTraits:
        return remove_tag(self, a0)

    def add_tag(self, a0: TagTraits) -> ChangeTraits:
        return add_tag(self, a0)

    def debug_tokens(self) -> IntStringCollectionResult:
        return debug_tokens(self)

    def all_tags(self) -> IntTagCollectionResult:
        return all_tags(self)

    def get_float(self, a0: StringTraits) -> FloatTraits:
        return get_float(self, a0)

    def get_string(self, a0: StringTraits) -> StringTraits:
        return get_string(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class IdentifiableValuesTraits:

    def count_tag_value(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: count_tag_value(x, a0), [self._values()]))

    def get(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: get(x, a0), [self._values()]))

    def get_int(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: get_int(x, a0), [self._values()]))

    def remove_tag(self, a0: StringTraits) -> AnyChangeCollectionTraits:
        return self.map(Lambda(lambda x: remove_tag(x, a0), [self._values()]))

    def add_tag(self, a0: TagTraits) -> AnyChangeCollectionTraits:
        return self.map(Lambda(lambda x: add_tag(x, a0), [self._values()]))

    def debug_tokens(self) -> CollectionTraits:
        return self.map(Lambda(debug_tokens, [self._values()]))

    def all_tags(self) -> CollectionTraits:
        return self.map(Lambda(all_tags, [self._values()]))

    def get_float(self, a0: StringTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: get_float(x, a0), [self._values()]))

    def get_string(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: get_string(x, a0), [self._values()]))

class AnyIdentifiableValuesResult(Result, IdentifiableValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return IdentifiableResult

class FeatureTraits(RenderableTraits, IdentifiableTraits):

    def point_features(self) -> PointFeatureCollectionResult:
        return point_features(self)

    def reachable(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> FeatureCollectionResult:
        return reachable(self, a0, a1, a2)

    def tile_ids(self) -> FeatureIDIntCollectionResult:
        return tile_ids(self)

    def paths_to_reach(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> FeatureIDIntCollectionResult:
        return paths_to_reach(self, a0, a1, a2)

    def tile_ids_hex(self) -> FeatureIDStringCollectionResult:
        return tile_ids_hex(self)

    def closest(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> FeatureTraits:
        return closest(self, a0, a1, a2)

    def has_key(self, a0: StringTraits) -> BoolTraits:
        return has_key(self, a0)

    def closest_distance(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> FloatTraits:
        return closest_distance(self, a0, a1, a2)

    def reachable_area(self, a0: StringTraits, a1: FloatTraits) -> FloatTraits:
        return reachable_area(self, a0, a1)

    def reachable_points(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> PointFeatureCollectionResult:
        return reachable_points(self, a0, a1, a2)

    def connect_to_network(self) -> ChangeTraits:
        return connect_to_network(self)

    @classmethod
    def _collection(cls):
        return FeatureCollectionResult

class FeatureValuesTraits(RenderableValuesTraits, IdentifiableValuesTraits):

    def point_features(self) -> CollectionTraits:
        return self.map(Lambda(point_features, [self._values()]))

    def reachable(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: reachable(x, a0, a1, a2), [self._values()]))

    def tile_ids(self) -> CollectionTraits:
        return self.map(Lambda(tile_ids, [self._values()]))

    def paths_to_reach(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: paths_to_reach(x, a0, a1, a2), [self._values()]))

    def tile_ids_hex(self) -> CollectionTraits:
        return self.map(Lambda(tile_ids_hex, [self._values()]))

    def closest(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> FeatureCollectionTraits:
        return self.map(Lambda(lambda x: closest(x, a0, a1, a2), [self._values()]))

    def has_key(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: has_key(x, a0), [self._values()]))

    def closest_distance(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: closest_distance(x, a0, a1, a2), [self._values()]))

    def reachable_area(self, a0: StringTraits, a1: FloatTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: reachable_area(x, a0, a1), [self._values()]))

    def reachable_points(self, a0: StringTraits, a1: FloatTraits, a2: QueryTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: reachable_points(x, a0, a1, a2), [self._values()]))

    def connect_to_network(self) -> AnyChangeCollectionTraits:
        return self.map(Lambda(connect_to_network, [self._values()]))

class AnyFeatureValuesResult(Result, FeatureValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FeatureResult

class PointTraits(GeometryTraits):

    def add_point(self, a0: StringPointCollectionResult) -> StringPointCollectionResult:
        return add_point(self, a0)

    def within_cap(self, a0: FloatTraits) -> QueryTraits:
        return within_cap(self, a0)

    def intersecting_cap(self, a0: FloatTraits) -> QueryTraits:
        return intersecting_cap(self, a0)

    def cap_polygon(self, a0: FloatTraits) -> AreaTraits:
        return cap_polygon(self, a0)

    def sightline(self, a0: FloatTraits) -> AreaTraits:
        return sightline(self, a0)

    def distance_meters(self, a0: PointTraits) -> FloatTraits:
        return distance_meters(self, a0)

    def rectangle_polygon(self, a0: PointTraits) -> AreaTraits:
        return rectangle_polygon(self, a0)

    @classmethod
    def _collection(cls):
        return PointCollectionResult

class PointValuesTraits(GeometryValuesTraits):

    def add_point(self, a0: StringPointCollectionResult) -> CollectionTraits:
        return self.map(Lambda(lambda x: add_point(x, a0), [self._values()]))

    def within_cap(self, a0: FloatTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: within_cap(x, a0), [self._values()]))

    def intersecting_cap(self, a0: FloatTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: intersecting_cap(x, a0), [self._values()]))

    def cap_polygon(self, a0: FloatTraits) -> AreaCollectionTraits:
        return self.map(Lambda(lambda x: cap_polygon(x, a0), [self._values()]))

    def sightline(self, a0: FloatTraits) -> AreaCollectionTraits:
        return self.map(Lambda(lambda x: sightline(x, a0), [self._values()]))

    def distance_meters(self, a0: PointTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: distance_meters(x, a0), [self._values()]))

    def rectangle_polygon(self, a0: PointTraits) -> AreaCollectionTraits:
        return self.map(Lambda(lambda x: rectangle_polygon(x, a0), [self._values()]))

class AnyPointValuesResult(Result, PointValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PointResult

class AreaTraits(GeometryTraits):

    def s2_covering(self, a0: IntTraits, a1: IntTraits) -> StringStringCollectionResult:
        return s2_covering(self, a0, a1)

    def within(self) -> QueryTraits:
        return within(self)

    def s2_grid(self, a0: IntTraits) -> StringStringCollectionResult:
        return s2_grid(self, a0)

    def snap_area_edges(self, a0: QueryTraits, a1: FloatTraits) -> AreaTraits:
        return snap_area_edges(self, a0, a1)

    def area(self) -> FloatTraits:
        return area(self)

    def s2_points(self, a0: IntTraits, a1: IntTraits) -> StringPointCollectionResult:
        return s2_points(self, a0, a1)

    @classmethod
    def _collection(cls):
        return AreaCollectionResult

class AreaValuesTraits(GeometryValuesTraits):

    def s2_covering(self, a0: IntTraits, a1: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: s2_covering(x, a0, a1), [self._values()]))

    def within(self) -> CollectionTraits:
        return self.map(Lambda(within, [self._values()]))

    def s2_grid(self, a0: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: s2_grid(x, a0), [self._values()]))

    def snap_area_edges(self, a0: QueryTraits, a1: FloatTraits) -> AreaCollectionTraits:
        return self.map(Lambda(lambda x: snap_area_edges(x, a0, a1), [self._values()]))

    def area(self) -> AnyFloatCollectionTraits:
        return self.map(Lambda(area, [self._values()]))

    def s2_points(self, a0: IntTraits, a1: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: s2_points(x, a0, a1), [self._values()]))

class AnyAreaValuesResult(Result, AreaValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AreaResult

class NumberTraits:

    def add(self, a0: NumberTraits) -> NumberTraits:
        return add(self, a0)

    def divide(self, a0: NumberTraits) -> NumberTraits:
        return divide(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class NumberValuesTraits:

    def add(self, a0: NumberTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: add(x, a0), [self._values()]))

    def divide(self, a0: NumberTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: divide(x, a0), [self._values()]))

class AnyNumberValuesResult(Result, NumberValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return NumberResult

class StringTraits:

    def parse_geojson_file(self) -> GeoJSONTraits:
        return parse_geojson_file(self)

    def import_geojson_file(self, a0: StringTraits) -> ChangeTraits:
        return import_geojson_file(self, a0)

    def s2_center(self) -> PointTraits:
        return s2_center(self)

    def debug_all_query(self) -> QueryTraits:
        return debug_all_query(self)

    def tag(self, a0: StringTraits) -> TagTraits:
        return tag(self, a0)

    def keyed(self) -> QueryTraits:
        return keyed(self)

    def s2_polygon(self) -> AreaTraits:
        return s2_polygon(self)

    def parse_geojson(self) -> GeoJSONTraits:
        return parse_geojson(self)

    def tagged(self, a0: StringTraits) -> QueryTraits:
        return tagged(self, a0)

    def export_world(self) -> IntTraits:
        return export_world(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class StringValuesTraits:

    def parse_geojson_file(self) -> CollectionTraits:
        return self.map(Lambda(parse_geojson_file, [self._values()]))

    def import_geojson_file(self, a0: StringTraits) -> AnyChangeCollectionTraits:
        return self.map(Lambda(lambda x: import_geojson_file(x, a0), [self._values()]))

    def s2_center(self) -> PointCollectionTraits:
        return self.map(Lambda(s2_center, [self._values()]))

    def debug_all_query(self) -> CollectionTraits:
        return self.map(Lambda(debug_all_query, [self._values()]))

    def tag(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: tag(x, a0), [self._values()]))

    def keyed(self) -> CollectionTraits:
        return self.map(Lambda(keyed, [self._values()]))

    def s2_polygon(self) -> AreaCollectionTraits:
        return self.map(Lambda(s2_polygon, [self._values()]))

    def parse_geojson(self) -> CollectionTraits:
        return self.map(Lambda(parse_geojson, [self._values()]))

    def tagged(self, a0: StringTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: tagged(x, a0), [self._values()]))

    def export_world(self) -> CollectionTraits:
        return self.map(Lambda(export_world, [self._values()]))

class AnyStringValuesResult(Result, StringValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return StringResult

class PathTraits(GeometryTraits):

    def ordered_join(self, a0: PathTraits) -> PathTraits:
        return ordered_join(self, a0)

    def join(self, a0: PathTraits) -> PathTraits:
        return join(self, a0)

    def interpolate(self, a0: FloatTraits) -> PointTraits:
        return interpolate(self, a0)

    def sample_points(self, a0: FloatTraits) -> StringPointCollectionResult:
        return sample_points(self, a0)

    def distance_to_point_meters(self, a0: PointTraits) -> FloatTraits:
        return distance_to_point_meters(self, a0)

    @classmethod
    def _collection(cls):
        return PathCollectionResult

class PathValuesTraits(GeometryValuesTraits):

    def ordered_join(self, a0: PathTraits) -> PathCollectionTraits:
        return self.map(Lambda(lambda x: ordered_join(x, a0), [self._values()]))

    def join(self, a0: PathTraits) -> PathCollectionTraits:
        return self.map(Lambda(lambda x: join(x, a0), [self._values()]))

    def interpolate(self, a0: FloatTraits) -> PointCollectionTraits:
        return self.map(Lambda(lambda x: interpolate(x, a0), [self._values()]))

    def sample_points(self, a0: FloatTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: sample_points(x, a0), [self._values()]))

    def distance_to_point_meters(self, a0: PointTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: distance_to_point_meters(x, a0), [self._values()]))

class AnyPathValuesResult(Result, PathValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PathResult

class FeatureIDTraits(IdentifiableTraits):

    def find_feature(self) -> FeatureTraits:
        return find_feature(self)

    def find_path(self) -> PathFeatureTraits:
        return find_path(self)

    def find_point(self) -> PointFeatureTraits:
        return find_point(self)

    def find_area(self) -> AreaFeatureTraits:
        return find_area(self)

    def find_relation(self) -> RelationFeatureTraits:
        return find_relation(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureIDValuesTraits(IdentifiableValuesTraits):

    def find_feature(self) -> FeatureCollectionTraits:
        return self.map(Lambda(find_feature, [self._values()]))

    def find_path(self) -> PathFeatureCollectionTraits:
        return self.map(Lambda(find_path, [self._values()]))

    def find_point(self) -> PointFeatureCollectionTraits:
        return self.map(Lambda(find_point, [self._values()]))

    def find_area(self) -> AreaFeatureCollectionTraits:
        return self.map(Lambda(find_area, [self._values()]))

    def find_relation(self) -> RelationFeatureCollectionTraits:
        return self.map(Lambda(find_relation, [self._values()]))

class AnyFeatureIDValuesResult(Result, FeatureIDValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FeatureIDResult

class IdentifiablePointTraits:

    def point_paths(self) -> PathFeatureCollectionResult:
        return point_paths(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class IdentifiablePointValuesTraits:

    def point_paths(self) -> CollectionTraits:
        return self.map(Lambda(point_paths, [self._values()]))

class AnyIdentifiablePointValuesResult(Result, IdentifiablePointValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return IdentifiablePointResult

class TagTraits:

    def int_value(self) -> IntTraits:
        return int_value(self)

    def value(self) -> StringTraits:
        return value(self)

    def float_value(self) -> FloatTraits:
        return float_value(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class TagValuesTraits:

    def int_value(self) -> CollectionTraits:
        return self.map(Lambda(int_value, [self._values()]))

    def value(self) -> CollectionTraits:
        return self.map(Lambda(value, [self._values()]))

    def float_value(self) -> AnyFloatCollectionTraits:
        return self.map(Lambda(float_value, [self._values()]))

class AnyTagValuesResult(Result, TagValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return TagResult

class AreaFeatureTraits(FeatureTraits, AreaTraits):
    @classmethod
    def _collection(cls):
        return AreaFeatureCollectionResult

class AreaFeatureValuesTraits(FeatureValuesTraits, AreaValuesTraits):
    pass

class AnyAreaFeatureValuesResult(Result, AreaFeatureValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AreaFeatureResult

class PointCollectionTraits(CollectionTraits, PointValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class AreaCollectionTraits(CollectionTraits, AreaValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class ChangeTraits:

    def with_change(self, a0: Callable[[],AnyTraits]) -> AnyTraits:
        return with_change(self, a0)

    @classmethod
    def _collection(cls):
        return AnyChangeCollectionResult

class ChangeValuesTraits:

    def with_change(self, a0: Callable[[],AnyTraits]) -> CollectionTraits:
        return self.map(Lambda(lambda x: with_change(x, a0), [self._values()]))

class AnyChangeValuesResult(Result, ChangeValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return ChangeResult

class PointFeatureTraits(FeatureTraits, PointTraits, IdentifiablePointTraits):

    def degree(self) -> IntTraits:
        return degree(self)

    def connect(self, a0: PointFeatureTraits) -> ChangeTraits:
        return connect(self, a0)

    @classmethod
    def _collection(cls):
        return PointFeatureCollectionResult

class PointFeatureValuesTraits(FeatureValuesTraits, PointValuesTraits, IdentifiablePointValuesTraits):

    def degree(self) -> CollectionTraits:
        return self.map(Lambda(degree, [self._values()]))

    def connect(self, a0: PointFeatureTraits) -> AnyChangeCollectionTraits:
        return self.map(Lambda(lambda x: connect(x, a0), [self._values()]))

class AnyPointFeatureValuesResult(Result, PointFeatureValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PointFeatureResult

class FloatTraits(NumberTraits):

    def ll(self, a0: FloatTraits) -> PointTraits:
        return ll(self, a0)

    @classmethod
    def _collection(cls):
        return AnyFloatCollectionResult

class FloatValuesTraits(NumberValuesTraits):

    def ll(self, a0: FloatTraits) -> PointCollectionTraits:
        return self.map(Lambda(lambda x: ll(x, a0), [self._values()]))

class AnyFloatValuesResult(Result, FloatValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FloatResult

class IntTraits(NumberTraits):

    def add_ints(self, a0: IntTraits) -> IntTraits:
        return add_ints(self, a0)

    def clamp(self, a0: IntTraits, a1: IntTraits) -> IntTraits:
        return clamp(self, a0, a1)

    def divide_int(self, a0: FloatTraits) -> FloatTraits:
        return divide_int(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class IntValuesTraits(NumberValuesTraits):

    def add_ints(self, a0: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: add_ints(x, a0), [self._values()]))

    def clamp(self, a0: IntTraits, a1: IntTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: clamp(x, a0, a1), [self._values()]))

    def divide_int(self, a0: FloatTraits) -> AnyFloatCollectionTraits:
        return self.map(Lambda(lambda x: divide_int(x, a0), [self._values()]))

class AnyIntValuesResult(Result, IntValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return IntResult

class PathFeatureTraits(PathTraits, FeatureTraits):

    def length(self) -> FloatTraits:
        return length(self)

    @classmethod
    def _collection(cls):
        return PathFeatureCollectionResult

class PathFeatureValuesTraits(PathValuesTraits, FeatureValuesTraits):

    def length(self) -> AnyFloatCollectionTraits:
        return self.map(Lambda(length, [self._values()]))

class AnyPathFeatureValuesResult(Result, PathFeatureValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PathFeatureResult

class PathCollectionTraits(CollectionTraits, PathValuesTraits):

    def sample_points_along_paths(self, a0: FloatTraits) -> PointCollectionResult:
        return sample_points_along_paths(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyTraits:

    def collection(self) -> CollectionResult:
        return collection(self)

    def pair(self, a0: AnyTraits) -> PairTraits:
        return pair(self, a0)

    def gt(self, a0: AnyTraits) -> BoolTraits:
        return gt(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyValuesTraits:

    def collection(self) -> CollectionTraits:
        return self.map(Lambda(collection, [self._values()]))

    def pair(self, a0: AnyTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: pair(x, a0), [self._values()]))

    def gt(self, a0: AnyTraits) -> CollectionTraits:
        return self.map(Lambda(lambda x: gt(x, a0), [self._values()]))

class AnyAnyValuesResult(Result, AnyValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AnyResult

class RelationFeatureTraits(GeometryTraits, FeatureTraits):
    @classmethod
    def _collection(cls):
        return RelationFeatureCollectionResult

class RelationFeatureValuesTraits(GeometryValuesTraits, FeatureValuesTraits):
    pass

class AnyRelationFeatureValuesResult(Result, RelationFeatureValuesTraits, CollectionTraits):

    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return RelationFeatureResult

class StringAreaCollectionTraits(CollectionTraits, AreaValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class StringPointCollectionTraits(CollectionTraits, PointValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class IntTagCollectionTraits(CollectionTraits, TagValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyRenderableCollectionTraits(CollectionTraits, RenderableValuesTraits):

    def to_geojson_collection(self) -> GeoJSONTraits:
        return to_geojson_collection(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class PointFeatureCollectionTraits(PointCollectionTraits, PointFeatureValuesTraits):

    def containing_areas(self, a0: QueryTraits) -> AreaFeatureCollectionResult:
        return containing_areas(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class QueryProtoTraits:
    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyGeometryCollectionTraits(CollectionTraits, GeometryValuesTraits):

    def convex_hull(self) -> AreaTraits:
        return convex_hull(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class QueryTraits:

    def find_relations(self) -> RelationFeatureCollectionResult:
        return find_relations(self)

    def find_paths(self) -> PathFeatureCollectionResult:
        return find_paths(self)

    def find_areas(self) -> AreaFeatureCollectionResult:
        return find_areas(self)

    def find_points(self) -> PointFeatureCollectionResult:
        return find_points(self)

    def and_(self, a0: QueryTraits) -> QueryTraits:
        return and_(self, a0)

    def or_(self, a0: QueryTraits) -> QueryTraits:
        return or_(self, a0)

    def find(self) -> FeatureCollectionResult:
        return find(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class PathFeatureCollectionTraits(PathCollectionTraits, PathFeatureValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureIDStringCollectionTraits(CollectionTraits, StringValuesTraits):

    def remove_tags(self) -> ChangeTraits:
        return remove_tags(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureIDIntCollectionTraits(CollectionTraits, IntValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class IntFeatureIDCollectionTraits(CollectionTraits, FeatureIDValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureCollectionTraits(CollectionTraits, FeatureValuesTraits):

    def building_access(self, a0: FloatTraits, a1: StringTraits) -> FeatureIDFeatureIDCollectionResult:
        return building_access(self, a0, a1)

    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyFloatCollectionTraits(CollectionTraits, FloatValuesTraits):

    def percentiles(self) -> AnyFloatCollectionResult:
        return percentiles(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class PairTraits:

    def first(self) -> AnyTraits:
        return first(self)

    def second(self) -> AnyTraits:
        return second(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class AnyChangeCollectionTraits(CollectionTraits, ChangeValuesTraits):

    def merge_changes(self) -> ChangeTraits:
        return merge_changes(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureIDTagCollectionTraits(CollectionTraits, TagValuesTraits):

    def add_tags(self) -> ChangeTraits:
        return add_tags(self)

    @classmethod
    def _collection(cls):
        return CollectionResult

class RelationFeatureCollectionTraits(CollectionTraits, RelationFeatureValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class StringStringCollectionTraits(CollectionTraits, StringValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class AreaFeatureCollectionTraits(AreaCollectionTraits, AreaFeatureValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class GeoJSONTraits:

    def import_geojson(self, a0: StringTraits) -> ChangeTraits:
        return import_geojson(self, a0)

    def geojson_areas(self) -> StringAreaCollectionResult:
        return geojson_areas(self)

    def map_geometries(self, a0: Callable[[GeometryTraits],GeometryTraits]) -> GeoJSONTraits:
        return map_geometries(self, a0)

    @classmethod
    def _collection(cls):
        return CollectionResult

class BoolTraits:
    @classmethod
    def _collection(cls):
        return CollectionResult

class FeatureIDFeatureIDCollectionTraits(CollectionTraits, FeatureIDValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class IntStringCollectionTraits(CollectionTraits, StringValuesTraits):
    @classmethod
    def _collection(cls):
        return CollectionResult

class CollectionResult(Result, CollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AnyResult

class RenderableResult(Result, RenderableTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class GeometryResult(Result, GeometryTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class IdentifiableResult(Result, IdentifiableTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class FeatureResult(Result, FeatureTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PointResult(Result, PointTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class AreaResult(Result, AreaTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class NumberResult(Result, NumberTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class StringResult(Result, StringTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PathResult(Result, PathTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class FeatureIDResult(Result, FeatureIDTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class IdentifiablePointResult(Result, IdentifiablePointTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class TagResult(Result, TagTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class AreaFeatureResult(Result, AreaFeatureTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PointCollectionResult(Result, PointCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PointResult

class AreaCollectionResult(Result, AreaCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AreaResult

class ChangeResult(Result, ChangeTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PointFeatureResult(Result, PointFeatureTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class FloatResult(Result, FloatTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class IntResult(Result, IntTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PathFeatureResult(Result, PathFeatureTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PathCollectionResult(Result, PathCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PathResult

class AnyResult(Result, AnyTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class RelationFeatureResult(Result, RelationFeatureTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class StringAreaCollectionResult(Result, StringAreaCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AreaResult

class StringPointCollectionResult(Result, StringPointCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PointResult

class IntTagCollectionResult(Result, IntTagCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return TagResult

class AnyRenderableCollectionResult(Result, AnyRenderableCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return RenderableResult

class PointFeatureCollectionResult(Result, PointFeatureCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PointFeatureResult

class QueryProtoResult(Result, QueryProtoTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class AnyGeometryCollectionResult(Result, AnyGeometryCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return GeometryResult

class QueryResult(Result, QueryTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class PathFeatureCollectionResult(Result, PathFeatureCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return PathFeatureResult

class FeatureIDStringCollectionResult(Result, FeatureIDStringCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return StringResult

class FeatureIDIntCollectionResult(Result, FeatureIDIntCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return IntResult

class IntFeatureIDCollectionResult(Result, IntFeatureIDCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FeatureIDResult

class FeatureCollectionResult(Result, FeatureCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FeatureResult

class AnyFloatCollectionResult(Result, AnyFloatCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FloatResult

class PairResult(Result, PairTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class AnyChangeCollectionResult(Result, AnyChangeCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return ChangeResult

class FeatureIDTagCollectionResult(Result, FeatureIDTagCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return TagResult

class RelationFeatureCollectionResult(Result, RelationFeatureCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return RelationFeatureResult

class StringStringCollectionResult(Result, StringStringCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return StringResult

class AreaFeatureCollectionResult(Result, AreaFeatureCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return AreaFeatureResult

class GeoJSONResult(Result, GeoJSONTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class BoolResult(Result, BoolTraits):
    def __init__(self, node):
        Result.__init__(self, node)

class FeatureIDFeatureIDCollectionResult(Result, FeatureIDFeatureIDCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return FeatureIDResult

class IntStringCollectionResult(Result, IntStringCollectionTraits):
    def __init__(self, node):
        Result.__init__(self, node)

    @classmethod
    def _values(cls):
        return StringResult

class FunctionAnyAnyResult(Result, Callable[[AnyTraits],AnyTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : AnyTraits) -> AnyTraits:
        raise NotImplementedError()

class FunctionAreaGeometryResult(Result, Callable[[AreaTraits],GeometryTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : AreaTraits) -> GeometryTraits:
        raise NotImplementedError()

class FunctionAnyResult(Result, Callable[[],AnyTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, ) -> AnyTraits:
        raise NotImplementedError()

class FunctionPathGeometryResult(Result, Callable[[PathTraits],GeometryTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : PathTraits) -> GeometryTraits:
        raise NotImplementedError()

class FunctionPointGeometryResult(Result, Callable[[PointTraits],GeometryTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : PointTraits) -> GeometryTraits:
        raise NotImplementedError()

class FunctionPairAnyResult(Result, Callable[[PairTraits],AnyTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : PairTraits) -> AnyTraits:
        raise NotImplementedError()

class FunctionAnyBoolResult(Result, Callable[[AnyTraits],BoolTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : AnyTraits) -> BoolTraits:
        raise NotImplementedError()

class FunctionGeometryGeometryResult(Result, Callable[[GeometryTraits],GeometryTraits]):

    def __init__(self, node):
        Result.__init__(self, node)

    def __call__(self, a0 : GeometryTraits) -> GeometryTraits:
        raise NotImplementedError()

def int_value(a0: TagTraits) -> IntTraits:
    args = [a0]
    return IntResult(Call(Symbol('int-value'), args))

def point_features(a0: FeatureTraits) -> PointFeatureCollectionResult:
    args = [a0]
    return PointFeatureCollectionResult(Call(Symbol('point-features'), args))

def reachable(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits, a3: QueryTraits) -> FeatureCollectionResult:
    args = [a0, a1, a2, a3]
    return FeatureCollectionResult(Call(Symbol('reachable'), args))

def building_access(a0: FeatureCollectionResult, a1: FloatTraits, a2: StringTraits) -> FeatureIDFeatureIDCollectionResult:
    args = [a0, a1, a2]
    return FeatureIDFeatureIDCollectionResult(Call(Symbol('building-access'), args))

def add_point(a0: PointTraits, a1: StringPointCollectionResult) -> StringPointCollectionResult:
    args = [a0, a1]
    return StringPointCollectionResult(Call(Symbol('add-point'), args))

def within_cap(a0: PointTraits, a1: FloatTraits) -> QueryTraits:
    args = [a0, a1]
    return QueryResult(Call(Symbol('within-cap'), args))

def find_relations(a0: QueryTraits) -> RelationFeatureCollectionResult:
    args = [a0]
    return RelationFeatureCollectionResult(Call(Symbol('find-relations'), args))

def type_path() -> QueryProtoTraits:
    args = []
    return QueryProtoResult(Call(Symbol('type-path'), args))

def count_tag_value(a0: IdentifiableTraits, a1: StringTraits) -> CollectionResult:
    args = [a0, a1]
    return CollectionResult(Call(Symbol('count-tag-value'), args))

def ordered_join(a0: PathTraits, a1: PathTraits) -> PathTraits:
    args = [a0, a1]
    return PathResult(Call(Symbol('ordered-join'), args))

def s2_covering(a0: AreaTraits, a1: IntTraits, a2: IntTraits) -> StringStringCollectionResult:
    args = [a0, a1, a2]
    return StringStringCollectionResult(Call(Symbol('s2-covering'), args))

def to_geojson(a0: RenderableTraits) -> GeoJSONTraits:
    args = [a0]
    return GeoJSONResult(Call(Symbol('to-geojson'), args))

def map_parallel(a0: CollectionResult, a1: Callable[[AnyTraits],AnyTraits]) -> CollectionResult:
    args = [a0, a1]
    return CollectionResult(Call(Symbol('map-parallel'), args))

def percentiles(a0: AnyFloatCollectionResult) -> AnyFloatCollectionResult:
    args = [a0]
    return AnyFloatCollectionResult(Call(Symbol('percentiles'), args))

def value(a0: TagTraits) -> StringTraits:
    args = [a0]
    return StringResult(Call(Symbol('value'), args))

def get(a0: IdentifiableTraits, a1: StringTraits) -> TagTraits:
    args = [a0, a1]
    return TagResult(Call(Symbol('get'), args))

def points(a0: GeometryTraits) -> PointCollectionResult:
    args = [a0]
    return PointCollectionResult(Call(Symbol('points'), args))

def intersecting_cap(a0: PointTraits, a1: FloatTraits) -> QueryTraits:
    args = [a0, a1]
    return QueryResult(Call(Symbol('intersecting-cap'), args))

def get_int(a0: IdentifiableTraits, a1: StringTraits) -> IntTraits:
    args = [a0, a1]
    return IntResult(Call(Symbol('get-int'), args))

def parse_geojson_file(a0: StringTraits) -> GeoJSONTraits:
    args = [a0]
    return GeoJSONResult(Call(Symbol('parse-geojson-file'), args))

def collection(*a0: AnyTraits) -> CollectionResult:
    args = []
    args.extend(a0)
    return CollectionResult(Call(Symbol('collection'), args))

def merge_changes(a0: AnyChangeCollectionResult) -> ChangeTraits:
    args = [a0]
    return ChangeResult(Call(Symbol('merge-changes'), args))

def find_paths(a0: QueryTraits) -> PathFeatureCollectionResult:
    args = [a0]
    return PathFeatureCollectionResult(Call(Symbol('find-paths'), args))

def point_paths(a0: IdentifiablePointTraits) -> PathFeatureCollectionResult:
    args = [a0]
    return PathFeatureCollectionResult(Call(Symbol('point-paths'), args))

def tile_ids(a0: FeatureTraits) -> FeatureIDIntCollectionResult:
    args = [a0]
    return FeatureIDIntCollectionResult(Call(Symbol('tile-ids'), args))

def import_geojson_file(a0: StringTraits, a1: StringTraits) -> ChangeTraits:
    args = [a0, a1]
    return ChangeResult(Call(Symbol('import-geojson-file'), args))

def remove_tag(a0: IdentifiableTraits, a1: StringTraits) -> ChangeTraits:
    args = [a0, a1]
    return ChangeResult(Call(Symbol('remove-tag'), args))

def find_areas(a0: QueryTraits) -> AreaFeatureCollectionResult:
    args = [a0]
    return AreaFeatureCollectionResult(Call(Symbol('find-areas'), args))

def containing_areas(a0: PointFeatureCollectionResult, a1: QueryTraits) -> AreaFeatureCollectionResult:
    args = [a0, a1]
    return AreaFeatureCollectionResult(Call(Symbol('containing-areas'), args))

def first(a0: PairTraits) -> AnyTraits:
    args = [a0]
    return AnyResult(Call(Symbol('first'), args))

def flattern(a0: CollectionResult) -> CollectionResult:
    args = [a0]
    return CollectionResult(Call(Symbol('flattern'), args))

def second(a0: PairTraits) -> AnyTraits:
    args = [a0]
    return AnyResult(Call(Symbol('second'), args))

def top(a0: CollectionResult, a1: IntTraits) -> CollectionResult:
    args = [a0, a1]
    return CollectionResult(Call(Symbol('top'), args))

def remove_tags(a0: FeatureIDStringCollectionResult) -> ChangeTraits:
    args = [a0]
    return ChangeResult(Call(Symbol('remove-tags'), args))

def find_feature(a0: FeatureIDTraits) -> FeatureTraits:
    args = [a0]
    return FeatureResult(Call(Symbol('find-feature'), args))

def convex_hull(a0: AnyGeometryCollectionResult) -> AreaTraits:
    args = [a0]
    return AreaResult(Call(Symbol('convex-hull'), args))

def length(a0: PathFeatureTraits) -> FloatTraits:
    args = [a0]
    return FloatResult(Call(Symbol('length'), args))

def degree(a0: PointFeatureTraits) -> IntTraits:
    args = [a0]
    return IntResult(Call(Symbol('degree'), args))

def paths_to_reach(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits, a3: QueryTraits) -> FeatureIDIntCollectionResult:
    args = [a0, a1, a2, a3]
    return FeatureIDIntCollectionResult(Call(Symbol('paths-to-reach'), args))

def connect(a0: PointFeatureTraits, a1: PointFeatureTraits) -> ChangeTraits:
    args = [a0, a1]
    return ChangeResult(Call(Symbol('connect'), args))

def apply_to_path(a0: Callable[[PathTraits],GeometryTraits]) -> Callable[[GeometryTraits],GeometryTraits]:
    args = [a0]
    return FunctionGeometryGeometryResult(Call(Symbol('apply-to-path'), args))

filter = diagonal_b6.expression._filter

def sum_by_key(a0: CollectionResult) -> CollectionResult:
    args = [a0]
    return CollectionResult(Call(Symbol('sum-by-key'), args))

def within(a0: AreaTraits) -> QueryTraits:
    args = [a0]
    return QueryResult(Call(Symbol('within'), args))

def s2_center(a0: StringTraits) -> PointTraits:
    args = [a0]
    return PointResult(Call(Symbol('s2-center'), args))

def add_tag(a0: IdentifiableTraits, a1: TagTraits) -> ChangeTraits:
    args = [a0, a1]
    return ChangeResult(Call(Symbol('add-tag'), args))

def s2_grid(a0: AreaTraits, a1: IntTraits) -> StringStringCollectionResult:
    args = [a0, a1]
    return StringStringCollectionResult(Call(Symbol('s2-grid'), args))

def snap_area_edges(a0: AreaTraits, a1: QueryTraits, a2: FloatTraits) -> AreaTraits:
    args = [a0, a1, a2]
    return AreaResult(Call(Symbol('snap-area-edges'), args))

def take(a0: CollectionResult, a1: IntTraits) -> CollectionResult:
    args = [a0, a1]
    return CollectionResult(Call(Symbol('take'), args))

def find_points(a0: QueryTraits) -> PointFeatureCollectionResult:
    args = [a0]
    return PointFeatureCollectionResult(Call(Symbol('find-points'), args))

def join(a0: PathTraits, a1: PathTraits) -> PathTraits:
    args = [a0, a1]
    return PathResult(Call(Symbol('join'), args))

def apply_to_point(a0: Callable[[PointTraits],GeometryTraits]) -> Callable[[GeometryTraits],GeometryTraits]:
    args = [a0]
    return FunctionGeometryGeometryResult(Call(Symbol('apply-to-point'), args))

def pair(a0: AnyTraits, a1: AnyTraits) -> PairTraits:
    args = [a0, a1]
    return PairResult(Call(Symbol('pair'), args))

def and_(a0: QueryTraits, a1: QueryTraits) -> QueryTraits:
    args = [a0, a1]
    return QueryResult(Call(Symbol('and'), args))

def add_ints(a0: IntTraits, a1: IntTraits) -> IntTraits:
    args = [a0, a1]
    return IntResult(Call(Symbol('add-ints'), args))

def debug_all_query(a0: StringTraits) -> QueryTraits:
    args = [a0]
    return QueryResult(Call(Symbol('debug-all-query'), args))

def or_(a0: QueryTraits, a1: QueryTraits) -> QueryTraits:
    args = [a0, a1]
    return QueryResult(Call(Symbol('or'), args))

def tag(a0: StringTraits, a1: StringTraits) -> TagTraits:
    args = [a0, a1]
    return TagResult(Call(Symbol('tag'), args))

def area(a0: AreaTraits) -> FloatTraits:
    args = [a0]
    return FloatResult(Call(Symbol('area'), args))

def tile_ids_hex(a0: FeatureTraits) -> FeatureIDStringCollectionResult:
    args = [a0]
    return FeatureIDStringCollectionResult(Call(Symbol('tile-ids-hex'), args))

def debug_tokens(a0: IdentifiableTraits) -> IntStringCollectionResult:
    args = [a0]
    return IntStringCollectionResult(Call(Symbol('debug-tokens'), args))

def closest(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits, a3: QueryTraits) -> FeatureTraits:
    args = [a0, a1, a2, a3]
    return FeatureResult(Call(Symbol('closest'), args))

def import_geojson(a0: GeoJSONTraits, a1: StringTraits) -> ChangeTraits:
    args = [a0, a1]
    return ChangeResult(Call(Symbol('import-geojson'), args))

def all() -> QueryTraits:
    args = []
    return QueryResult(Call(Symbol('all'), args))

def has_key(a0: FeatureTraits, a1: StringTraits) -> BoolTraits:
    args = [a0, a1]
    return BoolResult(Call(Symbol('has-key'), args))

def interpolate(a0: PathTraits, a1: FloatTraits) -> PointTraits:
    args = [a0, a1]
    return PointResult(Call(Symbol('interpolate'), args))

def cap_polygon(a0: PointTraits, a1: FloatTraits) -> AreaTraits:
    args = [a0, a1]
    return AreaResult(Call(Symbol('cap-polygon'), args))

def centroid(a0: GeometryTraits) -> PointTraits:
    args = [a0]
    return PointResult(Call(Symbol('centroid'), args))

def to_geojson_collection(a0: AnyRenderableCollectionResult) -> GeoJSONTraits:
    args = [a0]
    return GeoJSONResult(Call(Symbol('to-geojson-collection'), args))

def sightline(a0: PointTraits, a1: FloatTraits) -> AreaTraits:
    args = [a0, a1]
    return AreaResult(Call(Symbol('sightline'), args))

def add_tags(a0: FeatureIDTagCollectionResult) -> ChangeTraits:
    args = [a0]
    return ChangeResult(Call(Symbol('add-tags'), args))

def count_values(a0: CollectionResult) -> CollectionResult:
    args = [a0]
    return CollectionResult(Call(Symbol('count-values'), args))

def intersecting(a0: GeometryTraits) -> QueryTraits:
    args = [a0]
    return QueryResult(Call(Symbol('intersecting'), args))

def keyed(a0: StringTraits) -> QueryTraits:
    args = [a0]
    return QueryResult(Call(Symbol('keyed'), args))

def all_tags(a0: IdentifiableTraits) -> IntTagCollectionResult:
    args = [a0]
    return IntTagCollectionResult(Call(Symbol('all-tags'), args))

def clamp(a0: IntTraits, a1: IntTraits, a2: IntTraits) -> IntTraits:
    args = [a0, a1, a2]
    return IntResult(Call(Symbol('clamp'), args))

def closest_distance(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits, a3: QueryTraits) -> FloatTraits:
    args = [a0, a1, a2, a3]
    return FloatResult(Call(Symbol('closest-distance'), args))

def with_change(a0: ChangeTraits, a1: Callable[[],AnyTraits]) -> AnyTraits:
    args = [a0, a1]
    return AnyResult(Call(Symbol('with-change'), args))

def type_point() -> QueryProtoTraits:
    args = []
    return QueryProtoResult(Call(Symbol('type-point'), args))

def sample_points_along_paths(a0: PathCollectionResult, a1: FloatTraits) -> PointCollectionResult:
    args = [a0, a1]
    return PointCollectionResult(Call(Symbol('sample-points-along-paths'), args))

def s2_points(a0: AreaTraits, a1: IntTraits, a2: IntTraits) -> StringPointCollectionResult:
    args = [a0, a1, a2]
    return StringPointCollectionResult(Call(Symbol('s2-points'), args))

def s2_polygon(a0: StringTraits) -> AreaTraits:
    args = [a0]
    return AreaResult(Call(Symbol('s2-polygon'), args))

def reachable_area(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits) -> FloatTraits:
    args = [a0, a1, a2]
    return FloatResult(Call(Symbol('reachable-area'), args))

def reachable_points(a0: FeatureTraits, a1: StringTraits, a2: FloatTraits, a3: QueryTraits) -> PointFeatureCollectionResult:
    args = [a0, a1, a2, a3]
    return PointFeatureCollectionResult(Call(Symbol('reachable-points'), args))

def empty_points() -> StringPointCollectionResult:
    args = []
    return StringPointCollectionResult(Call(Symbol('empty-points'), args))

def find_path(a0: FeatureIDTraits) -> PathFeatureTraits:
    args = [a0]
    return PathFeatureResult(Call(Symbol('find-path'), args))

def type_area() -> QueryProtoTraits:
    args = []
    return QueryProtoResult(Call(Symbol('type-area'), args))

def float_value(a0: TagTraits) -> FloatTraits:
    args = [a0]
    return FloatResult(Call(Symbol('float-value'), args))

def connect_to_network(a0: FeatureTraits) -> ChangeTraits:
    args = [a0]
    return ChangeResult(Call(Symbol('connect-to-network'), args))

def ll(a0: FloatTraits, a1: FloatTraits) -> PointTraits:
    args = [a0, a1]
    return PointResult(Call(Symbol('ll'), args))

def distance_meters(a0: PointTraits, a1: PointTraits) -> FloatTraits:
    args = [a0, a1]
    return FloatResult(Call(Symbol('distance-meters'), args))

def find_point(a0: FeatureIDTraits) -> PointFeatureTraits:
    args = [a0]
    return PointFeatureResult(Call(Symbol('find-point'), args))

def count(a0: CollectionResult) -> IntTraits:
    args = [a0]
    return IntResult(Call(Symbol('count'), args))

def rectangle_polygon(a0: PointTraits, a1: PointTraits) -> AreaTraits:
    args = [a0, a1]
    return AreaResult(Call(Symbol('rectangle-polygon'), args))

def find_area(a0: FeatureIDTraits) -> AreaFeatureTraits:
    args = [a0]
    return AreaFeatureResult(Call(Symbol('find-area'), args))

def find_relation(a0: FeatureIDTraits) -> RelationFeatureTraits:
    args = [a0]
    return RelationFeatureResult(Call(Symbol('find-relation'), args))

def divide_int(a0: IntTraits, a1: FloatTraits) -> FloatTraits:
    args = [a0, a1]
    return FloatResult(Call(Symbol('divide-int'), args))

def apply_to_area(a0: Callable[[AreaTraits],GeometryTraits]) -> Callable[[GeometryTraits],GeometryTraits]:
    args = [a0]
    return FunctionGeometryGeometryResult(Call(Symbol('apply-to-area'), args))

map = diagonal_b6.expression._map

def get_float(a0: IdentifiableTraits, a1: StringTraits) -> FloatTraits:
    args = [a0, a1]
    return FloatResult(Call(Symbol('get-float'), args))

def sample_points(a0: PathTraits, a1: FloatTraits) -> StringPointCollectionResult:
    args = [a0, a1]
    return StringPointCollectionResult(Call(Symbol('sample-points'), args))

def distance_to_point_meters(a0: PathTraits, a1: PointTraits) -> FloatTraits:
    args = [a0, a1]
    return FloatResult(Call(Symbol('distance-to-point-meters'), args))

def parse_geojson(a0: StringTraits) -> GeoJSONTraits:
    args = [a0]
    return GeoJSONResult(Call(Symbol('parse-geojson'), args))

def geojson_areas(a0: GeoJSONTraits) -> StringAreaCollectionResult:
    args = [a0]
    return StringAreaCollectionResult(Call(Symbol('geojson-areas'), args))

def tagged(a0: StringTraits, a1: StringTraits) -> QueryTraits:
    args = [a0, a1]
    return QueryResult(Call(Symbol('tagged'), args))

def find(a0: QueryTraits) -> FeatureCollectionResult:
    args = [a0]
    return FeatureCollectionResult(Call(Symbol('find'), args))

def add(a0: NumberTraits, a1: NumberTraits) -> NumberTraits:
    args = [a0, a1]
    return NumberResult(Call(Symbol('add'), args))

def tile_paths(a0: GeometryTraits, a1: IntTraits) -> IntStringCollectionResult:
    args = [a0, a1]
    return IntStringCollectionResult(Call(Symbol('tile-paths'), args))

def map_geometries(a0: GeoJSONTraits, a1: Callable[[GeometryTraits],GeometryTraits]) -> GeoJSONTraits:
    args = [a0, a1]
    return GeoJSONResult(Call(Symbol('map-geometries'), args))

def export_world(a0: StringTraits) -> IntTraits:
    args = [a0]
    return IntResult(Call(Symbol('export-world'), args))

def map_items(a0: CollectionResult, a1: Callable[[PairTraits],AnyTraits]) -> CollectionResult:
    args = [a0, a1]
    return CollectionResult(Call(Symbol('map-items'), args))

def get_string(a0: IdentifiableTraits, a1: StringTraits) -> StringTraits:
    args = [a0, a1]
    return StringResult(Call(Symbol('get-string'), args))

def gt(a0: AnyTraits, a1: AnyTraits) -> BoolTraits:
    args = [a0, a1]
    return BoolResult(Call(Symbol('gt'), args))

def divide(a0: NumberTraits, a1: NumberTraits) -> NumberTraits:
    args = [a0, a1]
    return NumberResult(Call(Symbol('divide'), args))

register_builtin_result(str,StringResult)
register_builtin_result(int,IntResult)
register_builtin_result(float,FloatResult)
register_builtin_result(bool,BoolResult)
